{"version":3,"sources":["dataModels/Types.ts","dataModels/Sources.ts","models/Statistics.ts","models/Enums.ts","dataModels/Spellcasting.ts","dataModels/EntryData.ts","dataModels/AdventureData.ts","dataModels/Parse.ts","models/AdventureSummary.ts","utils/NotNull.ts","services/HttpService.ts","services/AdventureService.ts","adventures/AdventureDisplay.tsx","adventures/AdventuresPage.tsx","utils/BemBuilder.ts","application/Navigation.tsx","services/ItemService.ts","monster/ItemPage.tsx","models/Alignment.ts","models/Condition.ts","models/DamageType.ts","models/DragonCastingColor.ts","models/Environment.ts","models/MonsterGroup.ts","models/MonsterTags.ts","models/Size.ts","dataModels/MonsterData.ts","models/Action.ts","models/ArmorClass.ts","models/Formatters.ts","models/SkillType.ts","models/ChallengeRating.ts","utils/TextBuilder.ts","models/ConditionImmunity.ts","models/Content.ts","models/DamageModifier.ts","models/Health.ts","models/Legendary.ts","models/LegendaryAction.ts","models/LegendaryGroup.ts","models/Monster.ts","models/MonsterFlags.ts","models/MonsterNames.ts","models/MonsterSource.ts","models/MonsterType.ts","models/Reaction.ts","models/SavingThrow.ts","utils/Formatting.ts","models/Skill.ts","models/Speed.ts","utils/Ordinal.ts","models/Spellcasting.ts","utils/Plural.ts","models/Trait.ts","services/MonsterConverter.ts","services/MonsterService.ts","models/AnnotatedText.ts","models/EntityType.ts","services/LinkedTextParser.ts","components/EntityLink.tsx","components/LinkedText.tsx","components/Label.tsx","components/Definition.tsx","components/ListDefinition.tsx","monster/ChallengeRating.tsx","monster/ConditionImmunities.tsx","monster/DamageImmunities.tsx","monster/DamageResistances.tsx","monster/DamageVulnerabilities.tsx","components/ContentDisplay.tsx","utils/Never.ts","monster/LegendaryActions.tsx","monster/MonsterActions.tsx","monster/MonsterReactions.tsx","monster/MonsterSaves.tsx","monster/MonsterSkills.tsx","monster/SpellGroupDisplay.tsx","monster/MonsterSpells.tsx","monster/MonsterTraits.tsx","models/Stats.ts","monster/StatTable.tsx","monster/MonsterSheet.tsx","monster/MonsterCard.tsx","components/Loader.tsx","components/Input.tsx","components/Scroller.tsx","monster/Classnames.ts","monster/MonsterList.tsx","monster/MonsterPage.tsx","App.tsx","index.tsx"],"names":["optional","type","t","optionalArray","AbilityScore","PageSourceSchema","name","source","page","SourceSchema","createEnum","e","keys","Object","forEach","k","AbilityScores","values","Statistics","str","dex","con","wis","int","cha","AbilityScoresSchema","SpellReference","SpellSchema","lower","slots","spells","SpellcastingSchema","ability","headerEntries","footerEntries","will","hidden","daily","EntrySchema","items","style","href","path","hash","text","entry","entries","token","variantSource","caption","colLabels","colStyles","rows","AdventureSummarySchema","id","SectionSchema","AdventureSchema","data","parseData","model","original","result","results","decode","isLeft","console","error","left","length","log","i","context","map","c","key","filter","join","value","JSON","stringify","slice","message","right","AdventureSummary","notNull","cache","Map","HttpService","has","get","promise","fetch","then","json","set","AdventureService","getJson","adventures","adventure","p","a","sum","toLocaleLowerCase","AdventureDisplay","adventureSummary","useEffect","AdventuresPage","useState","setAdventures","setAdventure","list","onChange","find","target","BemBuilder","block","element","modifier","condition","this","ITEMS","label","exact","BEM","Navigation","className","to","activeClassName","ItemService","ItemPage","all","BaseAlignment","Condition","DamageType","DragonCastingColor","Environment","MonsterGroup","ActionTag","DamageTag","SenseTag","TraitTag","LanguageTag","SpellcastingTag","MiscTag","names","LAWFUL","NEUTRAL","NEUTRAL_X","NEUTRAL_Y","CHAOTIC","GOOD","EVIL","UNALIGNED","ANY","Alignment","alignment","chance","toFixed","MonsterAlignment","alignments","special","base","format","Size","MonsterTags","actions","damageTags","languageTags","miscTags","senseTags","spellcastingTags","traitTag","ComplexACSchema","ac","from","braces","ACSchema","SizeSchema","TypeTag","tag","prefix","TypeSchema","tags","swarmSize","AlignmentsSchema","ComplexAlignment","SpecialAlignment","AlignmentSchema","SimpleHealth","average","formula","SpecialHealth","HealthSchema","SkillsSchema","acrobatics","perception","stealth","history","insight","intimidation","persuasion","performance","arcana","investigation","religion","athletics","nature","survival","deception","medicine","other","oneOf","SpeedSchema","number","SpeedsSchema","walk","climb","fly","swim","burrow","canHover","SavesSchema","DamageTypeSchema","ConditionSchema","DamageImmunitySchema","immune","preNote","note","ConditionImmunitySchema","conditionImmune","ChallengeRatingSchema","cr","lair","coven","TraitSchema","inset","TagSchema","actionTags","traitTags","ResistSchema","resist","LegendaryActionSchema","ActionLikeSchema","LegendaryGroupSchema","VulnerableSchema","vulnerable","MonsterGroupSchema","MonsterSchema","shortName","size","hp","skill","speed","save","senses","languages","trait","spellcasting","action","reaction","legendary","legendaryGroup","passive","isNpc","familiar","isNamedCreature","group","level","altArt","otherSources","variant","legendaryHeader","legendaryActions","soundClip","environment","dragonCastingColor","alias","actionNote","isExtendedMonster","monster","isMonster","Action","content","ArmorClass","defaultFormat","ts","SkillType","Formatter","conditions","s","push","ChallengeRating","create","addCondition","TextBuilder","phrases","callable","builder","nonEmpty","build","ConditionImmunity","add","TextContent","description","LabeledContent","ListContent","InsetContent","VariantContent","SubVariantContent","InlineContent","LinkContent","TableContent","columnLabels","DamageModifier","damageTypes","conditional","b","DefaultHealth","Legendary","header","count","LegendaryAction","LegendaryGroup","Monster","acs","stats","skills","speeds","savingThrows","damageImmunities","damageResistance","conditionImmunities","challengeRating","traits","passivePerception","reactions","vulnerabilities","flags","reference","toLowerCase","MonsterFlags","npc","named","MonsterNames","aliases","MonsterSource","Tag","MonsterType","Reaction","SavingThrow","stat","abilityScore","capitalize","sentenceCase","line","charAt","toLocaleUpperCase","SkillTypes","SpeedType","Skill","SpeedTypes","Speed","speedType","WALK","ordinal","DailyLimit","NoLimit","DailyEachLimit","SpellSlotLimit","lowerLevelRange","singular","plural","limit","Spell","spell","SpellGroup","Spellcasting","spellcastingAbility","footer","spellGroups","Trait","toSubContent","subEntries","se","toContent","DEFAULT_LEGENDARY_ACTIONS","toMonster","sa","toMonsterAlignment","toMonsterHealth","toStatistics","toSkills","toSpeeds","toSavingThrows","d","toDamageImmunities","r","toDamageResistances","toConditionImmunities","toChallengeRating","toTraits","groups","addDaily","fromList","includes","addSpellSlot","slotLevel","undefined","toSpellcasting","toActions","toTags","toReactions","toLegendary","toVulnerabilities","url","file","monsters","ref","found","m","is","Error","printEnum","addValues","Set","Array","v","replace","MonsterService","allRaw","res","extended","response","concat","_copy","mon","f","knownKeys","foundKeys","first","rawMonster","differentKeys","isEqual","delete","isArray","every","l","isObjectLike","TextAnnotation","EntityType","ATTACK_TYPES","ms","mw","rw","AnnotatedText","annotation","dc","hit","on_hit","attack","recharge","Link","book","Text","toLink","entityType","EntityLink","entity","getText","LinkedText","match","regex","out","lastIndex","exec","link","split","trim","substring","parseText","Label","children","Definition","ListDefinition","suffix","ConditionImmunities","DamageImmunities","DamageResistances","DamageVulnerabilities","TableContentDisplay","j","ContentDisplay","x","assertNever","legendaryAction","LegendaryActions","MonsterAction","MonsterActions","MonsterReaction","MonsterReactions","MonsterSaves","MonsterSkills","SpellGroupDisplay","MonsterSpells","g","MonsterTrait","MonsterTraits","getSignedMod","mod","Math","floor","getMod","toString","Stat","StatTable","MonsterSheet","parts","makeLine","TINY","SMALL","MEDIUM","LARGE","HUGE","GIGANTIC","formatSize","MonsterCard","loader","render","dependencyList","setData","Input","placeholder","Scroller","elements","elementHeight","scrollDistance","height","position","setPosition","scrollTarget","useRef","timeout","updateScroll","scroller","scrollTop","clientHeight","current","before","ceil","after","onScroll","requestAnimationFrame","classNames","classes","flatten","fromKeys","alphabetic","localeCompare","MonsterList","selected","setMonsters","search","setSearch","isSelected","sort","formatChallengeRating","MonsterPage","params","URLSearchParams","useLocation","useSelectedMonster","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e3214f68.chunk.js","sourcesContent":["import * as t from \"io-ts\";\r\n\r\nexport function optional<T extends t.Mixed>(\r\n    type: T\r\n): t.UnionC<[T, t.UndefinedC, t.NullC]> {\r\n    return t.union([type, t.undefined, t.null]);\r\n}\r\n\r\nexport function optionalArray<T extends t.Mixed>(\r\n    type: T\r\n): t.UnionC<[t.ArrayC<T>, t.UndefinedC, t.NullC]> {\r\n    return optional(t.array(type));\r\n}\r\n","import * as t from \"io-ts\";\r\nimport { optional } from \"./Types\";\r\n\r\nexport const PageSourceSchema = t.strict({\r\n    name: t.string,\r\n    source: t.string,\r\n    page: optional(t.number)\r\n});\r\n\r\nexport const SourceSchema = t.strict({\r\n    source: t.string,\r\n    page: optional(t.number)\r\n});\r\n","import { capitalize } from \"lodash\";\r\n\r\nexport enum AbilityScore {\r\n    STR = \"str\",\r\n    DEX = \"dex\",\r\n    CON = \"con\",\r\n    WIS = \"wis\",\r\n    INT = \"int\",\r\n    CHA = \"cha\"\r\n}\r\n\r\nexport const AbilityScores = Object.values(AbilityScore);\r\n\r\nexport function abilityScoreLabel(abilityScore: AbilityScore) {\r\n    return capitalize(abilityScore);\r\n}\r\n\r\nexport class Statistics {\r\n    constructor(\r\n        readonly str: number,\r\n        readonly dex: number,\r\n        readonly con: number,\r\n        readonly wis: number,\r\n        readonly int: number,\r\n        readonly cha: number\r\n    ) {}\r\n}\r\n","import * as t from \"io-ts\";\r\n\r\nexport const createEnum = <E>(e: any, name: string): t.Type<E> => {\r\n    const keys: any = {};\r\n    Object.keys(e).forEach(k => {\r\n        keys[e[k]] = null;\r\n    });\r\n    return t.keyof(keys, name) as any;\r\n};\r\n","import * as t from \"io-ts\";\r\nimport { createEnum } from \"../models/Enums\";\r\nimport { AbilityScore } from \"../models/Statistics\";\r\nimport { optional, optionalArray } from \"./Types\";\r\n\r\nconst AbilityScoresSchema = createEnum<AbilityScore>(\r\n    AbilityScore,\r\n    \"AbilityScore\"\r\n);\r\n\r\nconst SpellReference = t.string;\r\n\r\nconst SpellSchema = t.strict({\r\n    lower: optional(t.number),\r\n    slots: optional(t.number),\r\n    spells: t.array(SpellReference)\r\n});\r\n\r\nexport type SpellSlotData = t.TypeOf<typeof SpellSchema>;\r\n\r\nexport const SpellcastingSchema = t.strict({\r\n    name: t.string,\r\n    ability: optional(AbilityScoresSchema),\r\n    headerEntries: t.array(t.string),\r\n    footerEntries: optionalArray(t.string),\r\n    will: optionalArray(SpellReference),\r\n    hidden: optional(\r\n        t.array(\r\n            t.keyof({\r\n                daily: null,\r\n                will: null\r\n            })\r\n        )\r\n    ),\r\n    daily: optional(\r\n        t.strict({\r\n            \"1e\": optionalArray(SpellReference),\r\n            \"2e\": optionalArray(SpellReference),\r\n            \"3e\": optionalArray(SpellReference),\r\n            \"1\": optionalArray(SpellReference),\r\n            \"2\": optionalArray(SpellReference),\r\n            \"3\": optionalArray(SpellReference)\r\n        })\r\n    ),\r\n    spells: optional(\r\n        t.strict({\r\n            \"0\": optional(SpellSchema),\r\n            \"1\": optional(SpellSchema),\r\n            \"2\": optional(SpellSchema),\r\n            \"3\": optional(SpellSchema),\r\n            \"4\": optional(SpellSchema),\r\n            \"5\": optional(SpellSchema),\r\n            \"6\": optional(SpellSchema),\r\n            \"7\": optional(SpellSchema),\r\n            \"8\": optional(SpellSchema),\r\n            \"9\": optional(SpellSchema)\r\n        })\r\n    )\r\n});\r\n","import * as t from \"io-ts\";\r\nimport { PageSourceSchema, SourceSchema } from \"./Sources\";\r\nimport { SpellcastingSchema } from \"./Spellcasting\";\r\nimport { optional } from \"./Types\";\r\n\r\nexport type Entry =\r\n    | string\r\n    | {\r\n          type: \"item\";\r\n          name: string;\r\n          entry: string;\r\n      }\r\n    | {\r\n          type: \"list\";\r\n          items: Entry[];\r\n          style: \"list-hang-notitle\" | null | undefined;\r\n      }\r\n    | {\r\n          type: \"inset\";\r\n          name: string;\r\n          entries: Entry[];\r\n          token: t.TypeOf<typeof PageSourceSchema> | null | undefined;\r\n      }\r\n    | {\r\n          type: \"variantSub\";\r\n          name: string;\r\n          entries: Entry[];\r\n      }\r\n    | {\r\n          type: \"variant\";\r\n          name: string;\r\n          entries: Entry[];\r\n          variantSource: t.TypeOf<typeof SourceSchema> | null | undefined;\r\n      }\r\n    | {\r\n          type: \"inline\";\r\n          entries: Entry[];\r\n      }\r\n    | {\r\n          type: \"entries\";\r\n          name: string | null | undefined;\r\n          entries: Entry[];\r\n      }\r\n    | {\r\n          type: \"link\";\r\n          href: {\r\n              type: \"internal\";\r\n              path: \"variantrules.html\";\r\n              hash: \"madness_dmg\";\r\n          };\r\n          text: string;\r\n      }\r\n    | {\r\n          type: \"table\";\r\n          caption: string | null | undefined;\r\n          colLabels: string[];\r\n          colStyles: string[];\r\n          rows: string[][];\r\n      }\r\n    | ({\r\n          type: \"spellcasting\";\r\n      } & t.TypeOf<typeof SpellcastingSchema>);\r\n\r\nexport const EntrySchema: t.Type<Entry> = t.recursion(\"Entry\", () =>\r\n    t.union([\r\n        t.string,\r\n        t.strict({\r\n            type: t.literal(\"list\"),\r\n            items: t.array(EntrySchema),\r\n            style: optional(t.literal(\"list-hang-notitle\"))\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"link\"),\r\n            href: t.strict({\r\n                type: t.literal(\"internal\"),\r\n                path: t.literal(\"variantrules.html\"),\r\n                hash: t.literal(\"madness_dmg\")\r\n            }),\r\n            text: t.string\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"item\"),\r\n            name: t.string,\r\n            entry: t.string\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"inline\"),\r\n            entries: t.array(EntrySchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"entries\"),\r\n            name: optional(t.string),\r\n            entries: t.array(EntrySchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"variantSub\"),\r\n            name: t.string,\r\n            entries: t.array(EntrySchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"inset\"),\r\n            name: t.string,\r\n            entries: t.array(EntrySchema),\r\n            token: optional(PageSourceSchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"variant\"),\r\n            name: t.string,\r\n            entries: t.array(EntrySchema),\r\n            variantSource: optional(SourceSchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"table\"),\r\n            caption: optional(t.string),\r\n            colLabels: t.array(t.string),\r\n            colStyles: t.array(t.string),\r\n            rows: t.array(t.array(t.string))\r\n        }),\r\n        t.intersection([\r\n            t.strict({ type: t.literal(\"spellcasting\") }),\r\n            SpellcastingSchema\r\n        ])\r\n    ])\r\n);\r\n","import * as t from \"io-ts\";\r\nimport { EntrySchema } from \"./EntryData\";\r\n\r\nexport const AdventureSummarySchema = t.strict({\r\n    name: t.string,\r\n    id: t.string\r\n});\r\n\r\nconst SectionSchema = t.strict({\r\n    name: t.string,\r\n    entries: t.array(t.union([EntrySchema, t.string]))\r\n});\r\n\r\nexport const AdventureSchema = t.strict({\r\n    data: t.array(SectionSchema)\r\n});\r\n","import { isLeft, Left } from \"fp-ts/lib/Either\";\r\nimport * as t from \"io-ts\";\r\n\r\nfunction printError(original: any, result: Left<t.Errors>) {\r\n    console.error(`Found ${result.left.length} errors`);\r\n    console.log(original);\r\n    result.left.forEach((error, i) => {\r\n        if (i > 10) {\r\n            return;\r\n        }\r\n        const path = error.context\r\n            .map(c => c.key)\r\n            .filter(k => !!k)\r\n            .join(\".\");\r\n        const value = (JSON.stringify(error.value) || \"undefined\").slice(0, 80);\r\n        console.log(\r\n            `${error.message || \"Invaild value\"} at ${path} got ${value}`\r\n        );\r\n    });\r\n}\r\n\r\nexport function parseData<O>(model: t.Type<O>, data: any): O | null {\r\n    const results = model.decode(data);\r\n    if (isLeft(results)) {\r\n        printError(data, results);\r\n        return null;\r\n    } else {\r\n        return results.right;\r\n    }\r\n}\r\n","export class AdventureSummary {\r\n    constructor(readonly name: string, readonly id: string) {}\r\n}\r\n","export function notNull<T extends {}>(t: T | null | undefined): t is T {\r\n    return t != null;\r\n}\r\n\r\nexport function checkNotNull<T extends {}>(t: T | null | undefined): T {\r\n    if (t == null) {\r\n        throw new Error(\"got null\");\r\n    }\r\n    return t;\r\n}\r\n","const cache: Map<string, Promise<any>> = new Map();\r\n\r\nexport class HttpService {\r\n    static async getJson<T>(path: string): Promise<T> {\r\n        if (cache.has(path)) {\r\n            return cache.get(path);\r\n        }\r\n        const promise = fetch(path).then(t => t.json());\r\n        cache.set(path, promise);\r\n        return promise;\r\n    }\r\n}\r\n","import {\r\n    AdventureSchema,\r\n    AdventureSummarySchema\r\n} from \"../dataModels/AdventureData\";\r\nimport { parseData } from \"../dataModels/Parse\";\r\nimport { AdventureSummary } from \"../models/AdventureSummary\";\r\nimport { notNull } from \"../utils/NotNull\";\r\nimport { HttpService } from \"./HttpService\";\r\n\r\nexport class AdventureService {\r\n    static async list() {\r\n        const data: { adventure: any[] } = await HttpService.getJson(\r\n            \"/data/adventures.json\"\r\n        );\r\n        const adventures = data.adventure\r\n            .map((p: any) => parseData(AdventureSummarySchema, p))\r\n            .filter(notNull);\r\n        return adventures.map(a => new AdventureSummary(a.name, a.id));\r\n    }\r\n\r\n    static async get(sum: AdventureSummary) {\r\n        const data = await HttpService.getJson(\r\n            `/data/adventure/adventure-${sum.id.toLocaleLowerCase()}.json`\r\n        );\r\n        console.log(data);\r\n        parseData(AdventureSchema, data);\r\n    }\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { AdventureSummary } from \"../models/AdventureSummary\";\r\nimport { AdventureService } from \"../services/AdventureService\";\r\n\r\nexport function AdventureDisplay({\r\n    adventureSummary\r\n}: {\r\n    adventureSummary: AdventureSummary;\r\n}) {\r\n    useEffect(() => {\r\n        AdventureService.get(adventureSummary);\r\n    }, [adventureSummary]);\r\n\r\n    return <div>{adventureSummary.name}</div>;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { AdventureSummary } from \"../models/AdventureSummary\";\r\nimport { AdventureService } from \"../services/AdventureService\";\r\nimport { AdventureDisplay } from \"./AdventureDisplay\";\r\n\r\nexport function AdventuresPage() {\r\n    const [adventures, setAdventures] = useState<AdventureSummary[]>([]);\r\n    const [adventure, setAdventure] = useState<AdventureSummary | null>(null);\r\n    useEffect(() => {\r\n        AdventureService.list().then(setAdventures);\r\n    }, []);\r\n\r\n    function selectAdventure(e: React.ChangeEvent<HTMLSelectElement>) {\r\n        setAdventure(adventures.find(a => a.id === e.target.value) || null);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <select\r\n                onChange={selectAdventure}\r\n                value={adventure ? adventure.id : \"\"}\r\n            >\r\n                <option value=\"\"></option>\r\n                {adventures.map(a => (\r\n                    <option key={a.id} value={a.id}>\r\n                        {a.name}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n            {adventure && <AdventureDisplay adventureSummary={adventure} />}\r\n        </div>\r\n    );\r\n}\r\n","export class BemBuilder {\r\n    constructor(readonly block: string) {}\r\n\r\n    element(element: string, modifier?: string, condition?: boolean) {\r\n        if (modifier != null && (condition == null || condition === true)) {\r\n            return `${this.block}__${element} ${this.block}__${element}--${modifier}`;\r\n        }\r\n        return `${this.block}__${element}`;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { BemBuilder } from \"../utils/BemBuilder\";\r\nimport \"./Navigation.css\";\r\n\r\nconst ITEMS = [\r\n    {\r\n        path: \"\",\r\n        label: \"Home\",\r\n        exact: true\r\n    },\r\n    {\r\n        path: \"monsters\",\r\n        label: \"Monsters\"\r\n    },\r\n    {\r\n        path: \"items\",\r\n        label: \"Items\"\r\n    },\r\n    {\r\n        path: \"adventures\",\r\n        label: \"Adventures\"\r\n    }\r\n];\r\n\r\nconst BEM = new BemBuilder(\"navigation\");\r\n\r\nexport function Navigation() {\r\n    return (\r\n        <nav className={`nav ${BEM.block}`}>\r\n            {ITEMS.map(i => (\r\n                <NavLink\r\n                    key={i.path}\r\n                    to={i.path}\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"border-bottom border-primary\"\r\n                    exact={i.exact}\r\n                >\r\n                    {i.label}\r\n                </NavLink>\r\n            ))}\r\n        </nav>\r\n    );\r\n}\r\n","import { Item } from \"../models/Item\";\r\nimport { HttpService } from \"./HttpService\";\r\n\r\nexport class ItemService {\r\n    static async all(): Promise<Item[]> {\r\n        const json = await HttpService.getJson(\"data/items.json\");\r\n        console.log(json);\r\n        return [];\r\n    }\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { ItemService } from \"../services/ItemService\";\r\n\r\nexport function ItemPage() {\r\n    useEffect(() => {\r\n        ItemService.all();\r\n    }, []);\r\n    return <div>Item</div>;\r\n}\r\n","export enum BaseAlignment {\r\n    LAWFUL = \"L\",\r\n    NEUTRAL = \"N\",\r\n    NEUTRAL_X = \"NX\",\r\n    NEUTRAL_Y = \"NY\",\r\n    CHAOTIC = \"C\",\r\n    GOOD = \"G\",\r\n    EVIL = \"E\",\r\n    UNALIGNED = \"U\",\r\n    ANY = \"A\"\r\n}\r\n\r\nconst names: { [key in BaseAlignment]: string } = {\r\n    [BaseAlignment.LAWFUL]: \"Lawful\",\r\n    [BaseAlignment.NEUTRAL]: \"Neutral\",\r\n    [BaseAlignment.NEUTRAL_X]: \"Neutral X\",\r\n    [BaseAlignment.NEUTRAL_Y]: \"Neutral Y\",\r\n    [BaseAlignment.CHAOTIC]: \"Chaotic\",\r\n    [BaseAlignment.GOOD]: \"Good\",\r\n    [BaseAlignment.EVIL]: \"Evil\",\r\n    [BaseAlignment.UNALIGNED]: \"Unaligned\",\r\n    [BaseAlignment.ANY]: \"Any\"\r\n};\r\n\r\nexport class Alignment {\r\n    constructor(readonly alignment: BaseAlignment, readonly chance: number) {}\r\n\r\n    format() {\r\n        if (this.chance !== 1) {\r\n            return `${names[this.alignment]} (${(this.chance * 100).toFixed(\r\n                0\r\n            )}%)`;\r\n        } else {\r\n            return names[this.alignment];\r\n        }\r\n    }\r\n}\r\n\r\nexport class MonsterAlignment {\r\n    constructor(readonly alignments: Alignment[], readonly special: string[]) {}\r\n\r\n    format() {\r\n        const base = this.alignments.map(a => a.format()).join(\" \");\r\n        if (this.special.length > 0) {\r\n            return `${base} (${this.special.join(\", \")})`;\r\n        }\r\n        return base;\r\n    }\r\n}\r\n","export enum Condition {\r\n    BLINDED = \"blinded\",\r\n    CHARMED = \"charmed\",\r\n    DEAFENED = \"deafened\",\r\n    EXHAUSTION = \"exhaustion\",\r\n    FRIGHTENED = \"frightened\",\r\n    PARALYZED = \"paralyzed\",\r\n    PETRIFIED = \"petrified\",\r\n    POISONED = \"poisoned\",\r\n    PRONE = \"prone\",\r\n    GRAPPLED = \"grappled\",\r\n    RESTRAINED = \"restrained\",\r\n    STUNNED = \"stunned\",\r\n    UNCONSCIOUS = \"unconscious\"\r\n}\r\n","export enum DamageType {\r\n    POISON = \"poison\",\r\n    PSYCHIC = \"psychic\",\r\n    FIRE = \"fire\",\r\n    LIGHTNING = \"lightning\",\r\n    BLUDGEONING = \"bludgeoning\",\r\n    PIERCING = \"piercing\",\r\n    SLASHING = \"slashing\",\r\n    COLD = \"cold\",\r\n    NECROTIC = \"necrotic\",\r\n    THUNDER = \"thunder\",\r\n    ACID = \"acid\",\r\n    FORCE = \"force\",\r\n    RADIANT = \"radiant\"\r\n}\r\n","export enum DragonCastingColor {\r\n    B = \"B\",\r\n    U = \"U\",\r\n    A = \"A\",\r\n    Z = \"Z\",\r\n    C = \"C\",\r\n    O = \"O\",\r\n    G = \"G\",\r\n    R = \"R\",\r\n    S = \"S\",\r\n    W = \"W\"\r\n}\r\n","export enum Environment {\r\n    MOUNTAIN = \"mountain\",\r\n    UNDERDARK = \"underdark\",\r\n    ARCTIC = \"arctic\",\r\n    SWAMP = \"swamp\",\r\n    DESERT = \"desert\",\r\n    COASTAL = \"coastal\",\r\n    HILL = \"hill\",\r\n    GRASSLAND = \"grassland\",\r\n    FOREST = \"forest\",\r\n    URBAN = \"urban\",\r\n    UNDERWATER = \"underwater\"\r\n}\r\n","export enum MonsterGroup {\r\n    LYCANTHROPES = \"Lycanthropes\",\r\n    DINOSAURS = \"Dinosaurs\",\r\n    ANIMATED_OBJECTS = \"Animated Objects\",\r\n    BEHOLDERS = \"Beholders\",\r\n    GENIES = \"Genies\",\r\n    ANGELS = \"Angels\",\r\n    MODRONS = \"Modrons\"\r\n}\r\n","export enum ActionTag {\r\n    MULTIATTACK = \"Multiattack\",\r\n    TENTACLES = \"Tentacles\",\r\n    PARRY = \"Parry\",\r\n    FRIGHTFUL_PRESENCE = \"Frightful Presence\",\r\n    TELEPORT = \"Teleport\",\r\n    SWALLOW = \"Swallow\"\r\n}\r\n\r\nexport enum DamageTag {\r\n    BLUDGEONING = \"B\",\r\n    PIERCING = \"P\",\r\n    FIRE = \"F\",\r\n    ACID = \"A\",\r\n    SLASHING = \"S\",\r\n    RADIANT = \"R\",\r\n    THUNDER = \"T\",\r\n    NECROTIC = \"N\",\r\n    COLD = \"C\",\r\n    LIGHTING = \"L\",\r\n    PSYCHIC = \"Y\",\r\n    POISON = \"I\",\r\n    FORCE = \"O\"\r\n}\r\n\r\nexport enum SenseTag {\r\n    BLINDSIGHT = \"B\",\r\n    DARKVISION = \"D\",\r\n    SUPERIOR_DARKVISION = \"SD\",\r\n    TRUESIGHT = \"U\",\r\n    TREMORSENSE = \"T\"\r\n}\r\n\r\nexport enum TraitTag {\r\n    MAGIC_RESISTANCE = \"Magic Resistance\",\r\n    FALSE_APPEARANCE = \"False Appearance\",\r\n    FEY_ANCESTRY = \"Fey Ancestry\",\r\n    KEEN_SENSES = \"Keen Senses\",\r\n    SNEAK_ATTACK = \"Sneak Attack\",\r\n    AMPHIBIOUS = \"Amphibious\",\r\n    MAGIC_WEAPONS = \"Magic Weapons\",\r\n    IMMUTABLE_FORM = \"Immutable Form\",\r\n    DAMAGE_ABSORPTION = \"Damage Absorption\",\r\n    HOLD_BREATH = \"Hold Breath\",\r\n    LEGENDARY_RESISTANCES = \"Legendary Resistances\",\r\n    REGENERATION = \"Regeneration\",\r\n    DEVILS_SIGHT = \"Devil's Sight\",\r\n    SPIDER_CLIMB = \"Spider Climb\",\r\n    SHAPECHANGER = \"Shapechanger\",\r\n    ANTIMAGIC_SUSCEPTIBILITY = \"Antimagic Susceptibility\",\r\n    SIEGE_MONSTER = \"Siege Monster\",\r\n    BRUTE = \"Brute\",\r\n    INCORPOREAL_MOVEMENT = \"Incorporeal Movement\",\r\n    AMBUSHER = \"Ambusher\",\r\n    REJUVENATION = \"Rejuvenation\",\r\n    TURN_IMMUNITY = \"Turn Immunity\",\r\n    SUNLIGHT_SENSITIVITY = \"Sunlight Sensitivity\",\r\n    FLYBY = \"Flyby\",\r\n    POUNCE = \"Pounce\",\r\n    ILLUMINATION = \"Illumination\",\r\n    DEATH_BURST = \"Death Burst\",\r\n    RECKLESS = \"Reckless\",\r\n    PACK_TACTICS = \"Pack Tactics\",\r\n    AGGRESSIVE = \"Aggressive\",\r\n    TURN_RESISTANCE = \"Turn Resistance\",\r\n    UNDEAD_FORTITUDE = \"Undead Fortitude\",\r\n    WATER_BREATHING = \"Water Breathing\",\r\n    WEB_SENSE = \"Web Sense\",\r\n    WEB_WALKER = \"Web Walker\",\r\n    AMORPHOUS = \"Amorphous\",\r\n    CHARGE = \"Charge\",\r\n    LIGHT_SENSITIVITY = \"Light Sensitivity\",\r\n    RAMPAGE = \"Rampage\"\r\n}\r\n\r\nexport enum LanguageTag {\r\n    C = \"C\",\r\n    DR = \"DR\",\r\n    CS = \"CS\",\r\n    E = \"E\",\r\n    GO = \"GO\",\r\n    O = \"O\",\r\n    CE = \"CE\",\r\n    U = \"U\",\r\n    XX = \"XX\",\r\n    D = \"D\",\r\n    GI = \"GI\",\r\n    DU = \"DU\",\r\n    S = \"S\",\r\n    H = \"H\",\r\n    G = \"G\",\r\n    TC = \"TC\",\r\n    AB = \"AB\",\r\n    I = \"I\",\r\n    AQ = \"AQ\",\r\n    X = \"X\",\r\n    TP = \"TP\",\r\n    P = \"P\",\r\n    OTH = \"OTH\",\r\n    DS = \"DS\",\r\n    AU = \"AU\",\r\n    IG = \"IG\",\r\n    T = \"T\",\r\n    GTH = \"GTH\"\r\n}\r\n\r\nexport enum SpellcastingTag {\r\n    CP = \"CP\",\r\n    CB = \"CB\",\r\n    I = \"I\",\r\n    CL = \"CL\",\r\n    CR = \"CR\",\r\n    CD = \"CD\",\r\n    P = \"P\",\r\n    CC = \"CC\",\r\n    CW = \"CW\",\r\n    CS = \"CS\",\r\n    S = \"S\",\r\n    F = \"F\"\r\n}\r\n\r\nexport enum MiscTag {\r\n    MW = \"MW\",\r\n    RCH = \"RCH\",\r\n    AOE = \"AOE\",\r\n    RW = \"RW\",\r\n    RNG = \"RNG\",\r\n    THW = \"THW\"\r\n}\r\n\r\nexport class MonsterTags {\r\n    constructor(\r\n        readonly actions: ActionTag[],\r\n        readonly damageTags: DamageTag[],\r\n        readonly languageTags: LanguageTag[],\r\n        readonly miscTags: MiscTag[],\r\n        readonly senseTags: SenseTag[],\r\n        readonly spellcastingTags: SpellcastingTag[],\r\n        readonly traitTag: TraitTag[]\r\n    ) {}\r\n}\r\n","export enum Size {\r\n    TINY = \"T\",\r\n    SMALL = \"S\",\r\n    MEDIUM = \"M\",\r\n    LARGE = \"L\",\r\n    HUGE = \"H\",\r\n    GIGANTIC = \"G\"\r\n}\r\n","import * as t from \"io-ts\";\r\nimport { BaseAlignment } from \"../models/Alignment\";\r\nimport { Condition } from \"../models/Condition\";\r\nimport { DamageType } from \"../models/DamageType\";\r\nimport { DragonCastingColor } from \"../models/DragonCastingColor\";\r\nimport { createEnum } from \"../models/Enums\";\r\nimport { Environment } from \"../models/Environment\";\r\nimport { MonsterGroup } from \"../models/MonsterGroup\";\r\nimport {\r\n    ActionTag,\r\n    DamageTag,\r\n    LanguageTag,\r\n    MiscTag,\r\n    SenseTag,\r\n    SpellcastingTag,\r\n    TraitTag\r\n} from \"../models/MonsterTags\";\r\nimport { Size } from \"../models/Size\";\r\nimport { EntrySchema } from \"./EntryData\";\r\nimport { PageSourceSchema, SourceSchema } from \"./Sources\";\r\nimport { SpellcastingSchema } from \"./Spellcasting\";\r\nimport { optional, optionalArray } from \"./Types\";\r\n\r\nconst ComplexACSchema = t.strict({\r\n    ac: t.number,\r\n    from: optionalArray(t.string),\r\n    condition: optional(t.string),\r\n    braces: optional(t.boolean)\r\n});\r\n\r\nconst ACSchema = t.union([t.number, ComplexACSchema]);\r\n\r\nconst SizeSchema = createEnum<Size>(Size, \"Size\");\r\n\r\nconst TypeTag = t.union([\r\n    t.string,\r\n    t.strict({\r\n        tag: t.string,\r\n        prefix: t.string\r\n    })\r\n]);\r\n\r\nconst TypeSchema = t.union([\r\n    t.string,\r\n    t.strict({\r\n        type: t.string,\r\n        tags: optionalArray(TypeTag),\r\n        swarmSize: optional(t.string)\r\n    })\r\n]);\r\n\r\nconst AlignmentsSchema = createEnum<BaseAlignment>(\r\n    BaseAlignment,\r\n    \"BaseAlignment\"\r\n);\r\n\r\nconst ComplexAlignment = t.strict({\r\n    alignment: t.array(AlignmentsSchema),\r\n    chance: optional(t.number)\r\n});\r\n\r\nconst SpecialAlignment = t.strict({\r\n    special: t.string\r\n});\r\n\r\nconst AlignmentSchema = optional(\r\n    t.array(t.union([AlignmentsSchema, ComplexAlignment, SpecialAlignment]))\r\n);\r\n\r\nconst SimpleHealth = t.strict({\r\n    average: t.number,\r\n    formula: t.string\r\n});\r\n\r\nconst SpecialHealth = t.strict({\r\n    special: t.string\r\n});\r\n\r\nconst HealthSchema = t.union([SimpleHealth, SpecialHealth]);\r\n\r\nconst SkillsSchema = t.union([\r\n    t.void,\r\n    t.strict({\r\n        acrobatics: optional(t.string),\r\n        perception: optional(t.string),\r\n        stealth: optional(t.string),\r\n        history: optional(t.string),\r\n        insight: optional(t.string),\r\n        intimidation: optional(t.string),\r\n        persuasion: optional(t.string),\r\n        performance: optional(t.string),\r\n        arcana: optional(t.string),\r\n        investigation: optional(t.string),\r\n        religion: optional(t.string),\r\n        athletics: optional(t.string),\r\n        nature: optional(t.string),\r\n        survival: optional(t.string),\r\n        deception: optional(t.string),\r\n        medicine: optional(t.string),\r\n        \"animal handling\": optional(t.string),\r\n        \"sleight of hand\": optional(t.string),\r\n        other: optional(\r\n            t.array(\r\n                t.strict({\r\n                    oneOf: t.strict({\r\n                        arcana: t.string,\r\n                        history: t.string,\r\n                        nature: t.string,\r\n                        religion: t.string\r\n                    })\r\n                })\r\n            )\r\n        )\r\n    })\r\n]);\r\n\r\nconst SpeedSchema = t.union([\r\n    t.number,\r\n    t.strict({\r\n        number: t.number,\r\n        condition: t.string\r\n    })\r\n]);\r\n\r\nconst SpeedsSchema = t.strict({\r\n    walk: optional(SpeedSchema),\r\n    climb: optional(SpeedSchema),\r\n    fly: optional(SpeedSchema),\r\n    swim: optional(SpeedSchema),\r\n    burrow: optional(SpeedSchema),\r\n    canHover: optional(t.boolean)\r\n});\r\n\r\nconst SavesSchema = t.strict({\r\n    str: optional(t.string),\r\n    dex: optional(t.string),\r\n    con: optional(t.string),\r\n    wis: optional(t.string),\r\n    int: optional(t.string),\r\n    cha: optional(t.string)\r\n});\r\n\r\nconst DamageTypeSchema = createEnum<DamageType>(DamageType, \"DamageType\");\r\nconst ConditionSchema = createEnum<Condition>(Condition, \"Condition\");\r\n\r\nconst DamageImmunitySchema = t.union([\r\n    DamageTypeSchema,\r\n    t.strict({\r\n        immune: t.array(DamageTypeSchema),\r\n        preNote: optional(t.string),\r\n        note: optional(t.string)\r\n    })\r\n]);\r\n\r\nconst ConditionImmunitySchema = optional(\r\n    t.array(\r\n        t.union([\r\n            ConditionSchema,\r\n            t.strict({\r\n                conditionImmune: t.array(ConditionSchema),\r\n                preNote: optional(t.string)\r\n            })\r\n        ])\r\n    )\r\n);\r\n\r\nexport const ChallengeRatingSchema = t.union([\r\n    t.undefined,\r\n    t.string,\r\n    t.strict({\r\n        cr: t.string,\r\n        lair: optional(t.string),\r\n        coven: optional(t.string)\r\n    })\r\n]);\r\n\r\nconst TraitSchema = t.strict({\r\n    type: optional(t.keyof({ entries: null, inset: null })),\r\n    name: t.string,\r\n    entries: t.array(EntrySchema)\r\n});\r\n\r\nconst TagSchema = t.strict({\r\n    actionTags: optionalArray(createEnum<ActionTag>(ActionTag, \"ActionTag\")),\r\n    damageTags: optionalArray(createEnum<DamageTag>(DamageTag, \"DamageTag\")),\r\n    senseTags: optionalArray(createEnum<SenseTag>(SenseTag, \"SenseTag\")),\r\n    traitTags: optionalArray(createEnum<TraitTag>(TraitTag, \"TraitTag\")),\r\n    languageTags: optionalArray(\r\n        createEnum<LanguageTag>(LanguageTag, \"LanguageTag\")\r\n    ),\r\n    spellcastingTags: optionalArray(\r\n        createEnum<SpellcastingTag>(SpellcastingTag, \"SpellcastingTag\")\r\n    ),\r\n    miscTags: optionalArray(createEnum<MiscTag>(MiscTag, \"MiscTag\"))\r\n});\r\n\r\nconst ResistSchema = t.union([\r\n    DamageTypeSchema,\r\n    t.strict({\r\n        resist: t.array(\r\n            t.union([\r\n                DamageTypeSchema,\r\n                t.strict({\r\n                    resist: t.array(DamageTypeSchema),\r\n                    note: t.string\r\n                })\r\n            ])\r\n        ),\r\n        preNote: optional(t.string),\r\n        note: optional(t.string)\r\n    }),\r\n    t.strict({ special: t.string })\r\n]);\r\n\r\nconst LegendaryActionSchema = t.strict({\r\n    name: optional(t.string),\r\n    entries: t.array(EntrySchema)\r\n});\r\n\r\nconst ActionLikeSchema = t.strict({\r\n    name: t.string,\r\n    entries: t.array(EntrySchema)\r\n});\r\n\r\nconst LegendaryGroupSchema = t.strict({\r\n    name: t.string,\r\n    source: t.string\r\n});\r\n\r\nconst VulnerableSchema = t.union([\r\n    DamageTypeSchema,\r\n    t.strict({ vulnerable: t.array(DamageTypeSchema), note: t.string })\r\n]);\r\n\r\nconst MonsterGroupSchema = createEnum<MonsterGroup>(\r\n    MonsterGroup,\r\n    \"MonsterGroup\"\r\n);\r\n\r\nexport const MonsterSchema = t.intersection([\r\n    t.strict({\r\n        name: t.string,\r\n        shortName: optional(t.string),\r\n        source: t.string,\r\n        ac: t.array(ACSchema),\r\n        size: SizeSchema,\r\n        type: TypeSchema,\r\n        alignment: AlignmentSchema,\r\n        hp: HealthSchema,\r\n        str: t.number,\r\n        dex: t.number,\r\n        con: t.number,\r\n        wis: t.number,\r\n        int: t.number,\r\n        cha: t.number,\r\n        skill: SkillsSchema,\r\n        speed: SpeedsSchema,\r\n        save: optional(SavesSchema),\r\n        immune: optionalArray(DamageImmunitySchema),\r\n        resist: optionalArray(ResistSchema),\r\n        conditionImmune: ConditionImmunitySchema,\r\n        senses: optionalArray(t.string),\r\n        languages: optionalArray(t.string),\r\n        cr: ChallengeRatingSchema,\r\n        trait: optionalArray(TraitSchema),\r\n        spellcasting: optionalArray(SpellcastingSchema),\r\n        action: optionalArray(ActionLikeSchema),\r\n        reaction: optionalArray(ActionLikeSchema),\r\n        legendary: optionalArray(LegendaryActionSchema),\r\n        legendaryGroup: optional(LegendaryGroupSchema),\r\n        page: optional(t.number),\r\n        passive: optional(t.number),\r\n        isNpc: optional(t.boolean),\r\n        vulnerable: optionalArray(VulnerableSchema),\r\n        familiar: optional(t.boolean),\r\n        isNamedCreature: optional(t.boolean),\r\n        group: optional(MonsterGroupSchema),\r\n        level: optional(t.number),\r\n        altArt: optionalArray(PageSourceSchema),\r\n        otherSources: optionalArray(SourceSchema),\r\n        variant: optionalArray(EntrySchema),\r\n        legendaryHeader: optionalArray(t.string),\r\n        legendaryActions: optional(t.number),\r\n        soundClip: optional(t.string),\r\n        environment: optionalArray(\r\n            createEnum<Environment>(Environment, \"Environment\")\r\n        ),\r\n        dragonCastingColor: optional(\r\n            createEnum<DragonCastingColor>(\r\n                DragonCastingColor,\r\n                \"DragonCastingColor\"\r\n            )\r\n        ),\r\n        alias: optionalArray(t.string),\r\n        actionNote: optional(t.string)\r\n    }),\r\n    TagSchema\r\n]);\r\n\r\nexport type MonsterData = t.TypeOf<typeof MonsterSchema>;\r\n\r\nexport interface MonsterReference {\r\n    name: string;\r\n    source?: string;\r\n}\r\n\r\nexport interface ExtendedMonster extends Partial<MonsterData> {\r\n    _copy: MonsterReference;\r\n}\r\n\r\nexport function isExtendedMonster(\r\n    monster: MonsterData | ExtendedMonster\r\n): monster is ExtendedMonster {\r\n    return \"_copy\" in monster;\r\n}\r\n\r\nexport function isMonster(\r\n    monster: MonsterData | ExtendedMonster\r\n): monster is MonsterData {\r\n    return !isExtendedMonster(monster);\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class Action {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","export class ArmorClass {\r\n    constructor(\r\n        readonly ac: number,\r\n        readonly from: string[],\r\n        readonly condition: string\r\n    ) {}\r\n\r\n    format() {\r\n        const from = this.from.length > 0 ? `(${this.from.join(\", \")})` : \"\";\r\n        return `${this.ac} ${from} ${this.condition}`;\r\n    }\r\n}\r\n","import { Size } from \"./Size\";\r\n\r\nexport function formatSize(size: Size): string {\r\n    switch (size) {\r\n        case Size.TINY:\r\n            return \"tiny\";\r\n        case Size.SMALL:\r\n            return \"small\";\r\n        case Size.MEDIUM:\r\n            return \"medium\";\r\n        case Size.LARGE:\r\n            return \"large\";\r\n        case Size.HUGE:\r\n            return \"huge\";\r\n        case Size.GIGANTIC:\r\n            return \"gigantic\";\r\n    }\r\n}\r\n\r\nexport function defaultFormat<T extends { format(): string }>(ts: T[]): string {\r\n    return ts.map(t => t.format()).join(\", \");\r\n}\r\n\r\nexport class Formatter {\r\n    static create(base: string) {\r\n        return new Formatter(base);\r\n    }\r\n    constructor(private base: string) {}\r\n\r\n    private conditions: string[] = [];\r\n\r\n    addCondition(value: string | null, format: (s: string) => string = s => s) {\r\n        if (value != null && value !== \"\") {\r\n            this.conditions.push(`${format(value)}`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    format() {\r\n        return [this.base, ...this.conditions].join(\" \");\r\n    }\r\n}\r\n","import { sentenceCase } from \"../utils/Formatting\";\r\n\r\nexport enum SkillType {\r\n    ACROBATICS = \"acrobatics\",\r\n    PERCEPTION = \"perception\",\r\n    STEALTH = \"stealth\",\r\n    HISTORY = \"history\",\r\n    INSIGHT = \"insight\",\r\n    INTIMIDATION = \"intimidation\",\r\n    PERSUASION = \"persuasion\",\r\n    PERFORMANCE = \"performance\",\r\n    ARCANA = \"arcana\",\r\n    INVESTIGATION = \"investigation\",\r\n    RELIGION = \"religion\",\r\n    ATHLETICS = \"athletics\",\r\n    NATURE = \"nature\",\r\n    SURVIVAL = \"survival\",\r\n    DECEPTION = \"deception\",\r\n    MEDICINE = \"medicine\",\r\n    ANIMAL_HANDLING = \"animal handling\",\r\n    SLEIGHT_OF_HAND = \"sleight of hand\"\r\n}\r\n\r\nexport const SkillTypes = Object.values(SkillType);\r\n\r\nexport function skillLabel(skill: SkillType) {\r\n    return sentenceCase(skill);\r\n}\r\n","import { Formatter } from \"./Formatters\";\r\n\r\nexport class ChallengeRating {\r\n    constructor(\r\n        readonly cr: string,\r\n        readonly lair: string,\r\n        readonly coven: string\r\n    ) {}\r\n\r\n    format() {\r\n        return Formatter.create(this.cr)\r\n            .addCondition(this.lair, s => `Lair: ${s}`)\r\n            .addCondition(this.coven, s => `Coven: ${s}`)\r\n            .format();\r\n    }\r\n}\r\n","export class TextBuilder {\r\n    phrases: string[] = [];\r\n\r\n    add(text: string | null | undefined) {\r\n        if (text != null && text !== \"\") {\r\n            this.phrases.push(text);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    list(items: string[]) {\r\n        if (items.length > 0) {\r\n            this.phrases.push(items.join(\", \"));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    note(callable: (t: TextBuilder) => TextBuilder) {\r\n        const builder = callable(new TextBuilder());\r\n        if (builder.nonEmpty()) {\r\n            this.phrases.push(`(${builder.build()})`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    nonEmpty() {\r\n        return this.phrases.length > 0;\r\n    }\r\n\r\n    build() {\r\n        return this.phrases.join(\" \");\r\n    }\r\n}\r\n","import { TextBuilder } from \"../utils/TextBuilder\";\r\nimport { Condition } from \"./Condition\";\r\n\r\nexport class ConditionImmunity {\r\n    constructor(readonly conditions: Condition[], readonly preNote: string) {}\r\n\r\n    format() {\r\n        return new TextBuilder()\r\n            .add(this.preNote)\r\n            .list(this.conditions)\r\n            .build();\r\n    }\r\n}\r\n","import { MonsterReferenceWithPage } from \"./Monster\";\r\nimport { MonsterSource } from \"./MonsterSource\";\r\n\r\nexport class TextContent {\r\n    constructor(readonly description: string) {}\r\n}\r\n\r\nexport class LabeledContent {\r\n    constructor(readonly label: string, readonly text: string) {}\r\n}\r\n\r\nexport class ListContent {\r\n    constructor(readonly entries: Content[]) {}\r\n}\r\n\r\nexport class InsetContent {\r\n    constructor(\r\n        readonly label: string,\r\n        readonly entries: Content[],\r\n        readonly token?: MonsterReferenceWithPage\r\n    ) {}\r\n}\r\n\r\nexport class VariantContent {\r\n    constructor(\r\n        readonly label: string,\r\n        readonly entries: Content[],\r\n        readonly source?: MonsterSource\r\n    ) {}\r\n}\r\n\r\nexport class SubVariantContent {\r\n    constructor(readonly label: string, readonly entries: Content[]) {}\r\n}\r\n\r\nexport class InlineContent {\r\n    constructor(readonly entries: Content[]) {}\r\n}\r\n\r\nexport class Entries {\r\n    constructor(readonly label: string, readonly entries: Content[]) {}\r\n}\r\n\r\nexport class LinkContent {\r\n    constructor(\r\n        readonly text: string,\r\n        readonly href: { type: string; path: string; hash: string }\r\n    ) {}\r\n}\r\n\r\nexport class TableContent {\r\n    constructor(\r\n        readonly caption: string,\r\n        readonly columnLabels: string[],\r\n        readonly rows: string[][]\r\n    ) {}\r\n}\r\n\r\nexport type Content =\r\n    | TextContent\r\n    | LabeledContent\r\n    | ListContent\r\n    | InsetContent\r\n    | VariantContent\r\n    | SubVariantContent\r\n    | InlineContent\r\n    | LinkContent\r\n    | TableContent;\r\n","import { TextBuilder } from \"../utils/TextBuilder\";\r\nimport { DamageType } from \"./DamageType\";\r\n\r\nexport class DamageModifier {\r\n    constructor(\r\n        readonly damageTypes: DamageType[],\r\n        readonly note: string,\r\n        readonly preNote: string,\r\n        readonly conditional: {\r\n            condition: string;\r\n            damageTypes: DamageType[];\r\n        }[] = []\r\n    ) {}\r\n\r\n    format() {\r\n        return new TextBuilder()\r\n            .add(this.preNote)\r\n            .list(this.damageTypes)\r\n            .note(b => b.add(this.note))\r\n            .note(b =>\r\n                b.list(\r\n                    this.conditional.map(c =>\r\n                        new TextBuilder()\r\n                            .list(c.damageTypes)\r\n                            .note(b => b.add(c.condition))\r\n                            .build()\r\n                    )\r\n                )\r\n            )\r\n            .build();\r\n    }\r\n}\r\n","export class DefaultHealth {\r\n    constructor(readonly average: number, readonly formula: string) {}\r\n    format() {\r\n        return `${this.average} (${this.formula})`;\r\n    }\r\n}\r\n\r\nexport class SpecialHealth {\r\n    constructor(readonly special: string) {}\r\n    format() {\r\n        return this.special;\r\n    }\r\n}\r\n\r\nexport type Health = DefaultHealth | SpecialHealth;\r\n","import { LegendaryAction } from \"./LegendaryAction\";\r\n\r\nexport class Legendary {\r\n    constructor(\r\n        readonly header: string[],\r\n        readonly actions: LegendaryAction[],\r\n        readonly count: number\r\n    ) {}\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class LegendaryAction {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","export class LegendaryGroup {\r\n    constructor(readonly name: string, readonly source: string) {}\r\n}\r\n","import { MonsterReference } from \"../dataModels/MonsterData\";\r\nimport { Action } from \"./Action\";\r\nimport { MonsterAlignment } from \"./Alignment\";\r\nimport { ArmorClass } from \"./ArmorClass\";\r\nimport { ChallengeRating } from \"./ChallengeRating\";\r\nimport { ConditionImmunity } from \"./ConditionImmunity\";\r\nimport { DamageModifier } from \"./DamageModifier\";\r\nimport { DragonCastingColor } from \"./DragonCastingColor\";\r\nimport { Environment } from \"./Environment\";\r\nimport { Health } from \"./Health\";\r\nimport { Legendary } from \"./Legendary\";\r\nimport { LegendaryGroup } from \"./LegendaryGroup\";\r\nimport { MonsterFlags } from \"./MonsterFlags\";\r\nimport { MonsterGroup } from \"./MonsterGroup\";\r\nimport { MonsterNames } from \"./MonsterNames\";\r\nimport { MonsterSource } from \"./MonsterSource\";\r\nimport { MonsterTags } from \"./MonsterTags\";\r\nimport { MonsterType } from \"./MonsterType\";\r\nimport { Reaction } from \"./Reaction\";\r\nimport { SavingThrow } from \"./SavingThrow\";\r\nimport { Size } from \"./Size\";\r\nimport { Skill } from \"./Skill\";\r\nimport { Speed } from \"./Speed\";\r\nimport { Spellcasting } from \"./Spellcasting\";\r\nimport { Statistics } from \"./Statistics\";\r\nimport { Trait } from \"./Trait\";\r\n\r\nexport interface MonsterReferenceWithPage extends MonsterReference {\r\n    page?: number;\r\n}\r\n\r\nexport class Monster {\r\n    constructor(\r\n        readonly name: string,\r\n        readonly names: MonsterNames,\r\n        readonly source: string,\r\n        readonly acs: ArmorClass[],\r\n        readonly size: Size,\r\n        readonly type: MonsterType,\r\n        readonly alignment: MonsterAlignment,\r\n        readonly hp: Health,\r\n        readonly stats: Statistics,\r\n        readonly skills: Skill[],\r\n        readonly speeds: Speed[],\r\n        readonly savingThrows: SavingThrow[],\r\n        readonly damageImmunities: DamageModifier[],\r\n        readonly damageResistance: DamageModifier[],\r\n        readonly conditionImmunities: ConditionImmunity[],\r\n        readonly senses: string[],\r\n        readonly languages: string[],\r\n        readonly challengeRating: ChallengeRating | null,\r\n        readonly traits: Trait[],\r\n        readonly spellcasting: Spellcasting[],\r\n        readonly actions: Action[],\r\n        readonly page: number | null,\r\n        readonly tags: MonsterTags,\r\n        readonly passivePerception: number | null,\r\n        readonly reactions: Reaction[],\r\n        readonly legendary: Legendary | null,\r\n        readonly legendaryGroup: LegendaryGroup | null,\r\n        readonly vulnerabilities: DamageModifier[],\r\n        readonly flags: MonsterFlags,\r\n        readonly group: MonsterGroup | null,\r\n        readonly level: number | null,\r\n        readonly altArt: MonsterReferenceWithPage[],\r\n        readonly otherSources: MonsterSource[],\r\n        readonly soundClip: string,\r\n        readonly environment: Environment[],\r\n        readonly dragonCastingColor: DragonCastingColor | null,\r\n        readonly actionNote: string | null\r\n    ) {}\r\n\r\n    is(reference: MonsterReference) {\r\n        return (\r\n            this.name.toLowerCase() === reference.name.toLowerCase() &&\r\n            (reference.source == null || reference.source === this.source)\r\n        );\r\n    }\r\n\r\n    formatChallengeRating() {\r\n        if (this.challengeRating == null) {\r\n            return \"\";\r\n        }\r\n        return this.challengeRating.cr;\r\n    }\r\n}\r\n","export class MonsterFlags {\r\n    constructor(\r\n        readonly npc: boolean,\r\n        readonly familiar: boolean,\r\n        readonly named: boolean\r\n    ) {}\r\n}\r\n","export class MonsterNames {\r\n    constructor(readonly shortName: string, readonly aliases: string[]) {}\r\n}\r\n","export class MonsterSource {\r\n    constructor(readonly source: string, readonly page?: number) {}\r\n}\r\n","export class Tag {\r\n    constructor(readonly tag: string, readonly prefix: string) {}\r\n}\r\n\r\nexport class MonsterType {\r\n    constructor(readonly type: string, tags: Tag[], swarmSize: string) {}\r\n\r\n    format() {\r\n        return this.type;\r\n    }\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class Reaction {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","import { AbilityScore, abilityScoreLabel } from \"./Statistics\";\r\n\r\nexport class SavingThrow {\r\n    constructor(readonly stat: AbilityScore, readonly value: string) {}\r\n\r\n    format() {\r\n        return `${abilityScoreLabel(this.stat)} ${this.value}`;\r\n    }\r\n}\r\n","export function makeLine(...parts: string[]): string {\r\n    return sentenceCase(parts.join(\" \"));\r\n}\r\n\r\nexport function sentenceCase(line: string): string {\r\n    return line.charAt(0).toLocaleUpperCase() + line.slice(1);\r\n}\r\n","import { skillLabel, SkillType } from \"./SkillType\";\r\n\r\nexport class Skill {\r\n    constructor(readonly type: SkillType, readonly value: string) {}\r\n\r\n    format() {\r\n        return `${skillLabel(this.type)} ${this.value}`;\r\n    }\r\n}\r\n","export enum SpeedType {\r\n    WALK = \"walk\",\r\n    CLIMB = \"climb\",\r\n    SWIM = \"swim\",\r\n    FLY = \"fly\",\r\n    BURROW = \"burrow\"\r\n}\r\n\r\nexport const SpeedTypes = Object.values(SpeedType);\r\n\r\nexport class Speed {\r\n    constructor(\r\n        readonly speedType: SpeedType,\r\n        readonly speed: number,\r\n        readonly condition: string\r\n    ) {}\r\n\r\n    format() {\r\n        if (this.speedType === SpeedType.WALK) {\r\n            return `${this.speed} ft. ${this.condition}`;\r\n        }\r\n        return `${this.speedType} ${this.speed} ft. ${this.condition}`;\r\n    }\r\n}\r\n","export function ordinal(count: number): string {\r\n    switch (count) {\r\n        case 0:\r\n            return \"0th\";\r\n        case 1:\r\n            return \"1st\";\r\n        case 2:\r\n            return \"2nd\";\r\n        case 3:\r\n            return \"3rd\";\r\n        default:\r\n            return `${count}th`;\r\n    }\r\n}\r\n","import { ordinal } from \"../utils/Ordinal\";\r\nimport { pluralize } from \"../utils/Plural\";\r\nimport { AbilityScore } from \"./Statistics\";\r\n\r\nexport class DailyLimit {\r\n    constructor(readonly count: number) {}\r\n\r\n    format() {\r\n        return `${this.count}/day`;\r\n    }\r\n}\r\nexport class NoLimit {\r\n    format() {\r\n        return `At will`;\r\n    }\r\n}\r\n\r\nexport class DailyEachLimit {\r\n    constructor(readonly count: number) {}\r\n\r\n    format() {\r\n        return `${this.count}/day each`;\r\n    }\r\n}\r\n\r\nexport class SpellSlotLimit {\r\n    constructor(\r\n        readonly level: number,\r\n        readonly count: number | undefined,\r\n        readonly lowerLevelRange?: number\r\n    ) {}\r\n\r\n    format() {\r\n        const limit =\r\n            this.count != null\r\n                ? `${this.count} ${pluralize(this.count, \"slot\", \"slots\")}`\r\n                : \"at will\";\r\n        if (this.level === 0) {\r\n            return `Cantrips (${limit})`;\r\n        }\r\n        if (this.lowerLevelRange != null) {\r\n            return `${ordinal(this.lowerLevelRange)}-${ordinal(\r\n                this.level\r\n            )} level (${limit})`;\r\n        }\r\n        return `${ordinal(this.level)} level (${limit})`;\r\n    }\r\n}\r\n\r\nexport type CastingLimit =\r\n    | DailyLimit\r\n    | NoLimit\r\n    | DailyEachLimit\r\n    | SpellSlotLimit;\r\n\r\nexport class Spell {\r\n    static fromList(spells: string[]) {\r\n        return spells.map(s => new Spell(s));\r\n    }\r\n    constructor(readonly spell: string) {}\r\n\r\n    format() {\r\n        return this.spell;\r\n    }\r\n}\r\n\r\nexport class SpellGroup {\r\n    constructor(\r\n        readonly spells: Spell[],\r\n        readonly limit: CastingLimit,\r\n        readonly hidden: boolean\r\n    ) {}\r\n}\r\n\r\nexport class Spellcasting {\r\n    constructor(\r\n        readonly name: string,\r\n        readonly spellcastingAbility: AbilityScore | null,\r\n        readonly header: string[],\r\n        readonly footer: string[],\r\n        readonly spellGroups: SpellGroup[]\r\n    ) {}\r\n}\r\n","export function pluralize(count: number, singular: string, plural: string) {\r\n    if (count === 1) {\r\n        return singular;\r\n    } else {\r\n        return plural;\r\n    }\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class Trait {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","import { Entry } from \"../dataModels/EntryData\";\r\nimport { MonsterData } from \"../dataModels/MonsterData\";\r\nimport { SpellSlotData } from \"../dataModels/Spellcasting\";\r\nimport { Action } from \"../models/Action\";\r\nimport { Alignment, MonsterAlignment } from \"../models/Alignment\";\r\nimport { ArmorClass } from \"../models/ArmorClass\";\r\nimport { ChallengeRating } from \"../models/ChallengeRating\";\r\nimport { ConditionImmunity } from \"../models/ConditionImmunity\";\r\nimport {\r\n    InlineContent,\r\n    LabeledContent,\r\n    LinkContent,\r\n    ListContent,\r\n    TextContent\r\n} from \"../models/Content\";\r\nimport { DamageModifier } from \"../models/DamageModifier\";\r\nimport { DamageType } from \"../models/DamageType\";\r\nimport { DefaultHealth, SpecialHealth } from \"../models/Health\";\r\nimport { Legendary } from \"../models/Legendary\";\r\nimport { LegendaryAction } from \"../models/LegendaryAction\";\r\nimport { LegendaryGroup } from \"../models/LegendaryGroup\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { MonsterFlags } from \"../models/MonsterFlags\";\r\nimport { MonsterNames } from \"../models/MonsterNames\";\r\nimport { MonsterSource } from \"../models/MonsterSource\";\r\nimport { MonsterTags } from \"../models/MonsterTags\";\r\nimport { MonsterType, Tag } from \"../models/MonsterType\";\r\nimport { Reaction } from \"../models/Reaction\";\r\nimport { SavingThrow } from \"../models/SavingThrow\";\r\nimport { Skill } from \"../models/Skill\";\r\nimport { SkillTypes } from \"../models/SkillType\";\r\nimport { Speed, SpeedTypes } from \"../models/Speed\";\r\nimport {\r\n    CastingLimit,\r\n    DailyEachLimit,\r\n    DailyLimit,\r\n    NoLimit,\r\n    Spell,\r\n    Spellcasting,\r\n    SpellGroup,\r\n    SpellSlotLimit\r\n} from \"../models/Spellcasting\";\r\nimport { AbilityScores, Statistics } from \"../models/Statistics\";\r\nimport { Trait } from \"../models/Trait\";\r\n\r\nfunction toAC(ac: MonsterData[\"ac\"]): ArmorClass[] {\r\n    return ac.map(a => {\r\n        if (typeof a == \"number\") {\r\n            return new ArmorClass(a, [], \"\");\r\n        } else {\r\n            return new ArmorClass(a.ac, a.from || [], a.condition || \"\");\r\n        }\r\n    });\r\n}\r\n\r\nfunction toMonsterType(type: MonsterData[\"type\"]) {\r\n    if (typeof type == \"string\") {\r\n        return new MonsterType(type, [], \"\");\r\n    }\r\n    return new MonsterType(\r\n        type.type,\r\n        (type.tags || []).map(tag => {\r\n            if (typeof tag === \"string\") {\r\n                return new Tag(tag, \"\");\r\n            }\r\n            return new Tag(tag.tag, tag.prefix);\r\n        }),\r\n        type.swarmSize || \"\"\r\n    );\r\n}\r\n\r\nfunction toMonsterAlignment(data: MonsterData[\"alignment\"]) {\r\n    if (data == null) {\r\n        return new MonsterAlignment([], []);\r\n    }\r\n    const special: string[] = [];\r\n    const alignments: Alignment[] = [];\r\n    data.forEach(a => {\r\n        if (typeof a === \"string\") {\r\n            alignments.push(new Alignment(a, 1));\r\n        } else if (\"chance\" in a) {\r\n            a.alignment.forEach(sa => {\r\n                alignments.push(new Alignment(sa, a.chance || 1));\r\n            });\r\n        } else {\r\n            special.push(a.special);\r\n        }\r\n    });\r\n    return new MonsterAlignment(alignments, special);\r\n}\r\n\r\nfunction toMonsterHealth(data: MonsterData[\"hp\"]) {\r\n    if (\"special\" in data) {\r\n        return new SpecialHealth(data.special);\r\n    } else {\r\n        return new DefaultHealth(data.average, data.formula);\r\n    }\r\n}\r\n\r\nfunction toStatistics(data: MonsterData) {\r\n    return new Statistics(\r\n        data.str,\r\n        data.dex,\r\n        data.con,\r\n        data.wis,\r\n        data.int,\r\n        data.cha\r\n    );\r\n}\r\n\r\nfunction toSkills(data: MonsterData[\"skill\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return SkillTypes.map(s => {\r\n        const value = data[s];\r\n        if (value != null) {\r\n            return new Skill(s, value);\r\n        }\r\n        return null;\r\n    }).filter((s): s is Skill => s != null);\r\n}\r\n\r\nfunction toSpeeds(data: MonsterData[\"speed\"]) {\r\n    return SpeedTypes.map(s => {\r\n        const speed = data[s];\r\n        if (speed != null) {\r\n            if (typeof speed === \"number\") {\r\n                return new Speed(s, speed, \"\");\r\n            } else {\r\n                return new Speed(s, speed.number, speed.condition);\r\n            }\r\n        }\r\n        return null;\r\n    }).filter((s): s is Speed => s != null);\r\n}\r\n\r\nfunction toSavingThrows(data: MonsterData[\"save\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return AbilityScores.map(s => {\r\n        const value = data[s];\r\n        if (value != null) {\r\n            return new SavingThrow(s, value);\r\n        } else {\r\n            return null;\r\n        }\r\n    }).filter((s): s is SavingThrow => s != null);\r\n}\r\n\r\nfunction toDamageImmunities(data: MonsterData[\"immune\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(d => {\r\n        if (typeof d === \"string\") {\r\n            return new DamageModifier([d], \"\", \"\");\r\n        } else {\r\n            return new DamageModifier(d.immune, d.note || \"\", d.preNote || \"\");\r\n        }\r\n    });\r\n}\r\n\r\nfunction toConditionImmunities(data: MonsterData[\"conditionImmune\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(c => {\r\n        if (typeof c === \"string\") {\r\n            return new ConditionImmunity([c], \"\");\r\n        } else {\r\n            return new ConditionImmunity(c.conditionImmune, c.preNote || \"\");\r\n        }\r\n    });\r\n}\r\n\r\nfunction toChallengeRating(data: MonsterData[\"cr\"]) {\r\n    if (data == null) {\r\n        return null;\r\n    }\r\n    if (typeof data === \"string\") {\r\n        return new ChallengeRating(data, \"\", \"\");\r\n    }\r\n    return new ChallengeRating(data.cr, data.lair || \"\", data.coven || \"\");\r\n}\r\n\r\nfunction toSubContent(subEntries: any[]) {\r\n    return subEntries.map(se => {\r\n        if (typeof se === \"string\") {\r\n            return new TextContent(se);\r\n        } else if (se.type === \"link\") {\r\n            return new LinkContent(se.text, se.href);\r\n        } else {\r\n            return new LabeledContent(se.name, se.entry);\r\n        }\r\n    });\r\n}\r\n\r\nfunction toTraits(data: MonsterData[\"trait\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(trait => new Trait(trait.name, toContent(trait.entries)));\r\n}\r\n\r\nfunction toSpellcasting(data: MonsterData[\"spellcasting\"]): Spellcasting[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(d => {\r\n        const groups: SpellGroup[] = [];\r\n        if (d.will != null) {\r\n            groups.push(\r\n                new SpellGroup(\r\n                    Spell.fromList(d.will),\r\n                    new NoLimit(),\r\n                    d.hidden != null && d.hidden.includes(\"will\")\r\n                )\r\n            );\r\n        }\r\n        function addDaily(e: string[] | undefined | null, limit: CastingLimit) {\r\n            if (e == null) {\r\n                return;\r\n            }\r\n            groups.push(\r\n                new SpellGroup(\r\n                    Spell.fromList(e),\r\n                    limit,\r\n                    d.hidden != null && d.hidden.includes(\"daily\")\r\n                )\r\n            );\r\n        }\r\n        if (d.daily != null) {\r\n            addDaily(d.daily[\"1e\"], new DailyEachLimit(1));\r\n            addDaily(d.daily[\"2e\"], new DailyEachLimit(1));\r\n            addDaily(d.daily[\"3e\"], new DailyEachLimit(1));\r\n            addDaily(d.daily[\"1\"], new DailyLimit(1));\r\n            addDaily(d.daily[\"2\"], new DailyLimit(1));\r\n            addDaily(d.daily[\"3\"], new DailyLimit(1));\r\n        }\r\n        function addSpellSlot(\r\n            data: SpellSlotData | undefined | null,\r\n            slotLevel: number\r\n        ) {\r\n            if (data == null) {\r\n                return;\r\n            }\r\n            groups.push(\r\n                new SpellGroup(\r\n                    Spell.fromList(data.spells),\r\n                    new SpellSlotLimit(\r\n                        slotLevel,\r\n                        data.slots || undefined,\r\n                        data.lower || undefined\r\n                    ),\r\n                    false\r\n                )\r\n            );\r\n        }\r\n        if (d.spells != null) {\r\n            addSpellSlot(d.spells[\"0\"], 0);\r\n            addSpellSlot(d.spells[\"1\"], 1);\r\n            addSpellSlot(d.spells[\"2\"], 2);\r\n            addSpellSlot(d.spells[\"3\"], 3);\r\n            addSpellSlot(d.spells[\"4\"], 4);\r\n            addSpellSlot(d.spells[\"5\"], 5);\r\n            addSpellSlot(d.spells[\"6\"], 6);\r\n            addSpellSlot(d.spells[\"7\"], 7);\r\n            addSpellSlot(d.spells[\"8\"], 8);\r\n            addSpellSlot(d.spells[\"9\"], 9);\r\n        }\r\n        return new Spellcasting(\r\n            d.name,\r\n            d.ability || null,\r\n            d.headerEntries,\r\n            d.footerEntries || [],\r\n            groups\r\n        );\r\n    });\r\n}\r\n\r\nfunction toContent(entries: Entry[]) {\r\n    return new InlineContent(\r\n        entries.map(e => {\r\n            if (typeof e === \"string\") {\r\n                return new TextContent(e);\r\n            } else if (e.type === \"list\") {\r\n                return new ListContent(toSubContent(e.items));\r\n            } else {\r\n                return new InlineContent(toSubContent((e as any).entries));\r\n            }\r\n        })\r\n    );\r\n}\r\n\r\nfunction toActions(data: MonsterData[\"action\"]): Action[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(\r\n        action => new Action(action.name, toContent(action.entries))\r\n    );\r\n}\r\n\r\nfunction toReactions(data: MonsterData[\"reaction\"]): Reaction[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(\r\n        reaction => new Reaction(reaction.name, toContent(reaction.entries))\r\n    );\r\n}\r\n\r\nconst DEFAULT_LEGENDARY_ACTIONS = 3;\r\n\r\nfunction toLegendary(data: MonsterData): Legendary | null {\r\n    if (data.legendaryHeader == null && data.legendary == null) {\r\n        return null;\r\n    }\r\n    return new Legendary(\r\n        data.legendaryHeader || [],\r\n        (data.legendary || []).map(\r\n            action =>\r\n                new LegendaryAction(\r\n                    action.name || \"\",\r\n                    toContent(action.entries)\r\n                )\r\n        ),\r\n        data.legendaryActions || DEFAULT_LEGENDARY_ACTIONS\r\n    );\r\n}\r\n\r\nfunction toTags(data: MonsterData): MonsterTags {\r\n    return new MonsterTags(\r\n        data.actionTags || [],\r\n        data.damageTags || [],\r\n        data.languageTags || [],\r\n        data.miscTags || [],\r\n        data.senseTags || [],\r\n        data.spellcastingTags || [],\r\n        data.traitTags || []\r\n    );\r\n}\r\n\r\nfunction toDamageResistances(data: MonsterData[\"resist\"]): DamageModifier[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(r => {\r\n        if (typeof r === \"string\") {\r\n            return new DamageModifier([r], \"\", \"\");\r\n        } else if (\"special\" in r) {\r\n            return new DamageModifier([], r.special, \"\");\r\n        } else {\r\n            const special = r.resist\r\n                .filter(\r\n                    (r): r is { resist: DamageType[]; note: string } =>\r\n                        typeof r !== \"string\"\r\n                )\r\n                .map(r => ({\r\n                    damageTypes: r.resist,\r\n                    condition: r.note\r\n                }));\r\n            return new DamageModifier(\r\n                r.resist.filter((r): r is DamageType => typeof r === \"string\"),\r\n                r.note || \"\",\r\n                r.preNote || \"\",\r\n                special\r\n            );\r\n        }\r\n    });\r\n}\r\n\r\nfunction toVulnerabilities(data: MonsterData[\"vulnerable\"]): DamageModifier[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(r => {\r\n        if (typeof r === \"string\") {\r\n            return new DamageModifier([r], \"\", \"\");\r\n        } else {\r\n            return new DamageModifier(r.vulnerable, r.note, \"\");\r\n        }\r\n    });\r\n}\r\n\r\nexport function toMonster(data: MonsterData): Monster {\r\n    return new Monster(\r\n        data.name,\r\n        new MonsterNames(data.shortName || \"\", data.alias || []),\r\n        data.source,\r\n        toAC(data.ac),\r\n        data.size,\r\n        toMonsterType(data.type),\r\n        toMonsterAlignment(data.alignment),\r\n        toMonsterHealth(data.hp),\r\n        toStatistics(data),\r\n        toSkills(data.skill),\r\n        toSpeeds(data.speed),\r\n        toSavingThrows(data.save),\r\n        toDamageImmunities(data.immune),\r\n        toDamageResistances(data.resist),\r\n        toConditionImmunities(data.conditionImmune),\r\n        data.senses || [],\r\n        data.languages || [],\r\n        toChallengeRating(data.cr),\r\n        toTraits(data.trait),\r\n        toSpellcasting(data.spellcasting),\r\n        toActions(data.action),\r\n        data.page || null,\r\n        toTags(data),\r\n        data.passive || null,\r\n        toReactions(data.reaction),\r\n        toLegendary(data),\r\n        data.legendaryGroup != null\r\n            ? new LegendaryGroup(\r\n                  data.legendaryGroup.name,\r\n                  data.legendaryGroup.source\r\n              )\r\n            : null,\r\n        toVulnerabilities(data.vulnerable),\r\n        new MonsterFlags(\r\n            data.isNpc || false,\r\n            data.familiar || false,\r\n            data.isNamedCreature || false\r\n        ),\r\n        data.group || null,\r\n        data.level == null ? null : data.level,\r\n        (data.altArt || []).map(a => ({\r\n            name: a.name,\r\n            source: a.source,\r\n            page: a.page || undefined\r\n        })),\r\n        (data.otherSources || []).map(\r\n            s => new MonsterSource(s.source, s.page || undefined)\r\n        ),\r\n        data.soundClip || \"\",\r\n        data.environment || [],\r\n        data.dragonCastingColor || null,\r\n        data.actionNote || null\r\n    );\r\n}\r\n","import { isObjectLike } from \"lodash\";\r\nimport {\r\n    ExtendedMonster,\r\n    isExtendedMonster,\r\n    isMonster,\r\n    MonsterData,\r\n    MonsterReference,\r\n    MonsterSchema\r\n} from \"../dataModels/MonsterData\";\r\nimport { parseData } from \"../dataModels/Parse\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { notNull } from \"../utils/NotNull\";\r\nimport { HttpService } from \"./HttpService\";\r\nimport { toMonster } from \"./MonsterConverter\";\r\n\r\nfunction url(file: string) {\r\n    return `/data/bestiary/${file}`;\r\n}\r\n\r\ninterface Index {\r\n    [key: string]: string;\r\n}\r\n\r\ninterface Bestiary {\r\n    monster: (MonsterData | ExtendedMonster)[];\r\n}\r\n\r\nfunction find(monsters: Monster[], ref: MonsterReference): Monster {\r\n    const found = monsters.find(m => m.is(ref));\r\n    if (found == null) {\r\n        throw new Error(`Failed to find monster ${JSON.stringify(ref)}`);\r\n    }\r\n    return found;\r\n}\r\n\r\nfunction printEnum(\r\n    monsters: MonsterData[],\r\n    addValues: (set: Set<String>, monster: MonsterData) => void\r\n) {\r\n    const found = new Set<string>();\r\n    monsters.forEach(m => {\r\n        addValues(found, m);\r\n    });\r\n    console.log(\r\n        `export enum Foo {${Array.from(found.values())\r\n            .map(\r\n                v =>\r\n                    `${v\r\n                        .replace(/ /g, \"_\")\r\n                        .replace(/[^a-z_]/gi, \"\")\r\n                        .toLocaleUpperCase()} = \"${v}\"`\r\n            )\r\n            .join(\",\\n\")}}`\r\n    );\r\n}\r\n\r\nlet cache: Promise<Monster[]> | null = null;\r\nexport class MonsterService {\r\n    static all(): Promise<Monster[]> {\r\n        if (cache == null) {\r\n            cache = MonsterService.allRaw();\r\n        }\r\n        return cache;\r\n    }\r\n\r\n    static async allRaw(): Promise<Monster[]> {\r\n        const res = await HttpService.getJson<Index>(url(\"index.json\"));\r\n        let monsters: MonsterData[] = [];\r\n        let extended: ExtendedMonster[] = [];\r\n        for (const key in res) {\r\n            const response = await HttpService.getJson<Bestiary>(url(res[key]));\r\n            monsters = monsters.concat(response.monster.filter(isMonster));\r\n            extended = extended.concat(\r\n                response.monster.filter(isExtendedMonster)\r\n            );\r\n        }\r\n        extended.forEach(m => {\r\n            const reference = m._copy;\r\n            const found = monsters.find(\r\n                mon =>\r\n                    mon.name === reference.name &&\r\n                    (reference.source == null ||\r\n                        reference.source === mon.source)\r\n            );\r\n            if (found == null) {\r\n                throw new Error(\r\n                    `Monster ${JSON.stringify(reference)} not found`\r\n                );\r\n            }\r\n            monsters.push({ ...found, ...m });\r\n        });\r\n        printEnum(monsters, (f, m) => {\r\n            if (m.dragonCastingColor != null) {\r\n                f.add(m.dragonCastingColor);\r\n            }\r\n        });\r\n        const knownKeys = new Map<string, any>();\r\n        const foundKeys = new Set<string>();\r\n        let first = true;\r\n        const mon = monsters\r\n            .map(rawMonster => {\r\n                const monster = parseData(MonsterSchema, rawMonster);\r\n                if (monster == null) {\r\n                    return null;\r\n                }\r\n                Object.keys(rawMonster).forEach(k =>\r\n                    knownKeys.set(k, rawMonster)\r\n                );\r\n                Object.keys(monster).forEach(k => foundKeys.add(k));\r\n                const differentKeys = Object.keys(monster).filter(\r\n                    key =>\r\n                        !isEqual(\r\n                            (rawMonster as any)[key],\r\n                            (monster as any)[key]\r\n                        )\r\n                );\r\n                if (differentKeys.length > 0 && first) {\r\n                    console.error(\"Found different keys\", differentKeys);\r\n                    console.log(monster);\r\n                    console.log(rawMonster);\r\n                    differentKeys.forEach(k =>\r\n                        console.log((monster as any)[k], (rawMonster as any)[k])\r\n                    );\r\n                    first = false;\r\n                }\r\n                return monster;\r\n            })\r\n            .filter(notNull)\r\n            .map(toMonster);\r\n        foundKeys.forEach(k => knownKeys.delete(k));\r\n        console.log(knownKeys);\r\n        return mon;\r\n    }\r\n\r\n    static async get(ref: MonsterReference): Promise<Monster> {\r\n        const all = await MonsterService.all();\r\n        return find(all, ref);\r\n    }\r\n}\r\n\r\nfunction isEqual(left: any, right: any): boolean {\r\n    if (left === right) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(left) && Array.isArray(right)) {\r\n        return (\r\n            left.length === right.length &&\r\n            left.every((l, i) => isEqual(l, right[i]))\r\n        );\r\n    }\r\n    if (isObjectLike(left) && isObjectLike(right)) {\r\n        const keys = new Set([...Object.keys(left), ...Object.keys(right)]);\r\n        return Array.from(keys.values()).every(k => isEqual(left[k], right[k]));\r\n    }\r\n    return false;\r\n}\r\n","export enum TextAnnotation {\r\n    dice = \"dice\",\r\n    dc = \"dc\",\r\n    hit = \"hit\",\r\n    on_hit = \"h\",\r\n    attack = \"atk\",\r\n    damage = \"damage\",\r\n    recharge = \"recharge\"\r\n}\r\n\r\nconst ATTACK_TYPES: { [key: string]: string } = {\r\n    ms: \"Melee Spell Attack:\",\r\n    mw: \"Melee Weapon Attack:\",\r\n    rw: \"Ranged Weapon Attack:\",\r\n    \"mw,rw\": \"Melee or Ranged Weapon Attack:\"\r\n};\r\n\r\nexport class AnnotatedText {\r\n    constructor(readonly annotation: TextAnnotation, readonly text: string) {}\r\n\r\n    format() {\r\n        switch (this.annotation) {\r\n            case TextAnnotation.dc:\r\n                return `DC ${this.text}`;\r\n            case TextAnnotation.hit:\r\n                return `+${this.text}`;\r\n            case TextAnnotation.on_hit:\r\n                return `Hit: `;\r\n            case TextAnnotation.attack:\r\n                return ATTACK_TYPES[this.text] || this.text;\r\n            case TextAnnotation.recharge:\r\n                return this.text !== \"\"\r\n                    ? `(Recharge ${this.text}-6)`\r\n                    : `(Recharge 6)`;\r\n            default:\r\n                return this.text;\r\n        }\r\n    }\r\n}\r\n","export enum EntityType {\r\n    item = \"item\",\r\n    monster = \"monster\",\r\n    creature = \"creature\",\r\n    spell = \"spell\",\r\n    condition = \"condition\",\r\n    skill = \"skill\"\r\n}\r\n","import { AnnotatedText, TextAnnotation } from \"../models/AnnotatedText\";\r\nimport { EntityType } from \"../models/EntityType\";\r\n\r\nexport class Link {\r\n    readonly book?: string;\r\n    constructor(\r\n        readonly type: EntityType,\r\n        readonly name: string,\r\n        book?: string,\r\n        readonly text?: string\r\n    ) {\r\n        if (book != null) {\r\n            this.book = book.toLowerCase();\r\n        }\r\n    }\r\n\r\n    getText() {\r\n        return this.text || this.name;\r\n    }\r\n}\r\n\r\nexport class Text {\r\n    constructor(readonly text: string) {}\r\n}\r\n\r\nexport type Token = Text | Link | AnnotatedText;\r\n\r\nexport function parseText(text: string): Token[] {\r\n    const regex = /(.*?){@(\\w+)(?: (.*?))?}/g;\r\n    let match;\r\n    const out: Token[] = [];\r\n    function push(token: Token) {\r\n        if (token instanceof Text && token.text === \"\") {\r\n            return;\r\n        }\r\n        out.push(token);\r\n    }\r\n    let lastIndex = 0;\r\n    while ((match = regex.exec(text))) {\r\n        push(new Text(match[1]));\r\n        const link = toLink(\r\n            match[2],\r\n            (match[3] || \"\").split(\"|\").map(s => s.trim())\r\n        );\r\n        if (link != null) {\r\n            push(link);\r\n        } else {\r\n            push(new Text(match[0]));\r\n        }\r\n        lastIndex = regex.lastIndex;\r\n    }\r\n    push(new Text(text.substring(lastIndex)));\r\n    return out;\r\n}\r\n\r\nfunction toLink(type: string, values: string[]): Token | null {\r\n    const entityType = Object.values(EntityType).find(t => t === type);\r\n    if (entityType != null) {\r\n        return new Link(entityType, values[0], values[1], values[2]);\r\n    }\r\n    const annotation = Object.values(TextAnnotation).find(t => t === type);\r\n    if (annotation != null) {\r\n        return new AnnotatedText(annotation, values[0]);\r\n    }\r\n    return null;\r\n}\r\n","import React from \"react\";\nimport { Link } from \"../services/LinkedTextParser\";\n\nexport function EntityLink({ entity }: { entity: Link }) {\n    return <a href={`#/${entity.type}`}>{entity.getText()}</a>;\n}\n","import React from \"react\";\r\nimport { AnnotatedText } from \"../models/AnnotatedText\";\r\nimport { Link, parseText } from \"../services/LinkedTextParser\";\r\nimport { EntityLink } from \"./EntityLink\";\r\n\r\nexport function LinkedText({ text }: { text: string }) {\r\n    return (\r\n        <>\r\n            {parseText(text).map((value, i) => {\r\n                if (value instanceof Link) {\r\n                    return <EntityLink entity={value} key={i} />;\r\n                } else if (value instanceof AnnotatedText) {\r\n                    return <em key={i}>{value.format()}</em>;\r\n                } else {\r\n                    return value.text;\r\n                }\r\n            })}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"./Label.css\";\r\nimport { LinkedText } from \"./LinkedText\";\r\n\r\nexport function Label({ children }: { children: string }) {\r\n    return (\r\n        <strong className=\"label\">\r\n            <LinkedText text={children} />\r\n        </strong>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Label } from \"./Label\";\r\nimport { LinkedText } from \"./LinkedText\";\r\n\r\nexport function Definition({ label, text }: { label: string; text: string }) {\r\n    return (\r\n        <div>\r\n            <Label>{label}</Label> <LinkedText text={text}></LinkedText>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { TextBuilder } from \"../utils/TextBuilder\";\r\nimport { Definition } from \"./Definition\";\r\n\r\nexport function ListDefinition({\r\n    values,\r\n    label,\r\n    suffix\r\n}: {\r\n    values: string[];\r\n    label: string;\r\n    suffix?: string | null;\r\n}) {\r\n    if (values.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label={label}\r\n            text={new TextBuilder()\r\n                .list(values)\r\n                .add(suffix)\r\n                .build()}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function ChallengeRating({ monster }: { monster: Monster }) {\r\n    if (monster.challengeRating == null) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition label=\"Challenge\" text={monster.challengeRating.format()} />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function ConditionImmunities({ monster }: { monster: Monster }) {\r\n    if (monster.conditionImmunities.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Condition Immunities\"\r\n            text={defaultFormat(monster.conditionImmunities)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function DamageImmunities({ monster }: { monster: Monster }) {\r\n    if (monster.damageImmunities.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Damage Immunities\"\r\n            text={defaultFormat(monster.damageImmunities)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function DamageResistances({ monster }: { monster: Monster }) {\r\n    if (monster.damageResistance.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Damage Resistances\"\r\n            text={defaultFormat(monster.damageResistance)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function DamageVulnerabilities({ monster }: { monster: Monster }) {\r\n    if (monster.vulnerabilities.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Damage Vulnerabilities\"\r\n            text={defaultFormat(monster.vulnerabilities)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    Content,\r\n    InlineContent,\r\n    InsetContent,\r\n    LabeledContent,\r\n    LinkContent,\r\n    ListContent,\r\n    SubVariantContent,\r\n    TableContent,\r\n    TextContent,\r\n    VariantContent\r\n} from \"../models/Content\";\r\nimport { assertNever } from \"../utils/Never\";\r\nimport { Label } from \"./Label\";\r\nimport { LinkedText } from \"./LinkedText\";\r\n\r\nexport function TableContentDisplay({ content }: { content: TableContent }) {\r\n    return (\r\n        <div>\r\n            {content.caption}\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        {content.columnLabels.map((c, i) => (\r\n                            <th key={i}>{c}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {content.rows.map((r, i) => (\r\n                        <tr key={i}>\r\n                            {r.map((d, j) => (\r\n                                <td key={j}>{i}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function ContentDisplay({ content }: { content: Content }) {\r\n    if (content instanceof TextContent) {\r\n        return <LinkedText text={content.description} />;\r\n    } else if (content instanceof ListContent) {\r\n        return (\r\n            <ul>\r\n                {content.entries.map((e, i) => (\r\n                    <li key={i}>\r\n                        <ContentDisplay content={e} />\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    } else if (content instanceof InlineContent) {\r\n        return (\r\n            <span>\r\n                {content.entries.map((e, i) => (\r\n                    <span key={i}>\r\n                        <ContentDisplay key={i} content={e} />\r\n                    </span>\r\n                ))}\r\n            </span>\r\n        );\r\n    } else if (content instanceof LinkContent) {\r\n        return <a href={content.href.path}>{content.text}</a>;\r\n    } else if (content instanceof LabeledContent) {\r\n        return (\r\n            <span>\r\n                <Label>{content.label}</Label>{\" \"}\r\n                <LinkedText text={content.text} />\r\n            </span>\r\n        );\r\n    } else if (\r\n        content instanceof InsetContent ||\r\n        content instanceof VariantContent ||\r\n        content instanceof SubVariantContent\r\n    ) {\r\n        return (\r\n            <span>\r\n                <Label>{content.label}</Label>{\" \"}\r\n                {content.entries.map((c, i) => (\r\n                    <ContentDisplay key={i} content={c} />\r\n                ))}\r\n            </span>\r\n        );\r\n    } else if (content instanceof TableContent) {\r\n        return <TableContentDisplay content={content} />;\r\n    }\r\n    return assertNever(content);\r\n}\r\n","export function assertNever(x: never): never {\r\n    throw new Error(\"Unexpected value. Should have been never.\");\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { LegendaryAction } from \"../models/LegendaryAction\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nfunction Legendary({\r\n    legendaryAction: action\r\n}: {\r\n    legendaryAction: LegendaryAction;\r\n}) {\r\n    return (\r\n        <div>\r\n            <Label>{action.name}</Label>{\" \"}\r\n            <ContentDisplay content={action.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function LegendaryActions({ monster }: { monster: Monster }) {\r\n    if (monster.legendary == null) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Legendary Actions</h3>\r\n            <p>{monster.legendary.header.join(\" \")}</p>\r\n            {monster.legendary.actions.map((a, i) => (\r\n                <Legendary key={i} legendaryAction={a} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { Action } from \"../models/Action\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nfunction MonsterAction({ action }: { action: Action }) {\r\n    return (\r\n        <div>\r\n            <Label>{action.name}</Label>{\" \"}\r\n            <ContentDisplay content={action.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MonsterActions({ monster }: { monster: Monster }) {\r\n    if (monster.actions.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Actions</h3>\r\n            {monster.actions.map((a, i) => (\r\n                <MonsterAction key={i} action={a} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { Reaction } from \"../models/Reaction\";\r\n\r\nfunction MonsterReaction({ reaction }: { reaction: Reaction }) {\r\n    return (\r\n        <div>\r\n            <Label>{reaction.name}</Label>{\" \"}\r\n            <ContentDisplay content={reaction.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MonsterReactions({ monster }: { monster: Monster }) {\r\n    if (monster.reactions.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Reactions</h3>\r\n            {monster.reactions.map((a, i) => (\r\n                <MonsterReaction key={i} reaction={a} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function MonsterSaves({ monster }: { monster: Monster }) {\r\n    if (monster.savingThrows.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Saving Throws\"\r\n            text={defaultFormat(monster.savingThrows)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function MonsterSkills({ monster }: { monster: Monster }) {\r\n    const { skills } = monster;\r\n    if (skills.length === 0) {\r\n        return null;\r\n    }\r\n    return <Definition label=\"Skills\" text={defaultFormat(skills)} />;\r\n}\r\n","import React from \"react\";\r\nimport { LinkedText } from \"../components/LinkedText\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { SpellGroup } from \"../models/Spellcasting\";\r\n\r\nexport function SpellGroupDisplay({ group }: { group: SpellGroup }) {\r\n    if (group.hidden) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div>\r\n            <span>{group.limit.format()}</span>:{\" \"}\r\n            <LinkedText text={defaultFormat(group.spells)} />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Label } from \"../components/Label\";\r\nimport { LinkedText } from \"../components/LinkedText\";\r\nimport { Spellcasting } from \"../models/Spellcasting\";\r\nimport { SpellGroupDisplay } from \"./SpellGroupDisplay\";\r\n\r\nexport function MonsterSpells({\r\n    spellcasting\r\n}: {\r\n    spellcasting: Spellcasting[];\r\n}) {\r\n    if (spellcasting.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div>\r\n            {spellcasting.map(s => (\r\n                <div key={s.name}>\r\n                    <Label>{s.name}</Label>{\" \"}\r\n                    <LinkedText text={s.header.join(\" \")} />\r\n                    {s.spellGroups.map((g, i) => (\r\n                        <SpellGroupDisplay key={i} group={g} />\r\n                    ))}\r\n                    <LinkedText text={s.footer.join(\" \")} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { Trait } from \"../models/Trait\";\r\n\r\nfunction MonsterTrait({ trait }: { trait: Trait }) {\r\n    return (\r\n        <div>\r\n            <Label>{trait.name}</Label>{\" \"}\r\n            <ContentDisplay content={trait.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MonsterTraits({ monster }: { monster: Monster }) {\r\n    return (\r\n        <>\r\n            {monster.traits.map((t, i) => (\r\n                <MonsterTrait key={i} trait={t} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","export function getMod(value: number) {\n    return Math.floor((value - 10) / 2);\n}\n\nexport function getSignedMod(value: number) {\n    const mod = getMod(value);\n    if (mod >= 0) {\n        return `+${mod}`;\n    } else {\n        return mod.toString();\n    }\n}\n","import React from \"react\";\nimport { Monster } from \"../models/Monster\";\nimport { getSignedMod } from \"../models/Stats\";\nimport \"./StatTable.css\";\n\nfunction Stat({ name, value }: { name: string; value: number }) {\n    return (\n        <div className=\"stat\">\n            <div>{name}</div>\n            <div>\n                {value} ({getSignedMod(value)})\n            </div>\n        </div>\n    );\n}\n\nexport function StatTable({ monster }: { monster: Monster }) {\n    return (\n        <div className=\"stat-table\">\n            <Stat name=\"Str\" value={monster.stats.str} />\n            <Stat name=\"Dex\" value={monster.stats.dex} />\n            <Stat name=\"Con\" value={monster.stats.con} />\n            <Stat name=\"Wis\" value={monster.stats.wis} />\n            <Stat name=\"Int\" value={monster.stats.int} />\n            <Stat name=\"Cha\" value={monster.stats.cha} />\n        </div>\n    );\n}\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { ListDefinition } from \"../components/ListDefinition\";\r\nimport { defaultFormat, formatSize } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { makeLine } from \"../utils/Formatting\";\r\nimport { ChallengeRating } from \"./ChallengeRating\";\r\nimport { ConditionImmunities } from \"./ConditionImmunities\";\r\nimport { DamageImmunities } from \"./DamageImmunities\";\r\nimport { DamageResistances } from \"./DamageResistances\";\r\nimport { DamageVulnerabilities } from \"./DamageVulnerabilities\";\r\nimport { LegendaryActions } from \"./LegendaryActions\";\r\nimport { MonsterActions } from \"./MonsterActions\";\r\nimport { MonsterReactions } from \"./MonsterReactions\";\r\nimport { MonsterSaves } from \"./MonsterSaves\";\r\nimport \"./MonsterSheet.css\";\r\nimport { MonsterSkills } from \"./MonsterSkills\";\r\nimport { MonsterSpells } from \"./MonsterSpells\";\r\nimport { MonsterTraits } from \"./MonsterTraits\";\r\nimport { StatTable } from \"./StatTable\";\r\n\r\nexport function MonsterSheet({ monster }: { monster: Monster }) {\r\n    return (\r\n        <div>\r\n            <h2>{monster.name}</h2>\r\n            <p>\r\n                {makeLine(\r\n                    formatSize(monster.size),\r\n                    monster.type.format() + \",\",\r\n                    monster.alignment.format()\r\n                )}\r\n            </p>\r\n            <hr />\r\n            <Definition label=\"Armor Class\" text={defaultFormat(monster.acs)} />\r\n            <Definition label=\"Hit Points\" text={monster.hp.format()} />\r\n            <Definition label=\"Speed\" text={defaultFormat(monster.speeds)} />\r\n            <hr />\r\n            <StatTable monster={monster} />\r\n            <hr />\r\n            <MonsterSaves monster={monster} />\r\n            <MonsterSkills monster={monster} />\r\n            <DamageResistances monster={monster} />\r\n            <DamageImmunities monster={monster} />\r\n            <DamageVulnerabilities monster={monster} />\r\n            <ConditionImmunities monster={monster} />\r\n            <ListDefinition\r\n                label=\"Senses\"\r\n                values={monster.senses}\r\n                suffix={\r\n                    monster.passivePerception\r\n                        ? `Passive Perception ${monster.passivePerception}`\r\n                        : null\r\n                }\r\n            />\r\n            <ListDefinition label=\"Languages\" values={monster.languages} />\r\n            <ChallengeRating monster={monster} />\r\n            <hr />\r\n            <MonsterTraits monster={monster} />\r\n            <MonsterSpells spellcasting={monster.spellcasting} />\r\n            <hr />\r\n            <MonsterActions monster={monster} />\r\n            <MonsterReactions monster={monster} />\r\n            <LegendaryActions monster={monster} />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { loader } from \"../components/Loader\";\r\nimport { MonsterReference } from \"../dataModels/MonsterData\";\r\nimport { MonsterService } from \"../services/MonsterService\";\r\nimport \"./MonsterCard.css\";\r\nimport { MonsterSheet } from \"./MonsterSheet\";\r\n\r\nexport function MonsterCard({ monster }: { monster: MonsterReference }) {\r\n    return loader(\r\n        () => MonsterService.get(monster),\r\n        monster => (\r\n            <div className=\"monster-card\">\r\n                <MonsterSheet monster={monster} />\r\n            </div>\r\n        ),\r\n        [monster.name, monster.source]\r\n    );\r\n}\r\n","import React, {\r\n    DependencyList,\r\n    ReactElement,\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\n/* eslint-disable react-hooks/rules-of-hooks,react-hooks/exhaustive-deps */\r\nexport function loader<T>(\r\n    loader: () => Promise<T>,\r\n    render: (t: T) => React.ReactNode,\r\n    dependencyList: DependencyList = []\r\n): ReactElement {\r\n    const [data, setData] = useState<T | null>(null);\r\n    useEffect(() => {\r\n        setData(null);\r\n        loader().then(setData);\r\n    }, dependencyList);\r\n\r\n    if (data != null) {\r\n        return <>{render(data)}</>;\r\n    }\r\n    return <span>Loading</span>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Input({\r\n    value,\r\n    onChange,\r\n    placeholder\r\n}: {\r\n    value: string;\r\n    onChange: (newValue: string) => void;\r\n    placeholder?: string;\r\n}) {\r\n    return (\r\n        <input\r\n            className=\"form-control\"\r\n            value={value}\r\n            onChange={e => {\r\n                onChange(e.target.value);\r\n            }}\r\n            placeholder={placeholder}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Scroller.css\";\r\n\r\ninterface ScrollerPosition {\r\n    scrollDistance: number;\r\n    height: number;\r\n}\r\n\r\nexport function Scroller<T>({\r\n    elements,\r\n    render,\r\n    elementHeight\r\n}: {\r\n    elements: T[];\r\n    render: (t: T) => React.ReactNode;\r\n    elementHeight: number;\r\n}) {\r\n    const [position, setPosition] = useState<ScrollerPosition>({\r\n        scrollDistance: 0,\r\n        height: 1000\r\n    });\r\n\r\n    const scrollTarget = useRef<HTMLDivElement>(null);\r\n    const timeout = useRef<number | null>(null);\r\n    function updateScroll(scroller: HTMLDivElement | null | undefined) {\r\n        if (scroller == null) {\r\n            return;\r\n        }\r\n        setPosition({\r\n            scrollDistance: scroller.scrollTop,\r\n            height: scroller.clientHeight\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateScroll(scrollTarget.current);\r\n    }, []);\r\n\r\n    function onScroll() {\r\n        if (timeout.current == null) {\r\n            timeout.current = requestAnimationFrame(() => {\r\n                timeout.current = null;\r\n                updateScroll(scrollTarget.current);\r\n            });\r\n        }\r\n    }\r\n\r\n    const before = Math.floor(position.scrollDistance / elementHeight);\r\n    const count = Math.ceil(position.height / elementHeight) + 1;\r\n    const after = elements.length - before - count;\r\n\r\n    return (\r\n        <div className=\"scroller\" onScroll={onScroll} ref={scrollTarget}>\r\n            <div className=\"scroller__area\">\r\n                <div\r\n                    className=\"scroller__top-padding\"\r\n                    style={{ height: before * elementHeight }}\r\n                />\r\n                {elements.slice(before, before + count).map(render)}\r\n                <div\r\n                    className=\"scroller__bottom-padding\"\r\n                    style={{\r\n                        height: after * elementHeight\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { flatten } from \"lodash\";\r\n\r\ninterface ClassNamesObject {\r\n    [key: string]: boolean;\r\n}\r\n\r\nfunction fromKeys(classes: ClassNamesObject) {\r\n    return Object.keys(classes).filter(c => classes[c]);\r\n}\r\n\r\nexport function classNames(...classes: (ClassNamesObject | string)[]) {\r\n    return flatten(\r\n        classes.map(c => {\r\n            if (typeof c === \"string\") {\r\n                return [c];\r\n            } else {\r\n                return fromKeys(c);\r\n            }\r\n        })\r\n    ).join(\" \");\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Input } from \"../components/Input\";\r\nimport { Scroller } from \"../components/Scroller\";\r\nimport { MonsterReference } from \"../dataModels/MonsterData\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { MonsterService } from \"../services/MonsterService\";\r\nimport { BemBuilder } from \"../utils/BemBuilder\";\r\nimport { classNames } from \"./Classnames\";\r\nimport \"./MonsterList.css\";\r\n\r\nfunction href(ref: MonsterReference) {\r\n    return `/#/monsters?name=${ref.name}&source=${ref.source || \"\"}`;\r\n}\r\n\r\nfunction alphabetic(a: Monster, b: Monster) {\r\n    return a.name.localeCompare(b.name);\r\n}\r\n\r\nconst BEM = new BemBuilder(\"monster-list\");\r\n\r\nexport function MonsterList({\r\n    selected\r\n}: {\r\n    selected: MonsterReference | null;\r\n}) {\r\n    const [monsters, setMonsters] = useState<Monster[] | null>(null);\r\n    useEffect(() => {\r\n        MonsterService.all().then(setMonsters);\r\n    }, []);\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    if (monsters == null) {\r\n        return <span>Loading</span>;\r\n    }\r\n\r\n    function filter(monster: Monster) {\r\n        if (search === \"\") {\r\n            return true;\r\n        }\r\n        return monster.name\r\n            .toLocaleLowerCase()\r\n            .includes(search.toLocaleLowerCase());\r\n    }\r\n\r\n    function isSelected(monster: Monster) {\r\n        return selected != null && monster.is(selected);\r\n    }\r\n\r\n    return (\r\n        <div className={BEM.block}>\r\n            <div>\r\n                <Input\r\n                    value={search}\r\n                    onChange={setSearch}\r\n                    placeholder=\"Search\"\r\n                />\r\n            </div>\r\n            <div className={BEM.element(\"list\")}>\r\n                <Scroller\r\n                    elements={monsters.filter(filter).sort(alphabetic)}\r\n                    render={m => (\r\n                        <a\r\n                            className={classNames(BEM.element(\"item\"), {\r\n                                \"bg-primary text-white\": isSelected(m),\r\n                                \"bg-light\": !isSelected(m)\r\n                            })}\r\n                            key={`${m.name} ${m.source}`}\r\n                            href={href(m)}\r\n                        >\r\n                            <div className={BEM.element(\"name\")}>{m.name}</div>\r\n                            <div className={BEM.element(\"type\")}>\r\n                                {m.type.format()}\r\n                            </div>\r\n                            <div className={BEM.element(\"cr\")}>\r\n                                {m.formatChallengeRating()}\r\n                            </div>\r\n                            <div className={BEM.element(\"source\")}>\r\n                                {m.source}\r\n                            </div>\r\n                        </a>\r\n                    )}\r\n                    elementHeight={32}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport { MonsterCard } from \"./MonsterCard\";\r\nimport { MonsterList } from \"./MonsterList\";\r\nimport \"./MonsterPage.css\";\r\n\r\nfunction useSelectedMonster() {\r\n    const params = new URLSearchParams(useLocation().search);\r\n    const name = params.get(\"name\");\r\n    if (name != null && name !== \"\") {\r\n        const source = params.get(\"source\");\r\n        return {\r\n            name: name,\r\n            source: !!source ? source : undefined\r\n        };\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function MonsterPage() {\r\n    const selected = useSelectedMonster();\r\n    return (\r\n        <div className=\"row monster-page\">\r\n            <div className=\"col monster-page__list\">\r\n                <MonsterList selected={selected} />\r\n            </div>\r\n            <div className=\"col monster-page__card\">\r\n                {selected && <MonsterCard monster={selected} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { AdventuresPage } from \"./adventures/AdventuresPage\";\nimport \"./App.css\";\nimport { Navigation } from \"./application/Navigation\";\nimport { ItemPage } from \"./monster/ItemPage\";\nimport { MonsterPage } from \"./monster/MonsterPage\";\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div className=\"container-fluid app\">\n                <Navigation />\n                <Switch>\n                    <Route path=\"/monsters\">\n                        <MonsterPage />\n                    </Route>\n                    <Route path=\"/items\">\n                        <ItemPage />\n                    </Route>\n                    <Route path=\"/adventures\">\n                        <AdventuresPage />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}