{"version":3,"sources":["utils/BemBuilder.ts","application/Navigation.tsx","services/HttpService.ts","services/ItemService.ts","monster/ItemPage.tsx","models/Alignment.ts","models/Condition.ts","models/DamageType.ts","models/DragonCastingColor.ts","models/Enums.ts","models/Environment.ts","models/MonsterGroup.ts","models/MonsterTags.ts","models/Size.ts","models/Statistics.ts","dataModels/MonsterData.ts","dataModels/Parse.ts","utils/NotNull.ts","models/Action.ts","models/ArmorClass.ts","models/Formatters.ts","models/SkillType.ts","models/ChallengeRating.ts","utils/TextBuilder.ts","models/ConditionImmunity.ts","models/Content.ts","models/DamageModifier.ts","models/Health.ts","models/Legendary.ts","models/LegendaryAction.ts","models/LegendaryGroup.ts","models/Monster.ts","models/MonsterFlags.ts","models/MonsterNames.ts","models/MonsterSource.ts","models/MonsterType.ts","models/Reaction.ts","models/SavingThrow.ts","utils/Formatting.ts","models/Skill.ts","models/Speed.ts","utils/Ordinal.ts","models/Spellcasting.ts","utils/Plural.ts","models/Trait.ts","services/MonsterConverter.ts","services/MonsterService.ts","models/AnnotatedText.ts","models/EntityType.ts","services/LinkedTextParser.ts","components/EntityLink.tsx","components/LinkedText.tsx","components/Label.tsx","components/Definition.tsx","components/ListDefinition.tsx","monster/ChallengeRating.tsx","monster/ConditionImmunities.tsx","monster/DamageImmunities.tsx","monster/DamageResistances.tsx","monster/DamageVulnerabilities.tsx","components/ContentDisplay.tsx","utils/Never.ts","monster/LegendaryActions.tsx","monster/MonsterActions.tsx","monster/MonsterReactions.tsx","monster/MonsterSaves.tsx","monster/MonsterSkills.tsx","monster/SpellGroupDisplay.tsx","monster/MonsterSpells.tsx","monster/MonsterTraits.tsx","models/Stats.ts","monster/StatTable.tsx","monster/MonsterSheet.tsx","monster/MonsterCard.tsx","components/Loader.tsx","components/Input.tsx","components/Scroller.tsx","monster/Classnames.ts","monster/MonsterList.tsx","monster/MonsterPage.tsx","App.tsx","index.tsx"],"names":["BemBuilder","block","element","modifier","condition","this","ITEMS","path","label","exact","BEM","Navigation","className","map","i","key","to","activeClassName","cache","Map","HttpService","has","get","promise","fetch","then","t","json","set","ItemService","getJson","console","log","ItemPage","useEffect","all","BaseAlignment","Condition","DamageType","DragonCastingColor","names","LAWFUL","NEUTRAL","NEUTRAL_X","NEUTRAL_Y","CHAOTIC","GOOD","EVIL","UNALIGNED","ANY","Alignment","alignment","chance","toFixed","MonsterAlignment","alignments","special","base","a","format","join","length","Environment","MonsterGroup","ActionTag","DamageTag","SenseTag","TraitTag","LanguageTag","SpellcastingTag","MiscTag","createEnum","e","name","keys","Object","forEach","k","Size","AbilityScore","MonsterTags","actions","damageTags","languageTags","miscTags","senseTags","spellcastingTags","traitTag","AbilityScores","values","Statistics","str","dex","con","wis","int","cha","optional","type","optionalArray","ComplexACSchema","ac","from","braces","ACSchema","SizeSchema","TypeTag","tag","prefix","TypeSchema","tags","swarmSize","AlignmentsSchema","ComplexAlignment","SpecialAlignment","AlignmentSchema","SimpleHealth","average","formula","SpecialHealth","HealthSchema","SkillsSchema","acrobatics","perception","stealth","history","insight","intimidation","persuasion","performance","arcana","investigation","religion","athletics","nature","survival","deception","medicine","other","oneOf","SpeedSchema","number","SpeedsSchema","walk","climb","fly","swim","burrow","canHover","SavesSchema","DamageTypeSchema","ConditionSchema","DamageImmunitySchema","immune","preNote","note","ConditionImmunitySchema","conditionImmune","ChallengeRatingSchema","cr","lair","coven","EntrySchema","items","style","href","hash","text","entry","entries","token","PageSourceSchema","variantSource","SourceSchema","caption","colLabels","colStyles","rows","SpellcastingSchema","TraitSchema","inset","AbilityScoresSchema","SpellReference","SpellSchema","lower","slots","spells","ability","headerEntries","footerEntries","will","hidden","daily","TagSchema","actionTags","traitTags","ResistSchema","resist","LegendaryActionSchema","ActionLikeSchema","LegendaryGroupSchema","source","VulnerableSchema","vulnerable","MonsterGroupSchema","page","MonsterSchema","shortName","size","hp","skill","speed","save","senses","languages","trait","spellcasting","action","reaction","legendary","legendaryGroup","passive","isNpc","familiar","isNamedCreature","group","level","altArt","otherSources","variant","legendaryHeader","legendaryActions","soundClip","environment","dragonCastingColor","alias","actionNote","isExtendedMonster","monster","isMonster","parseData","model","data","original","result","results","decode","isLeft","left","error","context","c","filter","value","JSON","stringify","slice","message","right","notNull","Action","content","ArmorClass","defaultFormat","ts","SkillType","Formatter","conditions","s","push","ChallengeRating","create","addCondition","TextBuilder","phrases","callable","builder","nonEmpty","build","ConditionImmunity","add","list","TextContent","description","LabeledContent","ListContent","InsetContent","VariantContent","SubVariantContent","InlineContent","LinkContent","TableContent","columnLabels","DamageModifier","damageTypes","conditional","b","DefaultHealth","Legendary","header","count","LegendaryAction","LegendaryGroup","Monster","acs","stats","skills","speeds","savingThrows","damageImmunities","damageResistance","conditionImmunities","challengeRating","traits","passivePerception","reactions","vulnerabilities","flags","reference","toLowerCase","MonsterFlags","npc","named","MonsterNames","aliases","MonsterSource","Tag","MonsterType","Reaction","SavingThrow","stat","abilityScore","capitalize","sentenceCase","line","charAt","toLocaleUpperCase","SkillTypes","SpeedType","Skill","SpeedTypes","Speed","speedType","WALK","ordinal","DailyLimit","NoLimit","DailyEachLimit","SpellSlotLimit","lowerLevelRange","singular","plural","limit","Spell","spell","SpellGroup","Spellcasting","spellcastingAbility","footer","spellGroups","Trait","toSubContent","subEntries","se","toContent","DEFAULT_LEGENDARY_ACTIONS","toMonster","sa","toMonsterAlignment","toMonsterHealth","toStatistics","toSkills","toSpeeds","toSavingThrows","d","toDamageImmunities","r","toDamageResistances","toConditionImmunities","toChallengeRating","toTraits","groups","addDaily","fromList","includes","addSpellSlot","slotLevel","undefined","toSpellcasting","toActions","toTags","toReactions","toLegendary","toVulnerabilities","url","file","find","monsters","ref","found","m","is","Error","printEnum","addValues","Set","Array","v","replace","MonsterService","allRaw","res","extended","response","concat","_copy","mon","f","knownKeys","foundKeys","first","rawMonster","differentKeys","isEqual","delete","isArray","every","l","isObjectLike","TextAnnotation","EntityType","ATTACK_TYPES","ms","mw","rw","AnnotatedText","annotation","dc","hit","on_hit","attack","recharge","Link","book","Text","toLink","entityType","EntityLink","entity","getText","LinkedText","match","regex","out","lastIndex","exec","link","split","trim","substring","parseText","Label","children","Definition","ListDefinition","suffix","ConditionImmunities","DamageImmunities","DamageResistances","DamageVulnerabilities","TableContentDisplay","j","ContentDisplay","x","assertNever","legendaryAction","LegendaryActions","MonsterAction","MonsterActions","MonsterReaction","MonsterReactions","MonsterSaves","MonsterSkills","SpellGroupDisplay","MonsterSpells","g","MonsterTrait","MonsterTraits","getSignedMod","mod","Math","floor","getMod","toString","Stat","StatTable","MonsterSheet","parts","makeLine","TINY","SMALL","MEDIUM","LARGE","HUGE","GIGANTIC","formatSize","MonsterCard","loader","render","dependencyList","useState","setData","Input","onChange","placeholder","target","Scroller","elements","elementHeight","scrollDistance","height","position","setPosition","scrollTarget","useRef","timeout","updateScroll","scroller","scrollTop","clientHeight","current","before","ceil","after","onScroll","requestAnimationFrame","classNames","classes","flatten","fromKeys","alphabetic","localeCompare","MonsterList","selected","setMonsters","search","setSearch","isSelected","toLocaleLowerCase","sort","formatChallengeRating","MonsterPage","params","URLSearchParams","useLocation","useSelectedMonster","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c94874a2.chunk.js","sourcesContent":["export class BemBuilder {\r\n    constructor(readonly block: string) {}\r\n\r\n    element(element: string, modifier?: string, condition?: boolean) {\r\n        if (modifier != null && (condition == null || condition === true)) {\r\n            return `${this.block}__${element} ${this.block}__${element}--${modifier}`;\r\n        }\r\n        return `${this.block}__${element}`;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { BemBuilder } from \"../utils/BemBuilder\";\r\nimport \"./Navigation.css\";\r\n\r\nconst ITEMS = [\r\n    {\r\n        path: \"\",\r\n        label: \"Home\",\r\n        exact: true\r\n    },\r\n    {\r\n        path: \"monsters\",\r\n        label: \"Monsters\"\r\n    },\r\n    {\r\n        path: \"items\",\r\n        label: \"Items\"\r\n    }\r\n];\r\n\r\nconst BEM = new BemBuilder(\"navigation\");\r\n\r\nexport function Navigation() {\r\n    return (\r\n        <nav className={`nav ${BEM.block}`}>\r\n            {ITEMS.map(i => (\r\n                <NavLink\r\n                    key={i.path}\r\n                    to={i.path}\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"border-bottom border-primary\"\r\n                    exact={i.exact}\r\n                >\r\n                    {i.label}\r\n                </NavLink>\r\n            ))}\r\n        </nav>\r\n    );\r\n}\r\n","const cache: Map<string, Promise<any>> = new Map();\r\n\r\nexport class HttpService {\r\n    static async getJson<T>(path: string): Promise<T> {\r\n        if (cache.has(path)) {\r\n            return cache.get(path);\r\n        }\r\n        const promise = fetch(path).then(t => t.json());\r\n        cache.set(path, promise);\r\n        return promise;\r\n    }\r\n}\r\n","import { Item } from \"../models/Item\";\r\nimport { HttpService } from \"./HttpService\";\r\n\r\nexport class ItemService {\r\n    static async all(): Promise<Item[]> {\r\n        const json = await HttpService.getJson(\"data/items.json\");\r\n        console.log(json);\r\n        return [];\r\n    }\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { ItemService } from \"../services/ItemService\";\r\n\r\nexport function ItemPage() {\r\n    useEffect(() => {\r\n        ItemService.all();\r\n    }, []);\r\n    return <div>Item</div>;\r\n}\r\n","export enum BaseAlignment {\r\n    LAWFUL = \"L\",\r\n    NEUTRAL = \"N\",\r\n    NEUTRAL_X = \"NX\",\r\n    NEUTRAL_Y = \"NY\",\r\n    CHAOTIC = \"C\",\r\n    GOOD = \"G\",\r\n    EVIL = \"E\",\r\n    UNALIGNED = \"U\",\r\n    ANY = \"A\"\r\n}\r\n\r\nconst names: { [key in BaseAlignment]: string } = {\r\n    [BaseAlignment.LAWFUL]: \"Lawful\",\r\n    [BaseAlignment.NEUTRAL]: \"Neutral\",\r\n    [BaseAlignment.NEUTRAL_X]: \"Neutral X\",\r\n    [BaseAlignment.NEUTRAL_Y]: \"Neutral Y\",\r\n    [BaseAlignment.CHAOTIC]: \"Chaotic\",\r\n    [BaseAlignment.GOOD]: \"Good\",\r\n    [BaseAlignment.EVIL]: \"Evil\",\r\n    [BaseAlignment.UNALIGNED]: \"Unaligned\",\r\n    [BaseAlignment.ANY]: \"Any\"\r\n};\r\n\r\nexport class Alignment {\r\n    constructor(readonly alignment: BaseAlignment, readonly chance: number) {}\r\n\r\n    format() {\r\n        if (this.chance !== 1) {\r\n            return `${names[this.alignment]} (${(this.chance * 100).toFixed(\r\n                0\r\n            )}%)`;\r\n        } else {\r\n            return names[this.alignment];\r\n        }\r\n    }\r\n}\r\n\r\nexport class MonsterAlignment {\r\n    constructor(readonly alignments: Alignment[], readonly special: string[]) {}\r\n\r\n    format() {\r\n        const base = this.alignments.map(a => a.format()).join(\" \");\r\n        if (this.special.length > 0) {\r\n            return `${base} (${this.special.join(\", \")})`;\r\n        }\r\n        return base;\r\n    }\r\n}\r\n","export enum Condition {\r\n    BLINDED = \"blinded\",\r\n    CHARMED = \"charmed\",\r\n    DEAFENED = \"deafened\",\r\n    EXHAUSTION = \"exhaustion\",\r\n    FRIGHTENED = \"frightened\",\r\n    PARALYZED = \"paralyzed\",\r\n    PETRIFIED = \"petrified\",\r\n    POISONED = \"poisoned\",\r\n    PRONE = \"prone\",\r\n    GRAPPLED = \"grappled\",\r\n    RESTRAINED = \"restrained\",\r\n    STUNNED = \"stunned\",\r\n    UNCONSCIOUS = \"unconscious\"\r\n}\r\n","export enum DamageType {\r\n    POISON = \"poison\",\r\n    PSYCHIC = \"psychic\",\r\n    FIRE = \"fire\",\r\n    LIGHTNING = \"lightning\",\r\n    BLUDGEONING = \"bludgeoning\",\r\n    PIERCING = \"piercing\",\r\n    SLASHING = \"slashing\",\r\n    COLD = \"cold\",\r\n    NECROTIC = \"necrotic\",\r\n    THUNDER = \"thunder\",\r\n    ACID = \"acid\",\r\n    FORCE = \"force\",\r\n    RADIANT = \"radiant\"\r\n}\r\n","export enum DragonCastingColor {\r\n    B = \"B\",\r\n    U = \"U\",\r\n    A = \"A\",\r\n    Z = \"Z\",\r\n    C = \"C\",\r\n    O = \"O\",\r\n    G = \"G\",\r\n    R = \"R\",\r\n    S = \"S\",\r\n    W = \"W\"\r\n}\r\n","import * as t from \"io-ts\";\r\n\r\nexport const createEnum = <E>(e: any, name: string): t.Type<E> => {\r\n    const keys: any = {};\r\n    Object.keys(e).forEach(k => {\r\n        keys[e[k]] = null;\r\n    });\r\n    return t.keyof(keys, name) as any;\r\n};\r\n","export enum Environment {\r\n    MOUNTAIN = \"mountain\",\r\n    UNDERDARK = \"underdark\",\r\n    ARCTIC = \"arctic\",\r\n    SWAMP = \"swamp\",\r\n    DESERT = \"desert\",\r\n    COASTAL = \"coastal\",\r\n    HILL = \"hill\",\r\n    GRASSLAND = \"grassland\",\r\n    FOREST = \"forest\",\r\n    URBAN = \"urban\",\r\n    UNDERWATER = \"underwater\"\r\n}\r\n","export enum MonsterGroup {\r\n    LYCANTHROPES = \"Lycanthropes\",\r\n    DINOSAURS = \"Dinosaurs\",\r\n    ANIMATED_OBJECTS = \"Animated Objects\",\r\n    BEHOLDERS = \"Beholders\",\r\n    GENIES = \"Genies\",\r\n    ANGELS = \"Angels\",\r\n    MODRONS = \"Modrons\"\r\n}\r\n","export enum ActionTag {\r\n    MULTIATTACK = \"Multiattack\",\r\n    TENTACLES = \"Tentacles\",\r\n    PARRY = \"Parry\",\r\n    FRIGHTFUL_PRESENCE = \"Frightful Presence\",\r\n    TELEPORT = \"Teleport\",\r\n    SWALLOW = \"Swallow\"\r\n}\r\n\r\nexport enum DamageTag {\r\n    BLUDGEONING = \"B\",\r\n    PIERCING = \"P\",\r\n    FIRE = \"F\",\r\n    ACID = \"A\",\r\n    SLASHING = \"S\",\r\n    RADIANT = \"R\",\r\n    THUNDER = \"T\",\r\n    NECROTIC = \"N\",\r\n    COLD = \"C\",\r\n    LIGHTING = \"L\",\r\n    PSYCHIC = \"Y\",\r\n    POISON = \"I\",\r\n    FORCE = \"O\"\r\n}\r\n\r\nexport enum SenseTag {\r\n    BLINDSIGHT = \"B\",\r\n    DARKVISION = \"D\",\r\n    SUPERIOR_DARKVISION = \"SD\",\r\n    TRUESIGHT = \"U\",\r\n    TREMORSENSE = \"T\"\r\n}\r\n\r\nexport enum TraitTag {\r\n    MAGIC_RESISTANCE = \"Magic Resistance\",\r\n    FALSE_APPEARANCE = \"False Appearance\",\r\n    FEY_ANCESTRY = \"Fey Ancestry\",\r\n    KEEN_SENSES = \"Keen Senses\",\r\n    SNEAK_ATTACK = \"Sneak Attack\",\r\n    AMPHIBIOUS = \"Amphibious\",\r\n    MAGIC_WEAPONS = \"Magic Weapons\",\r\n    IMMUTABLE_FORM = \"Immutable Form\",\r\n    DAMAGE_ABSORPTION = \"Damage Absorption\",\r\n    HOLD_BREATH = \"Hold Breath\",\r\n    LEGENDARY_RESISTANCES = \"Legendary Resistances\",\r\n    REGENERATION = \"Regeneration\",\r\n    DEVILS_SIGHT = \"Devil's Sight\",\r\n    SPIDER_CLIMB = \"Spider Climb\",\r\n    SHAPECHANGER = \"Shapechanger\",\r\n    ANTIMAGIC_SUSCEPTIBILITY = \"Antimagic Susceptibility\",\r\n    SIEGE_MONSTER = \"Siege Monster\",\r\n    BRUTE = \"Brute\",\r\n    INCORPOREAL_MOVEMENT = \"Incorporeal Movement\",\r\n    AMBUSHER = \"Ambusher\",\r\n    REJUVENATION = \"Rejuvenation\",\r\n    TURN_IMMUNITY = \"Turn Immunity\",\r\n    SUNLIGHT_SENSITIVITY = \"Sunlight Sensitivity\",\r\n    FLYBY = \"Flyby\",\r\n    POUNCE = \"Pounce\",\r\n    ILLUMINATION = \"Illumination\",\r\n    DEATH_BURST = \"Death Burst\",\r\n    RECKLESS = \"Reckless\",\r\n    PACK_TACTICS = \"Pack Tactics\",\r\n    AGGRESSIVE = \"Aggressive\",\r\n    TURN_RESISTANCE = \"Turn Resistance\",\r\n    UNDEAD_FORTITUDE = \"Undead Fortitude\",\r\n    WATER_BREATHING = \"Water Breathing\",\r\n    WEB_SENSE = \"Web Sense\",\r\n    WEB_WALKER = \"Web Walker\",\r\n    AMORPHOUS = \"Amorphous\",\r\n    CHARGE = \"Charge\",\r\n    LIGHT_SENSITIVITY = \"Light Sensitivity\",\r\n    RAMPAGE = \"Rampage\"\r\n}\r\n\r\nexport enum LanguageTag {\r\n    C = \"C\",\r\n    DR = \"DR\",\r\n    CS = \"CS\",\r\n    E = \"E\",\r\n    GO = \"GO\",\r\n    O = \"O\",\r\n    CE = \"CE\",\r\n    U = \"U\",\r\n    XX = \"XX\",\r\n    D = \"D\",\r\n    GI = \"GI\",\r\n    DU = \"DU\",\r\n    S = \"S\",\r\n    H = \"H\",\r\n    G = \"G\",\r\n    TC = \"TC\",\r\n    AB = \"AB\",\r\n    I = \"I\",\r\n    AQ = \"AQ\",\r\n    X = \"X\",\r\n    TP = \"TP\",\r\n    P = \"P\",\r\n    OTH = \"OTH\",\r\n    DS = \"DS\",\r\n    AU = \"AU\",\r\n    IG = \"IG\",\r\n    T = \"T\",\r\n    GTH = \"GTH\"\r\n}\r\n\r\nexport enum SpellcastingTag {\r\n    CP = \"CP\",\r\n    CB = \"CB\",\r\n    I = \"I\",\r\n    CL = \"CL\",\r\n    CR = \"CR\",\r\n    CD = \"CD\",\r\n    P = \"P\",\r\n    CC = \"CC\",\r\n    CW = \"CW\",\r\n    CS = \"CS\",\r\n    S = \"S\",\r\n    F = \"F\"\r\n}\r\n\r\nexport enum MiscTag {\r\n    MW = \"MW\",\r\n    RCH = \"RCH\",\r\n    AOE = \"AOE\",\r\n    RW = \"RW\",\r\n    RNG = \"RNG\",\r\n    THW = \"THW\"\r\n}\r\n\r\nexport class MonsterTags {\r\n    constructor(\r\n        readonly actions: ActionTag[],\r\n        readonly damageTags: DamageTag[],\r\n        readonly languageTags: LanguageTag[],\r\n        readonly miscTags: MiscTag[],\r\n        readonly senseTags: SenseTag[],\r\n        readonly spellcastingTags: SpellcastingTag[],\r\n        readonly traitTag: TraitTag[]\r\n    ) {}\r\n}\r\n","export enum Size {\r\n    TINY = \"T\",\r\n    SMALL = \"S\",\r\n    MEDIUM = \"M\",\r\n    LARGE = \"L\",\r\n    HUGE = \"H\",\r\n    GIGANTIC = \"G\"\r\n}\r\n","import { capitalize } from \"lodash\";\r\n\r\nexport enum AbilityScore {\r\n    STR = \"str\",\r\n    DEX = \"dex\",\r\n    CON = \"con\",\r\n    WIS = \"wis\",\r\n    INT = \"int\",\r\n    CHA = \"cha\"\r\n}\r\n\r\nexport const AbilityScores = Object.values(AbilityScore);\r\n\r\nexport function abilityScoreLabel(abilityScore: AbilityScore) {\r\n    return capitalize(abilityScore);\r\n}\r\n\r\nexport class Statistics {\r\n    constructor(\r\n        readonly str: number,\r\n        readonly dex: number,\r\n        readonly con: number,\r\n        readonly wis: number,\r\n        readonly int: number,\r\n        readonly cha: number\r\n    ) {}\r\n}\r\n","import * as t from \"io-ts\";\r\nimport { BaseAlignment } from \"../models/Alignment\";\r\nimport { Condition } from \"../models/Condition\";\r\nimport { DamageType } from \"../models/DamageType\";\r\nimport { DragonCastingColor } from \"../models/DragonCastingColor\";\r\nimport { createEnum } from \"../models/Enums\";\r\nimport { Environment } from \"../models/Environment\";\r\nimport { MonsterGroup } from \"../models/MonsterGroup\";\r\nimport {\r\n    ActionTag,\r\n    DamageTag,\r\n    LanguageTag,\r\n    MiscTag,\r\n    SenseTag,\r\n    SpellcastingTag,\r\n    TraitTag\r\n} from \"../models/MonsterTags\";\r\nimport { Size } from \"../models/Size\";\r\nimport { AbilityScore } from \"../models/Statistics\";\r\n\r\nfunction optional<T extends t.Mixed>(\r\n    type: T\r\n): t.UnionC<[T, t.UndefinedC, t.NullC]> {\r\n    return t.union([type, t.undefined, t.null]);\r\n}\r\n\r\nfunction optionalArray<T extends t.Mixed>(\r\n    type: T\r\n): t.UnionC<[t.ArrayC<T>, t.UndefinedC, t.NullC]> {\r\n    return optional(t.array(type));\r\n}\r\n\r\nconst ComplexACSchema = t.strict({\r\n    ac: t.number,\r\n    from: optionalArray(t.string),\r\n    condition: optional(t.string),\r\n    braces: optional(t.boolean)\r\n});\r\n\r\nconst ACSchema = t.union([t.number, ComplexACSchema]);\r\n\r\nconst SizeSchema = createEnum<Size>(Size, \"Size\");\r\n\r\nconst TypeTag = t.union([\r\n    t.string,\r\n    t.strict({\r\n        tag: t.string,\r\n        prefix: t.string\r\n    })\r\n]);\r\n\r\nconst TypeSchema = t.union([\r\n    t.string,\r\n    t.strict({\r\n        type: t.string,\r\n        tags: optionalArray(TypeTag),\r\n        swarmSize: optional(t.string)\r\n    })\r\n]);\r\n\r\nconst AlignmentsSchema = createEnum<BaseAlignment>(\r\n    BaseAlignment,\r\n    \"BaseAlignment\"\r\n);\r\n\r\nconst ComplexAlignment = t.strict({\r\n    alignment: t.array(AlignmentsSchema),\r\n    chance: optional(t.number)\r\n});\r\n\r\nconst SpecialAlignment = t.strict({\r\n    special: t.string\r\n});\r\n\r\nconst AlignmentSchema = optional(\r\n    t.array(t.union([AlignmentsSchema, ComplexAlignment, SpecialAlignment]))\r\n);\r\n\r\nconst SimpleHealth = t.strict({\r\n    average: t.number,\r\n    formula: t.string\r\n});\r\n\r\nconst SpecialHealth = t.strict({\r\n    special: t.string\r\n});\r\n\r\nconst HealthSchema = t.union([SimpleHealth, SpecialHealth]);\r\n\r\nconst SkillsSchema = t.union([\r\n    t.void,\r\n    t.strict({\r\n        acrobatics: optional(t.string),\r\n        perception: optional(t.string),\r\n        stealth: optional(t.string),\r\n        history: optional(t.string),\r\n        insight: optional(t.string),\r\n        intimidation: optional(t.string),\r\n        persuasion: optional(t.string),\r\n        performance: optional(t.string),\r\n        arcana: optional(t.string),\r\n        investigation: optional(t.string),\r\n        religion: optional(t.string),\r\n        athletics: optional(t.string),\r\n        nature: optional(t.string),\r\n        survival: optional(t.string),\r\n        deception: optional(t.string),\r\n        medicine: optional(t.string),\r\n        \"animal handling\": optional(t.string),\r\n        \"sleight of hand\": optional(t.string),\r\n        other: optional(\r\n            t.array(\r\n                t.strict({\r\n                    oneOf: t.strict({\r\n                        arcana: t.string,\r\n                        history: t.string,\r\n                        nature: t.string,\r\n                        religion: t.string\r\n                    })\r\n                })\r\n            )\r\n        )\r\n    })\r\n]);\r\n\r\nconst SpeedSchema = t.union([\r\n    t.number,\r\n    t.strict({\r\n        number: t.number,\r\n        condition: t.string\r\n    })\r\n]);\r\n\r\nconst SpeedsSchema = t.strict({\r\n    walk: optional(SpeedSchema),\r\n    climb: optional(SpeedSchema),\r\n    fly: optional(SpeedSchema),\r\n    swim: optional(SpeedSchema),\r\n    burrow: optional(SpeedSchema),\r\n    canHover: optional(t.boolean)\r\n});\r\n\r\nconst SavesSchema = t.strict({\r\n    str: optional(t.string),\r\n    dex: optional(t.string),\r\n    con: optional(t.string),\r\n    wis: optional(t.string),\r\n    int: optional(t.string),\r\n    cha: optional(t.string)\r\n});\r\n\r\nconst DamageTypeSchema = createEnum<DamageType>(DamageType, \"DamageType\");\r\nconst ConditionSchema = createEnum<Condition>(Condition, \"Condition\");\r\n\r\nconst DamageImmunitySchema = t.union([\r\n    DamageTypeSchema,\r\n    t.strict({\r\n        immune: t.array(DamageTypeSchema),\r\n        preNote: optional(t.string),\r\n        note: optional(t.string)\r\n    })\r\n]);\r\n\r\nconst ConditionImmunitySchema = optional(\r\n    t.array(\r\n        t.union([\r\n            ConditionSchema,\r\n            t.strict({\r\n                conditionImmune: t.array(ConditionSchema),\r\n                preNote: optional(t.string)\r\n            })\r\n        ])\r\n    )\r\n);\r\n\r\nexport const ChallengeRatingSchema = t.union([\r\n    t.undefined,\r\n    t.string,\r\n    t.strict({\r\n        cr: t.string,\r\n        lair: optional(t.string),\r\n        coven: optional(t.string)\r\n    })\r\n]);\r\n\r\nexport type Entry =\r\n    | string\r\n    | {\r\n          type: \"item\";\r\n          name: string;\r\n          entry: string;\r\n      }\r\n    | {\r\n          type: \"list\";\r\n          items: Entry[];\r\n          style: \"list-hang-notitle\" | null | undefined;\r\n      }\r\n    | {\r\n          type: \"inset\";\r\n          name: string;\r\n          entries: Entry[];\r\n          token: t.TypeOf<typeof PageSourceSchema> | null | undefined;\r\n      }\r\n    | {\r\n          type: \"variantSub\";\r\n          name: string;\r\n          entries: Entry[];\r\n      }\r\n    | {\r\n          type: \"variant\";\r\n          name: string;\r\n          entries: Entry[];\r\n          variantSource: t.TypeOf<typeof SourceSchema> | null | undefined;\r\n      }\r\n    | {\r\n          type: \"inline\";\r\n          entries: Entry[];\r\n      }\r\n    | {\r\n          type: \"entries\";\r\n          name: string | null | undefined;\r\n          entries: Entry[];\r\n      }\r\n    | {\r\n          type: \"link\";\r\n          href: {\r\n              type: \"internal\";\r\n              path: \"variantrules.html\";\r\n              hash: \"madness_dmg\";\r\n          };\r\n          text: string;\r\n      }\r\n    | {\r\n          type: \"table\";\r\n          caption: string | null | undefined;\r\n          colLabels: string[];\r\n          colStyles: string[];\r\n          rows: string[][];\r\n      }\r\n    | ({\r\n          type: \"spellcasting\";\r\n      } & t.TypeOf<typeof SpellcastingSchema>);\r\n\r\nconst EntrySchema: t.Type<Entry> = t.recursion(\"Entry\", () =>\r\n    t.union([\r\n        t.string,\r\n        t.strict({\r\n            type: t.literal(\"list\"),\r\n            items: t.array(EntrySchema),\r\n            style: optional(t.literal(\"list-hang-notitle\"))\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"link\"),\r\n            href: t.strict({\r\n                type: t.literal(\"internal\"),\r\n                path: t.literal(\"variantrules.html\"),\r\n                hash: t.literal(\"madness_dmg\")\r\n            }),\r\n            text: t.string\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"item\"),\r\n            name: t.string,\r\n            entry: t.string\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"inline\"),\r\n            entries: t.array(EntrySchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"entries\"),\r\n            name: optional(t.string),\r\n            entries: t.array(EntrySchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"variantSub\"),\r\n            name: t.string,\r\n            entries: t.array(EntrySchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"inset\"),\r\n            name: t.string,\r\n            entries: t.array(EntrySchema),\r\n            token: optional(PageSourceSchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"variant\"),\r\n            name: t.string,\r\n            entries: t.array(EntrySchema),\r\n            variantSource: optional(SourceSchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"table\"),\r\n            caption: optional(t.string),\r\n            colLabels: t.array(t.string),\r\n            colStyles: t.array(t.string),\r\n            rows: t.array(t.array(t.string))\r\n        }),\r\n        t.intersection([\r\n            t.strict({ type: t.literal(\"spellcasting\") }),\r\n            SpellcastingSchema\r\n        ])\r\n    ])\r\n);\r\n\r\nconst TraitSchema = t.strict({\r\n    type: optional(t.keyof({ entries: null, inset: null })),\r\n    name: t.string,\r\n    entries: t.array(EntrySchema)\r\n});\r\n\r\nconst AbilityScoresSchema = createEnum<AbilityScore>(\r\n    AbilityScore,\r\n    \"AbilityScore\"\r\n);\r\n\r\nconst SpellReference = t.string;\r\n\r\nconst SpellSchema = t.strict({\r\n    lower: optional(t.number),\r\n    slots: optional(t.number),\r\n    spells: t.array(SpellReference)\r\n});\r\n\r\nexport type SpellSlotData = t.TypeOf<typeof SpellSchema>;\r\n\r\nconst SpellcastingSchema = t.strict({\r\n    name: t.string,\r\n    ability: optional(AbilityScoresSchema),\r\n    headerEntries: t.array(t.string),\r\n    footerEntries: optionalArray(t.string),\r\n    will: optionalArray(SpellReference),\r\n    hidden: optional(\r\n        t.array(\r\n            t.keyof({\r\n                daily: null,\r\n                will: null\r\n            })\r\n        )\r\n    ),\r\n    daily: optional(\r\n        t.strict({\r\n            \"1e\": optionalArray(SpellReference),\r\n            \"2e\": optionalArray(SpellReference),\r\n            \"3e\": optionalArray(SpellReference),\r\n            \"1\": optionalArray(SpellReference),\r\n            \"2\": optionalArray(SpellReference),\r\n            \"3\": optionalArray(SpellReference)\r\n        })\r\n    ),\r\n    spells: optional(\r\n        t.strict({\r\n            \"0\": optional(SpellSchema),\r\n            \"1\": optional(SpellSchema),\r\n            \"2\": optional(SpellSchema),\r\n            \"3\": optional(SpellSchema),\r\n            \"4\": optional(SpellSchema),\r\n            \"5\": optional(SpellSchema),\r\n            \"6\": optional(SpellSchema),\r\n            \"7\": optional(SpellSchema),\r\n            \"8\": optional(SpellSchema),\r\n            \"9\": optional(SpellSchema)\r\n        })\r\n    )\r\n});\r\n\r\nconst TagSchema = t.strict({\r\n    actionTags: optionalArray(createEnum<ActionTag>(ActionTag, \"ActionTag\")),\r\n    damageTags: optionalArray(createEnum<DamageTag>(DamageTag, \"DamageTag\")),\r\n    senseTags: optionalArray(createEnum<SenseTag>(SenseTag, \"SenseTag\")),\r\n    traitTags: optionalArray(createEnum<TraitTag>(TraitTag, \"TraitTag\")),\r\n    languageTags: optionalArray(\r\n        createEnum<LanguageTag>(LanguageTag, \"LanguageTag\")\r\n    ),\r\n    spellcastingTags: optionalArray(\r\n        createEnum<SpellcastingTag>(SpellcastingTag, \"SpellcastingTag\")\r\n    ),\r\n    miscTags: optionalArray(createEnum<MiscTag>(MiscTag, \"MiscTag\"))\r\n});\r\n\r\nconst ResistSchema = t.union([\r\n    DamageTypeSchema,\r\n    t.strict({\r\n        resist: t.array(\r\n            t.union([\r\n                DamageTypeSchema,\r\n                t.strict({\r\n                    resist: t.array(DamageTypeSchema),\r\n                    note: t.string\r\n                })\r\n            ])\r\n        ),\r\n        preNote: optional(t.string),\r\n        note: optional(t.string)\r\n    }),\r\n    t.strict({ special: t.string })\r\n]);\r\n\r\nconst LegendaryActionSchema = t.strict({\r\n    name: optional(t.string),\r\n    entries: t.array(EntrySchema)\r\n});\r\n\r\nconst ActionLikeSchema = t.strict({\r\n    name: t.string,\r\n    entries: t.array(EntrySchema)\r\n});\r\n\r\nconst LegendaryGroupSchema = t.strict({\r\n    name: t.string,\r\n    source: t.string\r\n});\r\n\r\nconst VulnerableSchema = t.union([\r\n    DamageTypeSchema,\r\n    t.strict({ vulnerable: t.array(DamageTypeSchema), note: t.string })\r\n]);\r\n\r\nconst MonsterGroupSchema = createEnum<MonsterGroup>(\r\n    MonsterGroup,\r\n    \"MonsterGroup\"\r\n);\r\n\r\nconst PageSourceSchema = t.strict({\r\n    name: t.string,\r\n    source: t.string,\r\n    page: optional(t.number)\r\n});\r\n\r\nconst SourceSchema = t.strict({\r\n    source: t.string,\r\n    page: optional(t.number)\r\n});\r\n\r\nexport const MonsterSchema = t.intersection([\r\n    t.strict({\r\n        name: t.string,\r\n        shortName: optional(t.string),\r\n        source: t.string,\r\n        ac: t.array(ACSchema),\r\n        size: SizeSchema,\r\n        type: TypeSchema,\r\n        alignment: AlignmentSchema,\r\n        hp: HealthSchema,\r\n        str: t.number,\r\n        dex: t.number,\r\n        con: t.number,\r\n        wis: t.number,\r\n        int: t.number,\r\n        cha: t.number,\r\n        skill: SkillsSchema,\r\n        speed: SpeedsSchema,\r\n        save: optional(SavesSchema),\r\n        immune: optionalArray(DamageImmunitySchema),\r\n        resist: optionalArray(ResistSchema),\r\n        conditionImmune: ConditionImmunitySchema,\r\n        senses: optionalArray(t.string),\r\n        languages: optionalArray(t.string),\r\n        cr: ChallengeRatingSchema,\r\n        trait: optionalArray(TraitSchema),\r\n        spellcasting: optionalArray(SpellcastingSchema),\r\n        action: optionalArray(ActionLikeSchema),\r\n        reaction: optionalArray(ActionLikeSchema),\r\n        legendary: optionalArray(LegendaryActionSchema),\r\n        legendaryGroup: optional(LegendaryGroupSchema),\r\n        page: optional(t.number),\r\n        passive: optional(t.number),\r\n        isNpc: optional(t.boolean),\r\n        vulnerable: optionalArray(VulnerableSchema),\r\n        familiar: optional(t.boolean),\r\n        isNamedCreature: optional(t.boolean),\r\n        group: optional(MonsterGroupSchema),\r\n        level: optional(t.number),\r\n        altArt: optionalArray(PageSourceSchema),\r\n        otherSources: optionalArray(SourceSchema),\r\n        variant: optionalArray(EntrySchema),\r\n        legendaryHeader: optionalArray(t.string),\r\n        legendaryActions: optional(t.number),\r\n        soundClip: optional(t.string),\r\n        environment: optionalArray(\r\n            createEnum<Environment>(Environment, \"Environment\")\r\n        ),\r\n        dragonCastingColor: optional(\r\n            createEnum<DragonCastingColor>(\r\n                DragonCastingColor,\r\n                \"DragonCastingColor\"\r\n            )\r\n        ),\r\n        alias: optionalArray(t.string),\r\n        actionNote: optional(t.string)\r\n    }),\r\n    TagSchema\r\n]);\r\n\r\nexport type MonsterData = t.TypeOf<typeof MonsterSchema>;\r\n\r\nexport interface MonsterReference {\r\n    name: string;\r\n    source?: string;\r\n}\r\n\r\nexport interface ExtendedMonster extends Partial<MonsterData> {\r\n    _copy: MonsterReference;\r\n}\r\n\r\nexport function isExtendedMonster(\r\n    monster: MonsterData | ExtendedMonster\r\n): monster is ExtendedMonster {\r\n    return \"_copy\" in monster;\r\n}\r\n\r\nexport function isMonster(\r\n    monster: MonsterData | ExtendedMonster\r\n): monster is MonsterData {\r\n    return !isExtendedMonster(monster);\r\n}\r\n","import { isLeft, Left } from \"fp-ts/lib/Either\";\r\nimport * as t from \"io-ts\";\r\n\r\nfunction printError(original: any, result: Left<t.Errors>) {\r\n    console.log(original);\r\n    result.left.forEach(error => {\r\n        const path = error.context\r\n            .map(c => c.key)\r\n            .filter(k => !!k)\r\n            .join(\".\");\r\n        const value = (JSON.stringify(error.value) || \"undefined\").slice(0, 80);\r\n        console.log(\r\n            `${error.message || \"Invaild value\"} at ${path} got ${value}`\r\n        );\r\n    });\r\n}\r\n\r\nexport function parseData<O>(model: t.Type<O>, data: any): O | null {\r\n    const results = model.decode(data);\r\n    if (isLeft(results)) {\r\n        printError(data, results);\r\n        return null;\r\n    } else {\r\n        return results.right;\r\n    }\r\n}\r\n","export function notNull<T extends {}>(t: T | null | undefined): t is T {\r\n    return t != null;\r\n}\r\n\r\nexport function checkNotNull<T extends {}>(t: T | null | undefined): T {\r\n    if (t == null) {\r\n        throw new Error(\"got null\");\r\n    }\r\n    return t;\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class Action {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","export class ArmorClass {\r\n    constructor(\r\n        readonly ac: number,\r\n        readonly from: string[],\r\n        readonly condition: string\r\n    ) {}\r\n\r\n    format() {\r\n        const from = this.from.length > 0 ? `(${this.from.join(\", \")})` : \"\";\r\n        return `${this.ac} ${from} ${this.condition}`;\r\n    }\r\n}\r\n","import { Size } from \"./Size\";\r\n\r\nexport function formatSize(size: Size): string {\r\n    switch (size) {\r\n        case Size.TINY:\r\n            return \"tiny\";\r\n        case Size.SMALL:\r\n            return \"small\";\r\n        case Size.MEDIUM:\r\n            return \"medium\";\r\n        case Size.LARGE:\r\n            return \"large\";\r\n        case Size.HUGE:\r\n            return \"huge\";\r\n        case Size.GIGANTIC:\r\n            return \"gigantic\";\r\n    }\r\n}\r\n\r\nexport function defaultFormat<T extends { format(): string }>(ts: T[]): string {\r\n    return ts.map(t => t.format()).join(\", \");\r\n}\r\n\r\nexport class Formatter {\r\n    static create(base: string) {\r\n        return new Formatter(base);\r\n    }\r\n    constructor(private base: string) {}\r\n\r\n    private conditions: string[] = [];\r\n\r\n    addCondition(value: string | null, format: (s: string) => string = s => s) {\r\n        if (value != null && value !== \"\") {\r\n            this.conditions.push(`${format(value)}`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    format() {\r\n        return [this.base, ...this.conditions].join(\" \");\r\n    }\r\n}\r\n","import { sentenceCase } from \"../utils/Formatting\";\r\n\r\nexport enum SkillType {\r\n    ACROBATICS = \"acrobatics\",\r\n    PERCEPTION = \"perception\",\r\n    STEALTH = \"stealth\",\r\n    HISTORY = \"history\",\r\n    INSIGHT = \"insight\",\r\n    INTIMIDATION = \"intimidation\",\r\n    PERSUASION = \"persuasion\",\r\n    PERFORMANCE = \"performance\",\r\n    ARCANA = \"arcana\",\r\n    INVESTIGATION = \"investigation\",\r\n    RELIGION = \"religion\",\r\n    ATHLETICS = \"athletics\",\r\n    NATURE = \"nature\",\r\n    SURVIVAL = \"survival\",\r\n    DECEPTION = \"deception\",\r\n    MEDICINE = \"medicine\",\r\n    ANIMAL_HANDLING = \"animal handling\",\r\n    SLEIGHT_OF_HAND = \"sleight of hand\"\r\n}\r\n\r\nexport const SkillTypes = Object.values(SkillType);\r\n\r\nexport function skillLabel(skill: SkillType) {\r\n    return sentenceCase(skill);\r\n}\r\n","import { Formatter } from \"./Formatters\";\r\n\r\nexport class ChallengeRating {\r\n    constructor(\r\n        readonly cr: string,\r\n        readonly lair: string,\r\n        readonly coven: string\r\n    ) {}\r\n\r\n    format() {\r\n        return Formatter.create(this.cr)\r\n            .addCondition(this.lair, s => `Lair: ${s}`)\r\n            .addCondition(this.coven, s => `Coven: ${s}`)\r\n            .format();\r\n    }\r\n}\r\n","export class TextBuilder {\r\n    phrases: string[] = [];\r\n\r\n    add(text: string | null | undefined) {\r\n        if (text != null && text !== \"\") {\r\n            this.phrases.push(text);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    list(items: string[]) {\r\n        if (items.length > 0) {\r\n            this.phrases.push(items.join(\", \"));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    note(callable: (t: TextBuilder) => TextBuilder) {\r\n        const builder = callable(new TextBuilder());\r\n        if (builder.nonEmpty()) {\r\n            this.phrases.push(`(${builder.build()})`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    nonEmpty() {\r\n        return this.phrases.length > 0;\r\n    }\r\n\r\n    build() {\r\n        return this.phrases.join(\" \");\r\n    }\r\n}\r\n","import { TextBuilder } from \"../utils/TextBuilder\";\r\nimport { Condition } from \"./Condition\";\r\n\r\nexport class ConditionImmunity {\r\n    constructor(readonly conditions: Condition[], readonly preNote: string) {}\r\n\r\n    format() {\r\n        return new TextBuilder()\r\n            .add(this.preNote)\r\n            .list(this.conditions)\r\n            .build();\r\n    }\r\n}\r\n","import { MonsterReferenceWithPage } from \"./Monster\";\r\nimport { MonsterSource } from \"./MonsterSource\";\r\n\r\nexport class TextContent {\r\n    constructor(readonly description: string) {}\r\n}\r\n\r\nexport class LabeledContent {\r\n    constructor(readonly label: string, readonly text: string) {}\r\n}\r\n\r\nexport class ListContent {\r\n    constructor(readonly entries: Content[]) {}\r\n}\r\n\r\nexport class InsetContent {\r\n    constructor(\r\n        readonly label: string,\r\n        readonly entries: Content[],\r\n        readonly token?: MonsterReferenceWithPage\r\n    ) {}\r\n}\r\n\r\nexport class VariantContent {\r\n    constructor(\r\n        readonly label: string,\r\n        readonly entries: Content[],\r\n        readonly source?: MonsterSource\r\n    ) {}\r\n}\r\n\r\nexport class SubVariantContent {\r\n    constructor(readonly label: string, readonly entries: Content[]) {}\r\n}\r\n\r\nexport class InlineContent {\r\n    constructor(readonly entries: Content[]) {}\r\n}\r\n\r\nexport class Entries {\r\n    constructor(readonly label: string, readonly entries: Content[]) {}\r\n}\r\n\r\nexport class LinkContent {\r\n    constructor(\r\n        readonly text: string,\r\n        readonly href: { type: string; path: string; hash: string }\r\n    ) {}\r\n}\r\n\r\nexport class TableContent {\r\n    constructor(\r\n        readonly caption: string,\r\n        readonly columnLabels: string[],\r\n        readonly rows: string[][]\r\n    ) {}\r\n}\r\n\r\nexport type Content =\r\n    | TextContent\r\n    | LabeledContent\r\n    | ListContent\r\n    | InsetContent\r\n    | VariantContent\r\n    | SubVariantContent\r\n    | InlineContent\r\n    | LinkContent\r\n    | TableContent;\r\n","import { TextBuilder } from \"../utils/TextBuilder\";\r\nimport { DamageType } from \"./DamageType\";\r\n\r\nexport class DamageModifier {\r\n    constructor(\r\n        readonly damageTypes: DamageType[],\r\n        readonly note: string,\r\n        readonly preNote: string,\r\n        readonly conditional: {\r\n            condition: string;\r\n            damageTypes: DamageType[];\r\n        }[] = []\r\n    ) {}\r\n\r\n    format() {\r\n        return new TextBuilder()\r\n            .add(this.preNote)\r\n            .list(this.damageTypes)\r\n            .note(b => b.add(this.note))\r\n            .note(b =>\r\n                b.list(\r\n                    this.conditional.map(c =>\r\n                        new TextBuilder()\r\n                            .list(c.damageTypes)\r\n                            .note(b => b.add(c.condition))\r\n                            .build()\r\n                    )\r\n                )\r\n            )\r\n            .build();\r\n    }\r\n}\r\n","export class DefaultHealth {\r\n    constructor(readonly average: number, readonly formula: string) {}\r\n    format() {\r\n        return `${this.average} (${this.formula})`;\r\n    }\r\n}\r\n\r\nexport class SpecialHealth {\r\n    constructor(readonly special: string) {}\r\n    format() {\r\n        return this.special;\r\n    }\r\n}\r\n\r\nexport type Health = DefaultHealth | SpecialHealth;\r\n","import { LegendaryAction } from \"./LegendaryAction\";\r\n\r\nexport class Legendary {\r\n    constructor(\r\n        readonly header: string[],\r\n        readonly actions: LegendaryAction[],\r\n        readonly count: number\r\n    ) {}\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class LegendaryAction {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","export class LegendaryGroup {\r\n    constructor(readonly name: string, readonly source: string) {}\r\n}\r\n","import { MonsterReference } from \"../dataModels/MonsterData\";\r\nimport { Action } from \"./Action\";\r\nimport { MonsterAlignment } from \"./Alignment\";\r\nimport { ArmorClass } from \"./ArmorClass\";\r\nimport { ChallengeRating } from \"./ChallengeRating\";\r\nimport { ConditionImmunity } from \"./ConditionImmunity\";\r\nimport { DamageModifier } from \"./DamageModifier\";\r\nimport { DragonCastingColor } from \"./DragonCastingColor\";\r\nimport { Environment } from \"./Environment\";\r\nimport { Health } from \"./Health\";\r\nimport { Legendary } from \"./Legendary\";\r\nimport { LegendaryGroup } from \"./LegendaryGroup\";\r\nimport { MonsterFlags } from \"./MonsterFlags\";\r\nimport { MonsterGroup } from \"./MonsterGroup\";\r\nimport { MonsterNames } from \"./MonsterNames\";\r\nimport { MonsterSource } from \"./MonsterSource\";\r\nimport { MonsterTags } from \"./MonsterTags\";\r\nimport { MonsterType } from \"./MonsterType\";\r\nimport { Reaction } from \"./Reaction\";\r\nimport { SavingThrow } from \"./SavingThrow\";\r\nimport { Size } from \"./Size\";\r\nimport { Skill } from \"./Skill\";\r\nimport { Speed } from \"./Speed\";\r\nimport { Spellcasting } from \"./Spellcasting\";\r\nimport { Statistics } from \"./Statistics\";\r\nimport { Trait } from \"./Trait\";\r\n\r\nexport interface MonsterReferenceWithPage extends MonsterReference {\r\n    page?: number;\r\n}\r\n\r\nexport class Monster {\r\n    constructor(\r\n        readonly name: string,\r\n        readonly names: MonsterNames,\r\n        readonly source: string,\r\n        readonly acs: ArmorClass[],\r\n        readonly size: Size,\r\n        readonly type: MonsterType,\r\n        readonly alignment: MonsterAlignment,\r\n        readonly hp: Health,\r\n        readonly stats: Statistics,\r\n        readonly skills: Skill[],\r\n        readonly speeds: Speed[],\r\n        readonly savingThrows: SavingThrow[],\r\n        readonly damageImmunities: DamageModifier[],\r\n        readonly damageResistance: DamageModifier[],\r\n        readonly conditionImmunities: ConditionImmunity[],\r\n        readonly senses: string[],\r\n        readonly languages: string[],\r\n        readonly challengeRating: ChallengeRating | null,\r\n        readonly traits: Trait[],\r\n        readonly spellcasting: Spellcasting[],\r\n        readonly actions: Action[],\r\n        readonly page: number | null,\r\n        readonly tags: MonsterTags,\r\n        readonly passivePerception: number | null,\r\n        readonly reactions: Reaction[],\r\n        readonly legendary: Legendary | null,\r\n        readonly legendaryGroup: LegendaryGroup | null,\r\n        readonly vulnerabilities: DamageModifier[],\r\n        readonly flags: MonsterFlags,\r\n        readonly group: MonsterGroup | null,\r\n        readonly level: number | null,\r\n        readonly altArt: MonsterReferenceWithPage[],\r\n        readonly otherSources: MonsterSource[],\r\n        readonly soundClip: string,\r\n        readonly environment: Environment[],\r\n        readonly dragonCastingColor: DragonCastingColor | null,\r\n        readonly actionNote: string | null\r\n    ) {}\r\n\r\n    is(reference: MonsterReference) {\r\n        return (\r\n            this.name.toLowerCase() === reference.name.toLowerCase() &&\r\n            (reference.source == null || reference.source === this.source)\r\n        );\r\n    }\r\n\r\n    formatChallengeRating() {\r\n        if (this.challengeRating == null) {\r\n            return \"\";\r\n        }\r\n        return this.challengeRating.cr;\r\n    }\r\n}\r\n","export class MonsterFlags {\r\n    constructor(\r\n        readonly npc: boolean,\r\n        readonly familiar: boolean,\r\n        readonly named: boolean\r\n    ) {}\r\n}\r\n","export class MonsterNames {\r\n    constructor(readonly shortName: string, readonly aliases: string[]) {}\r\n}\r\n","export class MonsterSource {\r\n    constructor(readonly source: string, readonly page?: number) {}\r\n}\r\n","export class Tag {\r\n    constructor(readonly tag: string, readonly prefix: string) {}\r\n}\r\n\r\nexport class MonsterType {\r\n    constructor(readonly type: string, tags: Tag[], swarmSize: string) {}\r\n\r\n    format() {\r\n        return this.type;\r\n    }\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class Reaction {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","import { AbilityScore, abilityScoreLabel } from \"./Statistics\";\r\n\r\nexport class SavingThrow {\r\n    constructor(readonly stat: AbilityScore, readonly value: string) {}\r\n\r\n    format() {\r\n        return `${abilityScoreLabel(this.stat)} ${this.value}`;\r\n    }\r\n}\r\n","export function makeLine(...parts: string[]): string {\r\n    return sentenceCase(parts.join(\" \"));\r\n}\r\n\r\nexport function sentenceCase(line: string): string {\r\n    return line.charAt(0).toLocaleUpperCase() + line.slice(1);\r\n}\r\n","import { skillLabel, SkillType } from \"./SkillType\";\r\n\r\nexport class Skill {\r\n    constructor(readonly type: SkillType, readonly value: string) {}\r\n\r\n    format() {\r\n        return `${skillLabel(this.type)} ${this.value}`;\r\n    }\r\n}\r\n","export enum SpeedType {\r\n    WALK = \"walk\",\r\n    CLIMB = \"climb\",\r\n    SWIM = \"swim\",\r\n    FLY = \"fly\",\r\n    BURROW = \"burrow\"\r\n}\r\n\r\nexport const SpeedTypes = Object.values(SpeedType);\r\n\r\nexport class Speed {\r\n    constructor(\r\n        readonly speedType: SpeedType,\r\n        readonly speed: number,\r\n        readonly condition: string\r\n    ) {}\r\n\r\n    format() {\r\n        if (this.speedType === SpeedType.WALK) {\r\n            return `${this.speed} ft. ${this.condition}`;\r\n        }\r\n        return `${this.speedType} ${this.speed} ft. ${this.condition}`;\r\n    }\r\n}\r\n","export function ordinal(count: number): string {\r\n    switch (count) {\r\n        case 0:\r\n            return \"0th\";\r\n        case 1:\r\n            return \"1st\";\r\n        case 2:\r\n            return \"2nd\";\r\n        case 3:\r\n            return \"3rd\";\r\n        default:\r\n            return `${count}th`;\r\n    }\r\n}\r\n","import { ordinal } from \"../utils/Ordinal\";\r\nimport { pluralize } from \"../utils/Plural\";\r\nimport { AbilityScore } from \"./Statistics\";\r\n\r\nexport class DailyLimit {\r\n    constructor(readonly count: number) {}\r\n\r\n    format() {\r\n        return `${this.count}/day`;\r\n    }\r\n}\r\nexport class NoLimit {\r\n    format() {\r\n        return `At will`;\r\n    }\r\n}\r\n\r\nexport class DailyEachLimit {\r\n    constructor(readonly count: number) {}\r\n\r\n    format() {\r\n        return `${this.count}/day each`;\r\n    }\r\n}\r\n\r\nexport class SpellSlotLimit {\r\n    constructor(\r\n        readonly level: number,\r\n        readonly count: number | undefined,\r\n        readonly lowerLevelRange?: number\r\n    ) {}\r\n\r\n    format() {\r\n        const limit =\r\n            this.count != null\r\n                ? `${this.count} ${pluralize(this.count, \"slot\", \"slots\")}`\r\n                : \"at will\";\r\n        if (this.level === 0) {\r\n            return `Cantrips (${limit})`;\r\n        }\r\n        if (this.lowerLevelRange != null) {\r\n            return `${ordinal(this.lowerLevelRange)}-${ordinal(\r\n                this.level\r\n            )} level (${limit})`;\r\n        }\r\n        return `${ordinal(this.level)} level (${limit})`;\r\n    }\r\n}\r\n\r\nexport type CastingLimit =\r\n    | DailyLimit\r\n    | NoLimit\r\n    | DailyEachLimit\r\n    | SpellSlotLimit;\r\n\r\nexport class Spell {\r\n    static fromList(spells: string[]) {\r\n        return spells.map(s => new Spell(s));\r\n    }\r\n    constructor(readonly spell: string) {}\r\n\r\n    format() {\r\n        return this.spell;\r\n    }\r\n}\r\n\r\nexport class SpellGroup {\r\n    constructor(\r\n        readonly spells: Spell[],\r\n        readonly limit: CastingLimit,\r\n        readonly hidden: boolean\r\n    ) {}\r\n}\r\n\r\nexport class Spellcasting {\r\n    constructor(\r\n        readonly name: string,\r\n        readonly spellcastingAbility: AbilityScore | null,\r\n        readonly header: string[],\r\n        readonly footer: string[],\r\n        readonly spellGroups: SpellGroup[]\r\n    ) {}\r\n}\r\n","export function pluralize(count: number, singular: string, plural: string) {\r\n    if (count === 1) {\r\n        return singular;\r\n    } else {\r\n        return plural;\r\n    }\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class Trait {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","import { Entry, MonsterData, SpellSlotData } from \"../dataModels/MonsterData\";\r\nimport { Action } from \"../models/Action\";\r\nimport { Alignment, MonsterAlignment } from \"../models/Alignment\";\r\nimport { ArmorClass } from \"../models/ArmorClass\";\r\nimport { ChallengeRating } from \"../models/ChallengeRating\";\r\nimport { ConditionImmunity } from \"../models/ConditionImmunity\";\r\nimport { InlineContent, LabeledContent, LinkContent, ListContent, TextContent } from \"../models/Content\";\r\nimport { DamageModifier } from \"../models/DamageModifier\";\r\nimport { DamageType } from \"../models/DamageType\";\r\nimport { DefaultHealth, SpecialHealth } from \"../models/Health\";\r\nimport { Legendary } from \"../models/Legendary\";\r\nimport { LegendaryAction } from \"../models/LegendaryAction\";\r\nimport { LegendaryGroup } from \"../models/LegendaryGroup\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { MonsterFlags } from \"../models/MonsterFlags\";\r\nimport { MonsterNames } from \"../models/MonsterNames\";\r\nimport { MonsterSource } from \"../models/MonsterSource\";\r\nimport { MonsterTags } from \"../models/MonsterTags\";\r\nimport { MonsterType, Tag } from \"../models/MonsterType\";\r\nimport { Reaction } from \"../models/Reaction\";\r\nimport { SavingThrow } from \"../models/SavingThrow\";\r\nimport { Skill } from \"../models/Skill\";\r\nimport { SkillTypes } from \"../models/SkillType\";\r\nimport { Speed, SpeedTypes } from \"../models/Speed\";\r\nimport { CastingLimit, DailyEachLimit, DailyLimit, NoLimit, Spell, Spellcasting, SpellGroup, SpellSlotLimit } from \"../models/Spellcasting\";\r\nimport { AbilityScores, Statistics } from \"../models/Statistics\";\r\nimport { Trait } from \"../models/Trait\";\r\n\r\nfunction toAC(ac: MonsterData[\"ac\"]): ArmorClass[] {\r\n    return ac.map(a => {\r\n        if (typeof a == \"number\") {\r\n            return new ArmorClass(a, [], \"\");\r\n        } else {\r\n            return new ArmorClass(a.ac, a.from || [], a.condition || \"\");\r\n        }\r\n    });\r\n}\r\n\r\nfunction toMonsterType(type: MonsterData[\"type\"]) {\r\n    if (typeof type == \"string\") {\r\n        return new MonsterType(type, [], \"\");\r\n    }\r\n    return new MonsterType(\r\n        type.type,\r\n        (type.tags || []).map(tag => {\r\n            if (typeof tag === \"string\") {\r\n                return new Tag(tag, \"\");\r\n            }\r\n            return new Tag(tag.tag, tag.prefix);\r\n        }),\r\n        type.swarmSize || \"\"\r\n    );\r\n}\r\n\r\nfunction toMonsterAlignment(data: MonsterData[\"alignment\"]) {\r\n    if (data == null) {\r\n        return new MonsterAlignment([], []);\r\n    }\r\n    const special: string[] = [];\r\n    const alignments: Alignment[] = [];\r\n    data.forEach(a => {\r\n        if (typeof a === \"string\") {\r\n            alignments.push(new Alignment(a, 1));\r\n        } else if (\"chance\" in a) {\r\n            a.alignment.forEach(sa => {\r\n                alignments.push(new Alignment(sa, a.chance || 1));\r\n            });\r\n        } else {\r\n            special.push(a.special);\r\n        }\r\n    });\r\n    return new MonsterAlignment(alignments, special);\r\n}\r\n\r\nfunction toMonsterHealth(data: MonsterData[\"hp\"]) {\r\n    if (\"special\" in data) {\r\n        return new SpecialHealth(data.special);\r\n    } else {\r\n        return new DefaultHealth(data.average, data.formula);\r\n    }\r\n}\r\n\r\nfunction toStatistics(data: MonsterData) {\r\n    return new Statistics(\r\n        data.str,\r\n        data.dex,\r\n        data.con,\r\n        data.wis,\r\n        data.int,\r\n        data.cha\r\n    );\r\n}\r\n\r\nfunction toSkills(data: MonsterData[\"skill\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return SkillTypes.map(s => {\r\n        const value = data[s];\r\n        if (value != null) {\r\n            return new Skill(s, value);\r\n        }\r\n        return null;\r\n    }).filter((s): s is Skill => s != null);\r\n}\r\n\r\nfunction toSpeeds(data: MonsterData[\"speed\"]) {\r\n    return SpeedTypes.map(s => {\r\n        const speed = data[s];\r\n        if (speed != null) {\r\n            if (typeof speed === \"number\") {\r\n                return new Speed(s, speed, \"\");\r\n            } else {\r\n                return new Speed(s, speed.number, speed.condition);\r\n            }\r\n        }\r\n        return null;\r\n    }).filter((s): s is Speed => s != null);\r\n}\r\n\r\nfunction toSavingThrows(data: MonsterData[\"save\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return AbilityScores.map(s => {\r\n        const value = data[s];\r\n        if (value != null) {\r\n            return new SavingThrow(s, value);\r\n        } else {\r\n            return null;\r\n        }\r\n    }).filter((s): s is SavingThrow => s != null);\r\n}\r\n\r\nfunction toDamageImmunities(data: MonsterData[\"immune\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(d => {\r\n        if (typeof d === \"string\") {\r\n            return new DamageModifier([d], \"\", \"\");\r\n        } else {\r\n            return new DamageModifier(d.immune, d.note || \"\", d.preNote || \"\");\r\n        }\r\n    });\r\n}\r\n\r\nfunction toConditionImmunities(data: MonsterData[\"conditionImmune\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(c => {\r\n        if (typeof c === \"string\") {\r\n            return new ConditionImmunity([c], \"\");\r\n        } else {\r\n            return new ConditionImmunity(c.conditionImmune, c.preNote || \"\");\r\n        }\r\n    });\r\n}\r\n\r\nfunction toChallengeRating(data: MonsterData[\"cr\"]) {\r\n    if (data == null) {\r\n        return null;\r\n    }\r\n    if (typeof data === \"string\") {\r\n        return new ChallengeRating(data, \"\", \"\");\r\n    }\r\n    return new ChallengeRating(data.cr, data.lair || \"\", data.coven || \"\");\r\n}\r\n\r\nfunction toSubContent(subEntries: any[]) {\r\n    return subEntries.map(se => {\r\n        if (typeof se === \"string\") {\r\n            return new TextContent(se);\r\n        } else if (se.type === \"link\") {\r\n            return new LinkContent(se.text, se.href);\r\n        } else {\r\n            return new LabeledContent(se.name, se.entry);\r\n        }\r\n    });\r\n}\r\n\r\nfunction toTraits(data: MonsterData[\"trait\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(trait => new Trait(trait.name, toContent(trait.entries)));\r\n}\r\n\r\nfunction toSpellcasting(data: MonsterData[\"spellcasting\"]): Spellcasting[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(d => {\r\n        const groups: SpellGroup[] = [];\r\n        if (d.will != null) {\r\n            groups.push(\r\n                new SpellGroup(\r\n                    Spell.fromList(d.will),\r\n                    new NoLimit(),\r\n                    d.hidden != null && d.hidden.includes(\"will\")\r\n                )\r\n            );\r\n        }\r\n        function addDaily(e: string[] | undefined | null, limit: CastingLimit) {\r\n            if (e == null) {\r\n                return;\r\n            }\r\n            groups.push(\r\n                new SpellGroup(\r\n                    Spell.fromList(e),\r\n                    limit,\r\n                    d.hidden != null && d.hidden.includes(\"daily\")\r\n                )\r\n            );\r\n        }\r\n        if (d.daily != null) {\r\n            addDaily(d.daily[\"1e\"], new DailyEachLimit(1));\r\n            addDaily(d.daily[\"2e\"], new DailyEachLimit(1));\r\n            addDaily(d.daily[\"3e\"], new DailyEachLimit(1));\r\n            addDaily(d.daily[\"1\"], new DailyLimit(1));\r\n            addDaily(d.daily[\"2\"], new DailyLimit(1));\r\n            addDaily(d.daily[\"3\"], new DailyLimit(1));\r\n        }\r\n        function addSpellSlot(\r\n            data: SpellSlotData | undefined | null,\r\n            slotLevel: number\r\n        ) {\r\n            if (data == null) {\r\n                return;\r\n            }\r\n            groups.push(\r\n                new SpellGroup(\r\n                    Spell.fromList(data.spells),\r\n                    new SpellSlotLimit(\r\n                        slotLevel,\r\n                        data.slots || undefined,\r\n                        data.lower || undefined\r\n                    ),\r\n                    false\r\n                )\r\n            );\r\n        }\r\n        if (d.spells != null) {\r\n            addSpellSlot(d.spells[\"0\"], 0);\r\n            addSpellSlot(d.spells[\"1\"], 1);\r\n            addSpellSlot(d.spells[\"2\"], 2);\r\n            addSpellSlot(d.spells[\"3\"], 3);\r\n            addSpellSlot(d.spells[\"4\"], 4);\r\n            addSpellSlot(d.spells[\"5\"], 5);\r\n            addSpellSlot(d.spells[\"6\"], 6);\r\n            addSpellSlot(d.spells[\"7\"], 7);\r\n            addSpellSlot(d.spells[\"8\"], 8);\r\n            addSpellSlot(d.spells[\"9\"], 9);\r\n        }\r\n        return new Spellcasting(\r\n            d.name,\r\n            d.ability || null,\r\n            d.headerEntries,\r\n            d.footerEntries || [],\r\n            groups\r\n        );\r\n    });\r\n}\r\n\r\nfunction toContent(entries: Entry[]) {\r\n    return new InlineContent(\r\n        entries.map(e => {\r\n            if (typeof e === \"string\") {\r\n                return new TextContent(e);\r\n            } else if (e.type === \"list\") {\r\n                return new ListContent(toSubContent(e.items));\r\n            } else {\r\n                return new InlineContent(toSubContent((e as any).entries));\r\n            }\r\n        })\r\n    );\r\n}\r\n\r\nfunction toActions(data: MonsterData[\"action\"]): Action[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(\r\n        action => new Action(action.name, toContent(action.entries))\r\n    );\r\n}\r\n\r\nfunction toReactions(data: MonsterData[\"reaction\"]): Reaction[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(\r\n        reaction => new Reaction(reaction.name, toContent(reaction.entries))\r\n    );\r\n}\r\n\r\nconst DEFAULT_LEGENDARY_ACTIONS = 3;\r\n\r\nfunction toLegendary(data: MonsterData): Legendary | null {\r\n    if (data.legendaryHeader == null && data.legendary == null) {\r\n        return null;\r\n    }\r\n    return new Legendary(\r\n        data.legendaryHeader || [],\r\n        (data.legendary || []).map(\r\n            action =>\r\n                new LegendaryAction(\r\n                    action.name || \"\",\r\n                    toContent(action.entries)\r\n                )\r\n        ),\r\n        data.legendaryActions || DEFAULT_LEGENDARY_ACTIONS\r\n    );\r\n}\r\n\r\nfunction toTags(data: MonsterData): MonsterTags {\r\n    return new MonsterTags(\r\n        data.actionTags || [],\r\n        data.damageTags || [],\r\n        data.languageTags || [],\r\n        data.miscTags || [],\r\n        data.senseTags || [],\r\n        data.spellcastingTags || [],\r\n        data.traitTags || []\r\n    );\r\n}\r\n\r\nfunction toDamageResistances(data: MonsterData[\"resist\"]): DamageModifier[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(r => {\r\n        if (typeof r === \"string\") {\r\n            return new DamageModifier([r], \"\", \"\");\r\n        } else if (\"special\" in r) {\r\n            return new DamageModifier([], r.special, \"\");\r\n        } else {\r\n            const special = r.resist\r\n                .filter(\r\n                    (r): r is { resist: DamageType[]; note: string } =>\r\n                        typeof r !== \"string\"\r\n                )\r\n                .map(r => ({\r\n                    damageTypes: r.resist,\r\n                    condition: r.note\r\n                }));\r\n            return new DamageModifier(\r\n                r.resist.filter((r): r is DamageType => typeof r === \"string\"),\r\n                r.note || \"\",\r\n                r.preNote || \"\",\r\n                special\r\n            );\r\n        }\r\n    });\r\n}\r\n\r\nfunction toVulnerabilities(data: MonsterData[\"vulnerable\"]): DamageModifier[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(r => {\r\n        if (typeof r === \"string\") {\r\n            return new DamageModifier([r], \"\", \"\");\r\n        } else {\r\n            return new DamageModifier(r.vulnerable, r.note, \"\");\r\n        }\r\n    });\r\n}\r\n\r\nexport function toMonster(data: MonsterData): Monster {\r\n    return new Monster(\r\n        data.name,\r\n        new MonsterNames(data.shortName || \"\", data.alias || []),\r\n        data.source,\r\n        toAC(data.ac),\r\n        data.size,\r\n        toMonsterType(data.type),\r\n        toMonsterAlignment(data.alignment),\r\n        toMonsterHealth(data.hp),\r\n        toStatistics(data),\r\n        toSkills(data.skill),\r\n        toSpeeds(data.speed),\r\n        toSavingThrows(data.save),\r\n        toDamageImmunities(data.immune),\r\n        toDamageResistances(data.resist),\r\n        toConditionImmunities(data.conditionImmune),\r\n        data.senses || [],\r\n        data.languages || [],\r\n        toChallengeRating(data.cr),\r\n        toTraits(data.trait),\r\n        toSpellcasting(data.spellcasting),\r\n        toActions(data.action),\r\n        data.page || null,\r\n        toTags(data),\r\n        data.passive || null,\r\n        toReactions(data.reaction),\r\n        toLegendary(data),\r\n        data.legendaryGroup != null\r\n            ? new LegendaryGroup(\r\n                  data.legendaryGroup.name,\r\n                  data.legendaryGroup.source\r\n              )\r\n            : null,\r\n        toVulnerabilities(data.vulnerable),\r\n        new MonsterFlags(\r\n            data.isNpc || false,\r\n            data.familiar || false,\r\n            data.isNamedCreature || false\r\n        ),\r\n        data.group || null,\r\n        data.level == null ? null : data.level,\r\n        (data.altArt || []).map(a => ({\r\n            name: a.name,\r\n            source: a.source,\r\n            page: a.page || undefined\r\n        })),\r\n        (data.otherSources || []).map(\r\n            s => new MonsterSource(s.source, s.page || undefined)\r\n        ),\r\n        data.soundClip || \"\",\r\n        data.environment || [],\r\n        data.dragonCastingColor || null,\r\n        data.actionNote || null\r\n    );\r\n}\r\n","import { isObjectLike } from \"lodash\";\r\nimport {\r\n    ExtendedMonster,\r\n    isExtendedMonster,\r\n    isMonster,\r\n    MonsterData,\r\n    MonsterReference,\r\n    MonsterSchema\r\n} from \"../dataModels/MonsterData\";\r\nimport { parseData } from \"../dataModels/Parse\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { notNull } from \"../utils/NotNull\";\r\nimport { HttpService } from \"./HttpService\";\r\nimport { toMonster } from \"./MonsterConverter\";\r\n\r\nfunction url(file: string) {\r\n    return `/data/bestiary/${file}`;\r\n}\r\n\r\ninterface Index {\r\n    [key: string]: string;\r\n}\r\n\r\ninterface Bestiary {\r\n    monster: (MonsterData | ExtendedMonster)[];\r\n}\r\n\r\nfunction find(monsters: Monster[], ref: MonsterReference): Monster {\r\n    const found = monsters.find(m => m.is(ref));\r\n    if (found == null) {\r\n        throw new Error(`Failed to find monster ${JSON.stringify(ref)}`);\r\n    }\r\n    return found;\r\n}\r\n\r\nfunction printEnum(\r\n    monsters: MonsterData[],\r\n    addValues: (set: Set<String>, monster: MonsterData) => void\r\n) {\r\n    const found = new Set<string>();\r\n    monsters.forEach(m => {\r\n        addValues(found, m);\r\n    });\r\n    console.log(\r\n        `export enum Foo {${Array.from(found.values())\r\n            .map(\r\n                v =>\r\n                    `${v\r\n                        .replace(/ /g, \"_\")\r\n                        .replace(/[^a-z_]/gi, \"\")\r\n                        .toLocaleUpperCase()} = \"${v}\"`\r\n            )\r\n            .join(\",\\n\")}}`\r\n    );\r\n}\r\n\r\nlet cache: Promise<Monster[]> | null = null;\r\nexport class MonsterService {\r\n    static all(): Promise<Monster[]> {\r\n        if (cache == null) {\r\n            cache = MonsterService.allRaw();\r\n        }\r\n        return cache;\r\n    }\r\n\r\n    static async allRaw(): Promise<Monster[]> {\r\n        const res = await HttpService.getJson<Index>(url(\"index.json\"));\r\n        let monsters: MonsterData[] = [];\r\n        let extended: ExtendedMonster[] = [];\r\n        for (const key in res) {\r\n            const response = await HttpService.getJson<Bestiary>(url(res[key]));\r\n            monsters = monsters.concat(response.monster.filter(isMonster));\r\n            extended = extended.concat(\r\n                response.monster.filter(isExtendedMonster)\r\n            );\r\n        }\r\n        extended.forEach(m => {\r\n            const reference = m._copy;\r\n            const found = monsters.find(\r\n                mon =>\r\n                    mon.name === reference.name &&\r\n                    (reference.source == null ||\r\n                        reference.source === mon.source)\r\n            );\r\n            if (found == null) {\r\n                throw new Error(\r\n                    `Monster ${JSON.stringify(reference)} not found`\r\n                );\r\n            }\r\n            monsters.push({ ...found, ...m });\r\n        });\r\n        printEnum(monsters, (f, m) => {\r\n            if (m.dragonCastingColor != null) {\r\n                f.add(m.dragonCastingColor);\r\n            }\r\n        });\r\n        const knownKeys = new Map<string, any>();\r\n        const foundKeys = new Set<string>();\r\n        let first = true;\r\n        const mon = monsters\r\n            .map(rawMonster => {\r\n                const monster = parseData(MonsterSchema, rawMonster);\r\n                if (monster == null) {\r\n                    return null;\r\n                }\r\n                Object.keys(rawMonster).forEach(k =>\r\n                    knownKeys.set(k, rawMonster)\r\n                );\r\n                Object.keys(monster).forEach(k => foundKeys.add(k));\r\n                const differentKeys = Object.keys(monster).filter(\r\n                    key =>\r\n                        !isEqual(\r\n                            (rawMonster as any)[key],\r\n                            (monster as any)[key]\r\n                        )\r\n                );\r\n                if (differentKeys.length > 0 && first) {\r\n                    console.error(\"Found different keys\", differentKeys);\r\n                    console.log(monster);\r\n                    console.log(rawMonster);\r\n                    differentKeys.forEach(k =>\r\n                        console.log((monster as any)[k], (rawMonster as any)[k])\r\n                    );\r\n                    first = false;\r\n                }\r\n                return monster;\r\n            })\r\n            .filter(notNull)\r\n            .map(toMonster);\r\n        foundKeys.forEach(k => knownKeys.delete(k));\r\n        console.log(knownKeys);\r\n        return mon;\r\n    }\r\n\r\n    static async get(ref: MonsterReference): Promise<Monster> {\r\n        const all = await MonsterService.all();\r\n        return find(all, ref);\r\n    }\r\n}\r\n\r\nfunction isEqual(left: any, right: any): boolean {\r\n    if (left === right) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(left) && Array.isArray(right)) {\r\n        return (\r\n            left.length === right.length &&\r\n            left.every((l, i) => isEqual(l, right[i]))\r\n        );\r\n    }\r\n    if (isObjectLike(left) && isObjectLike(right)) {\r\n        const keys = new Set([...Object.keys(left), ...Object.keys(right)]);\r\n        return Array.from(keys.values()).every(k => isEqual(left[k], right[k]));\r\n    }\r\n    return false;\r\n}\r\n","export enum TextAnnotation {\r\n    dice = \"dice\",\r\n    dc = \"dc\",\r\n    hit = \"hit\",\r\n    on_hit = \"h\",\r\n    attack = \"atk\",\r\n    damage = \"damage\",\r\n    recharge = \"recharge\"\r\n}\r\n\r\nconst ATTACK_TYPES: { [key: string]: string } = {\r\n    ms: \"Melee Spell Attack:\",\r\n    mw: \"Melee Weapon Attack:\",\r\n    rw: \"Ranged Weapon Attack:\",\r\n    \"mw,rw\": \"Melee or Ranged Weapon Attack:\"\r\n};\r\n\r\nexport class AnnotatedText {\r\n    constructor(readonly annotation: TextAnnotation, readonly text: string) {}\r\n\r\n    format() {\r\n        switch (this.annotation) {\r\n            case TextAnnotation.dc:\r\n                return `DC ${this.text}`;\r\n            case TextAnnotation.hit:\r\n                return `+${this.text}`;\r\n            case TextAnnotation.on_hit:\r\n                return `Hit: `;\r\n            case TextAnnotation.attack:\r\n                return ATTACK_TYPES[this.text] || this.text;\r\n            case TextAnnotation.recharge:\r\n                return this.text !== \"\"\r\n                    ? `(Recharge ${this.text}-6)`\r\n                    : `(Recharge 6)`;\r\n            default:\r\n                return this.text;\r\n        }\r\n    }\r\n}\r\n","export enum EntityType {\r\n    item = \"item\",\r\n    monster = \"monster\",\r\n    creature = \"creature\",\r\n    spell = \"spell\",\r\n    condition = \"condition\",\r\n    skill = \"skill\"\r\n}\r\n","import { AnnotatedText, TextAnnotation } from \"../models/AnnotatedText\";\r\nimport { EntityType } from \"../models/EntityType\";\r\n\r\nexport class Link {\r\n    readonly book?: string;\r\n    constructor(\r\n        readonly type: EntityType,\r\n        readonly name: string,\r\n        book?: string,\r\n        readonly text?: string\r\n    ) {\r\n        if (book != null) {\r\n            this.book = book.toLowerCase();\r\n        }\r\n    }\r\n\r\n    getText() {\r\n        return this.text || this.name;\r\n    }\r\n}\r\n\r\nexport class Text {\r\n    constructor(readonly text: string) {}\r\n}\r\n\r\nexport type Token = Text | Link | AnnotatedText;\r\n\r\nexport function parseText(text: string): Token[] {\r\n    const regex = /(.*?){@(\\w+)(?: (.*?))?}/g;\r\n    let match;\r\n    const out: Token[] = [];\r\n    function push(token: Token) {\r\n        if (token instanceof Text && token.text === \"\") {\r\n            return;\r\n        }\r\n        out.push(token);\r\n    }\r\n    let lastIndex = 0;\r\n    while ((match = regex.exec(text))) {\r\n        push(new Text(match[1]));\r\n        const link = toLink(\r\n            match[2],\r\n            (match[3] || \"\").split(\"|\").map(s => s.trim())\r\n        );\r\n        if (link != null) {\r\n            push(link);\r\n        } else {\r\n            push(new Text(match[0]));\r\n        }\r\n        lastIndex = regex.lastIndex;\r\n    }\r\n    push(new Text(text.substring(lastIndex)));\r\n    return out;\r\n}\r\n\r\nfunction toLink(type: string, values: string[]): Token | null {\r\n    const entityType = Object.values(EntityType).find(t => t === type);\r\n    if (entityType != null) {\r\n        return new Link(entityType, values[0], values[1], values[2]);\r\n    }\r\n    const annotation = Object.values(TextAnnotation).find(t => t === type);\r\n    if (annotation != null) {\r\n        return new AnnotatedText(annotation, values[0]);\r\n    }\r\n    return null;\r\n}\r\n","import React from \"react\";\nimport { Link } from \"../services/LinkedTextParser\";\n\nexport function EntityLink({ entity }: { entity: Link }) {\n    return <a href={`#/${entity.type}`}>{entity.getText()}</a>;\n}\n","import React from \"react\";\r\nimport { AnnotatedText } from \"../models/AnnotatedText\";\r\nimport { Link, parseText } from \"../services/LinkedTextParser\";\r\nimport { EntityLink } from \"./EntityLink\";\r\n\r\nexport function LinkedText({ text }: { text: string }) {\r\n    return (\r\n        <>\r\n            {parseText(text).map((value, i) => {\r\n                if (value instanceof Link) {\r\n                    return <EntityLink entity={value} key={i} />;\r\n                } else if (value instanceof AnnotatedText) {\r\n                    return <em key={i}>{value.format()}</em>;\r\n                } else {\r\n                    return value.text;\r\n                }\r\n            })}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"./Label.css\";\r\nimport { LinkedText } from \"./LinkedText\";\r\n\r\nexport function Label({ children }: { children: string }) {\r\n    return (\r\n        <strong className=\"label\">\r\n            <LinkedText text={children} />\r\n        </strong>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Label } from \"./Label\";\r\nimport { LinkedText } from \"./LinkedText\";\r\n\r\nexport function Definition({ label, text }: { label: string; text: string }) {\r\n    return (\r\n        <div>\r\n            <Label>{label}</Label> <LinkedText text={text}></LinkedText>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { TextBuilder } from \"../utils/TextBuilder\";\r\nimport { Definition } from \"./Definition\";\r\n\r\nexport function ListDefinition({\r\n    values,\r\n    label,\r\n    suffix\r\n}: {\r\n    values: string[];\r\n    label: string;\r\n    suffix?: string | null;\r\n}) {\r\n    if (values.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label={label}\r\n            text={new TextBuilder()\r\n                .list(values)\r\n                .add(suffix)\r\n                .build()}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function ChallengeRating({ monster }: { monster: Monster }) {\r\n    if (monster.challengeRating == null) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition label=\"Challenge\" text={monster.challengeRating.format()} />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function ConditionImmunities({ monster }: { monster: Monster }) {\r\n    if (monster.conditionImmunities.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Condition Immunities\"\r\n            text={defaultFormat(monster.conditionImmunities)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function DamageImmunities({ monster }: { monster: Monster }) {\r\n    if (monster.damageImmunities.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Damage Immunities\"\r\n            text={defaultFormat(monster.damageImmunities)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function DamageResistances({ monster }: { monster: Monster }) {\r\n    if (monster.damageResistance.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Damage Resistances\"\r\n            text={defaultFormat(monster.damageResistance)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function DamageVulnerabilities({ monster }: { monster: Monster }) {\r\n    if (monster.vulnerabilities.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Damage Vulnerabilities\"\r\n            text={defaultFormat(monster.vulnerabilities)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    Content,\r\n    InlineContent,\r\n    InsetContent,\r\n    LabeledContent,\r\n    LinkContent,\r\n    ListContent,\r\n    SubVariantContent,\r\n    TableContent,\r\n    TextContent,\r\n    VariantContent\r\n} from \"../models/Content\";\r\nimport { assertNever } from \"../utils/Never\";\r\nimport { Label } from \"./Label\";\r\nimport { LinkedText } from \"./LinkedText\";\r\n\r\nexport function TableContentDisplay({ content }: { content: TableContent }) {\r\n    return (\r\n        <div>\r\n            {content.caption}\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        {content.columnLabels.map((c, i) => (\r\n                            <th key={i}>{c}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {content.rows.map((r, i) => (\r\n                        <tr key={i}>\r\n                            {r.map((d, j) => (\r\n                                <td key={j}>{i}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function ContentDisplay({ content }: { content: Content }) {\r\n    if (content instanceof TextContent) {\r\n        return <LinkedText text={content.description} />;\r\n    } else if (content instanceof ListContent) {\r\n        return (\r\n            <ul>\r\n                {content.entries.map((e, i) => (\r\n                    <li key={i}>\r\n                        <ContentDisplay content={e} />\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    } else if (content instanceof InlineContent) {\r\n        return (\r\n            <span>\r\n                {content.entries.map((e, i) => (\r\n                    <span key={i}>\r\n                        <ContentDisplay key={i} content={e} />\r\n                    </span>\r\n                ))}\r\n            </span>\r\n        );\r\n    } else if (content instanceof LinkContent) {\r\n        return <a href={content.href.path}>{content.text}</a>;\r\n    } else if (content instanceof LabeledContent) {\r\n        return (\r\n            <span>\r\n                <Label>{content.label}</Label>{\" \"}\r\n                <LinkedText text={content.text} />\r\n            </span>\r\n        );\r\n    } else if (\r\n        content instanceof InsetContent ||\r\n        content instanceof VariantContent ||\r\n        content instanceof SubVariantContent\r\n    ) {\r\n        return (\r\n            <span>\r\n                <Label>{content.label}</Label>{\" \"}\r\n                {content.entries.map((c, i) => (\r\n                    <ContentDisplay key={i} content={c} />\r\n                ))}\r\n            </span>\r\n        );\r\n    } else if (content instanceof TableContent) {\r\n        return <TableContentDisplay content={content} />;\r\n    }\r\n    return assertNever(content);\r\n}\r\n","export function assertNever(x: never): never {\r\n    throw new Error(\"Unexpected value. Should have been never.\");\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { LegendaryAction } from \"../models/LegendaryAction\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nfunction Legendary({\r\n    legendaryAction: action\r\n}: {\r\n    legendaryAction: LegendaryAction;\r\n}) {\r\n    return (\r\n        <div>\r\n            <Label>{action.name}</Label>{\" \"}\r\n            <ContentDisplay content={action.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function LegendaryActions({ monster }: { monster: Monster }) {\r\n    if (monster.legendary == null) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Legendary Actions</h3>\r\n            <p>{monster.legendary.header.join(\" \")}</p>\r\n            {monster.legendary.actions.map((a, i) => (\r\n                <Legendary key={i} legendaryAction={a} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { Action } from \"../models/Action\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nfunction MonsterAction({ action }: { action: Action }) {\r\n    return (\r\n        <div>\r\n            <Label>{action.name}</Label>{\" \"}\r\n            <ContentDisplay content={action.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MonsterActions({ monster }: { monster: Monster }) {\r\n    if (monster.actions.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Actions</h3>\r\n            {monster.actions.map((a, i) => (\r\n                <MonsterAction key={i} action={a} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { Reaction } from \"../models/Reaction\";\r\n\r\nfunction MonsterReaction({ reaction }: { reaction: Reaction }) {\r\n    return (\r\n        <div>\r\n            <Label>{reaction.name}</Label>{\" \"}\r\n            <ContentDisplay content={reaction.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MonsterReactions({ monster }: { monster: Monster }) {\r\n    if (monster.reactions.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Reactions</h3>\r\n            {monster.reactions.map((a, i) => (\r\n                <MonsterReaction key={i} reaction={a} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function MonsterSaves({ monster }: { monster: Monster }) {\r\n    if (monster.savingThrows.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Saving Throws\"\r\n            text={defaultFormat(monster.savingThrows)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function MonsterSkills({ monster }: { monster: Monster }) {\r\n    const { skills } = monster;\r\n    if (skills.length === 0) {\r\n        return null;\r\n    }\r\n    return <Definition label=\"Skills\" text={defaultFormat(skills)} />;\r\n}\r\n","import React from \"react\";\r\nimport { LinkedText } from \"../components/LinkedText\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { SpellGroup } from \"../models/Spellcasting\";\r\n\r\nexport function SpellGroupDisplay({ group }: { group: SpellGroup }) {\r\n    if (group.hidden) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div>\r\n            <span>{group.limit.format()}</span>:{\" \"}\r\n            <LinkedText text={defaultFormat(group.spells)} />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Label } from \"../components/Label\";\r\nimport { LinkedText } from \"../components/LinkedText\";\r\nimport { Spellcasting } from \"../models/Spellcasting\";\r\nimport { SpellGroupDisplay } from \"./SpellGroupDisplay\";\r\n\r\nexport function MonsterSpells({\r\n    spellcasting\r\n}: {\r\n    spellcasting: Spellcasting[];\r\n}) {\r\n    if (spellcasting.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div>\r\n            {spellcasting.map(s => (\r\n                <div key={s.name}>\r\n                    <Label>{s.name}</Label>{\" \"}\r\n                    <LinkedText text={s.header.join(\" \")} />\r\n                    {s.spellGroups.map((g, i) => (\r\n                        <SpellGroupDisplay key={i} group={g} />\r\n                    ))}\r\n                    <LinkedText text={s.footer.join(\" \")} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { Trait } from \"../models/Trait\";\r\n\r\nfunction MonsterTrait({ trait }: { trait: Trait }) {\r\n    return (\r\n        <div>\r\n            <Label>{trait.name}</Label>{\" \"}\r\n            <ContentDisplay content={trait.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MonsterTraits({ monster }: { monster: Monster }) {\r\n    return (\r\n        <>\r\n            {monster.traits.map((t, i) => (\r\n                <MonsterTrait key={i} trait={t} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","export function getMod(value: number) {\n    return Math.floor((value - 10) / 2);\n}\n\nexport function getSignedMod(value: number) {\n    const mod = getMod(value);\n    if (mod >= 0) {\n        return `+${mod}`;\n    } else {\n        return mod.toString();\n    }\n}\n","import React from \"react\";\nimport { Monster } from \"../models/Monster\";\nimport { getSignedMod } from \"../models/Stats\";\nimport \"./StatTable.css\";\n\nfunction Stat({ name, value }: { name: string; value: number }) {\n    return (\n        <div className=\"stat\">\n            <div>{name}</div>\n            <div>\n                {value} ({getSignedMod(value)})\n            </div>\n        </div>\n    );\n}\n\nexport function StatTable({ monster }: { monster: Monster }) {\n    return (\n        <div className=\"stat-table\">\n            <Stat name=\"Str\" value={monster.stats.str} />\n            <Stat name=\"Dex\" value={monster.stats.dex} />\n            <Stat name=\"Con\" value={monster.stats.con} />\n            <Stat name=\"Wis\" value={monster.stats.wis} />\n            <Stat name=\"Int\" value={monster.stats.int} />\n            <Stat name=\"Cha\" value={monster.stats.cha} />\n        </div>\n    );\n}\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { ListDefinition } from \"../components/ListDefinition\";\r\nimport { defaultFormat, formatSize } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { makeLine } from \"../utils/Formatting\";\r\nimport { ChallengeRating } from \"./ChallengeRating\";\r\nimport { ConditionImmunities } from \"./ConditionImmunities\";\r\nimport { DamageImmunities } from \"./DamageImmunities\";\r\nimport { DamageResistances } from \"./DamageResistances\";\r\nimport { DamageVulnerabilities } from \"./DamageVulnerabilities\";\r\nimport { LegendaryActions } from \"./LegendaryActions\";\r\nimport { MonsterActions } from \"./MonsterActions\";\r\nimport { MonsterReactions } from \"./MonsterReactions\";\r\nimport { MonsterSaves } from \"./MonsterSaves\";\r\nimport \"./MonsterSheet.css\";\r\nimport { MonsterSkills } from \"./MonsterSkills\";\r\nimport { MonsterSpells } from \"./MonsterSpells\";\r\nimport { MonsterTraits } from \"./MonsterTraits\";\r\nimport { StatTable } from \"./StatTable\";\r\n\r\nexport function MonsterSheet({ monster }: { monster: Monster }) {\r\n    return (\r\n        <div>\r\n            <h2>{monster.name}</h2>\r\n            <p>\r\n                {makeLine(\r\n                    formatSize(monster.size),\r\n                    monster.type.format() + \",\",\r\n                    monster.alignment.format()\r\n                )}\r\n            </p>\r\n            <hr />\r\n            <Definition label=\"Armor Class\" text={defaultFormat(monster.acs)} />\r\n            <Definition label=\"Hit Points\" text={monster.hp.format()} />\r\n            <Definition label=\"Speed\" text={defaultFormat(monster.speeds)} />\r\n            <hr />\r\n            <StatTable monster={monster} />\r\n            <hr />\r\n            <MonsterSaves monster={monster} />\r\n            <MonsterSkills monster={monster} />\r\n            <DamageResistances monster={monster} />\r\n            <DamageImmunities monster={monster} />\r\n            <DamageVulnerabilities monster={monster} />\r\n            <ConditionImmunities monster={monster} />\r\n            <ListDefinition\r\n                label=\"Senses\"\r\n                values={monster.senses}\r\n                suffix={\r\n                    monster.passivePerception\r\n                        ? `Passive Perception ${monster.passivePerception}`\r\n                        : null\r\n                }\r\n            />\r\n            <ListDefinition label=\"Languages\" values={monster.languages} />\r\n            <ChallengeRating monster={monster} />\r\n            <hr />\r\n            <MonsterTraits monster={monster} />\r\n            <MonsterSpells spellcasting={monster.spellcasting} />\r\n            <hr />\r\n            <MonsterActions monster={monster} />\r\n            <MonsterReactions monster={monster} />\r\n            <LegendaryActions monster={monster} />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { loader } from \"../components/Loader\";\r\nimport { MonsterReference } from \"../dataModels/MonsterData\";\r\nimport { MonsterService } from \"../services/MonsterService\";\r\nimport \"./MonsterCard.css\";\r\nimport { MonsterSheet } from \"./MonsterSheet\";\r\n\r\nexport function MonsterCard({ monster }: { monster: MonsterReference }) {\r\n    return loader(\r\n        () => MonsterService.get(monster),\r\n        monster => (\r\n            <div className=\"monster-card\">\r\n                <MonsterSheet monster={monster} />\r\n            </div>\r\n        ),\r\n        [monster.name, monster.source]\r\n    );\r\n}\r\n","import React, {\r\n    DependencyList,\r\n    ReactElement,\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\n/* eslint-disable react-hooks/rules-of-hooks,react-hooks/exhaustive-deps */\r\nexport function loader<T>(\r\n    loader: () => Promise<T>,\r\n    render: (t: T) => React.ReactNode,\r\n    dependencyList: DependencyList = []\r\n): ReactElement {\r\n    const [data, setData] = useState<T | null>(null);\r\n    useEffect(() => {\r\n        setData(null);\r\n        loader().then(setData);\r\n    }, dependencyList);\r\n\r\n    if (data != null) {\r\n        return <>{render(data)}</>;\r\n    }\r\n    return <span>Loading</span>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Input({\r\n    value,\r\n    onChange,\r\n    placeholder\r\n}: {\r\n    value: string;\r\n    onChange: (newValue: string) => void;\r\n    placeholder?: string;\r\n}) {\r\n    return (\r\n        <input\r\n            className=\"form-control\"\r\n            value={value}\r\n            onChange={e => {\r\n                onChange(e.target.value);\r\n            }}\r\n            placeholder={placeholder}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Scroller.css\";\r\n\r\ninterface ScrollerPosition {\r\n    scrollDistance: number;\r\n    height: number;\r\n}\r\n\r\nexport function Scroller<T>({\r\n    elements,\r\n    render,\r\n    elementHeight\r\n}: {\r\n    elements: T[];\r\n    render: (t: T) => React.ReactNode;\r\n    elementHeight: number;\r\n}) {\r\n    const [position, setPosition] = useState<ScrollerPosition>({\r\n        scrollDistance: 0,\r\n        height: 1000\r\n    });\r\n\r\n    const scrollTarget = useRef<HTMLDivElement>(null);\r\n    const timeout = useRef<number | null>(null);\r\n    function updateScroll(scroller: HTMLDivElement | null | undefined) {\r\n        if (scroller == null) {\r\n            return;\r\n        }\r\n        setPosition({\r\n            scrollDistance: scroller.scrollTop,\r\n            height: scroller.clientHeight\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateScroll(scrollTarget.current);\r\n    }, []);\r\n\r\n    function onScroll() {\r\n        if (timeout.current == null) {\r\n            timeout.current = requestAnimationFrame(() => {\r\n                timeout.current = null;\r\n                updateScroll(scrollTarget.current);\r\n            });\r\n        }\r\n    }\r\n\r\n    const before = Math.floor(position.scrollDistance / elementHeight);\r\n    const count = Math.ceil(position.height / elementHeight) + 1;\r\n    const after = elements.length - before - count;\r\n\r\n    return (\r\n        <div className=\"scroller\" onScroll={onScroll} ref={scrollTarget}>\r\n            <div className=\"scroller__area\">\r\n                <div\r\n                    className=\"scroller__top-padding\"\r\n                    style={{ height: before * elementHeight }}\r\n                />\r\n                {elements.slice(before, before + count).map(render)}\r\n                <div\r\n                    className=\"scroller__bottom-padding\"\r\n                    style={{\r\n                        height: after * elementHeight\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { flatten } from \"lodash\";\r\n\r\ninterface ClassNamesObject {\r\n    [key: string]: boolean;\r\n}\r\n\r\nfunction fromKeys(classes: ClassNamesObject) {\r\n    return Object.keys(classes).filter(c => classes[c]);\r\n}\r\n\r\nexport function classNames(...classes: (ClassNamesObject | string)[]) {\r\n    return flatten(\r\n        classes.map(c => {\r\n            if (typeof c === \"string\") {\r\n                return [c];\r\n            } else {\r\n                return fromKeys(c);\r\n            }\r\n        })\r\n    ).join(\" \");\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Input } from \"../components/Input\";\r\nimport { Scroller } from \"../components/Scroller\";\r\nimport { MonsterReference } from \"../dataModels/MonsterData\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { MonsterService } from \"../services/MonsterService\";\r\nimport { BemBuilder } from \"../utils/BemBuilder\";\r\nimport { classNames } from \"./Classnames\";\r\nimport \"./MonsterList.css\";\r\n\r\nfunction href(ref: MonsterReference) {\r\n    return `/#/monsters?name=${ref.name}&source=${ref.source || \"\"}`;\r\n}\r\n\r\nfunction alphabetic(a: Monster, b: Monster) {\r\n    return a.name.localeCompare(b.name);\r\n}\r\n\r\nconst BEM = new BemBuilder(\"monster-list\");\r\n\r\nexport function MonsterList({\r\n    selected\r\n}: {\r\n    selected: MonsterReference | null;\r\n}) {\r\n    const [monsters, setMonsters] = useState<Monster[] | null>(null);\r\n    useEffect(() => {\r\n        MonsterService.all().then(setMonsters);\r\n    }, []);\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    if (monsters == null) {\r\n        return <span>Loading</span>;\r\n    }\r\n\r\n    function filter(monster: Monster) {\r\n        if (search === \"\") {\r\n            return true;\r\n        }\r\n        return monster.name\r\n            .toLocaleLowerCase()\r\n            .includes(search.toLocaleLowerCase());\r\n    }\r\n\r\n    function isSelected(monster: Monster) {\r\n        return selected != null && monster.is(selected);\r\n    }\r\n\r\n    return (\r\n        <div className={BEM.block}>\r\n            <div>\r\n                <Input\r\n                    value={search}\r\n                    onChange={setSearch}\r\n                    placeholder=\"Search\"\r\n                />\r\n            </div>\r\n            <div className={BEM.element(\"list\")}>\r\n                <Scroller\r\n                    elements={monsters.filter(filter).sort(alphabetic)}\r\n                    render={m => (\r\n                        <a\r\n                            className={classNames(BEM.element(\"item\"), {\r\n                                \"bg-primary text-white\": isSelected(m),\r\n                                \"bg-light\": !isSelected(m)\r\n                            })}\r\n                            key={`${m.name} ${m.source}`}\r\n                            href={href(m)}\r\n                        >\r\n                            <div className={BEM.element(\"name\")}>{m.name}</div>\r\n                            <div className={BEM.element(\"type\")}>\r\n                                {m.type.format()}\r\n                            </div>\r\n                            <div className={BEM.element(\"cr\")}>\r\n                                {m.formatChallengeRating()}\r\n                            </div>\r\n                            <div className={BEM.element(\"source\")}>\r\n                                {m.source}\r\n                            </div>\r\n                        </a>\r\n                    )}\r\n                    elementHeight={32}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport { MonsterCard } from \"./MonsterCard\";\r\nimport { MonsterList } from \"./MonsterList\";\r\nimport \"./MonsterPage.css\";\r\n\r\nfunction useSelectedMonster() {\r\n    const params = new URLSearchParams(useLocation().search);\r\n    const name = params.get(\"name\");\r\n    if (name != null && name !== \"\") {\r\n        const source = params.get(\"source\");\r\n        return {\r\n            name: name,\r\n            source: !!source ? source : undefined\r\n        };\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function MonsterPage() {\r\n    const selected = useSelectedMonster();\r\n    return (\r\n        <div className=\"row monster-page\">\r\n            <div className=\"col monster-page__list\">\r\n                <MonsterList selected={selected} />\r\n            </div>\r\n            <div className=\"col monster-page__card\">\r\n                {selected && <MonsterCard monster={selected} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Navigation } from \"./application/Navigation\";\nimport { ItemPage } from \"./monster/ItemPage\";\nimport { MonsterPage } from \"./monster/MonsterPage\";\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div className=\"container-fluid app\">\n                <Navigation />\n                <Switch>\n                    <Route path=\"/monsters\">\n                        <MonsterPage />\n                    </Route>\n                    <Route path=\"/items\">\n                        <ItemPage />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}