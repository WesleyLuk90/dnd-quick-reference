{"version":3,"sources":["utils/BemBuilder.ts","application/Navigation.tsx","models/Alignment.ts","models/Condition.ts","models/DamageType.ts","models/DragonCastingColor.ts","models/Enums.ts","models/Environment.ts","models/MonsterGroup.ts","models/MonsterTags.ts","models/Size.ts","models/Statistics.ts","models/MonsterData.ts","services/HttpService.ts","models/Action.ts","models/ArmorClass.ts","models/Formatters.ts","models/SkillType.ts","models/ChallengeRating.ts","utils/TextBuilder.ts","models/ConditionImmunity.ts","models/Content.ts","models/DamageModifier.ts","models/Health.ts","models/Legendary.ts","models/LegendaryAction.ts","models/LegendaryGroup.ts","models/Monster.ts","models/MonsterFlags.ts","models/MonsterNames.ts","models/MonsterSource.ts","models/MonsterType.ts","models/Reaction.ts","models/SavingThrow.ts","utils/Formatting.ts","models/Skill.ts","models/Speed.ts","utils/Ordinal.ts","models/Spellcasting.ts","utils/Plural.ts","models/Trait.ts","services/MonsterConverter.ts","services/MonsterService.ts","models/AnnotatedText.ts","models/EntityType.ts","services/LinkedTextParser.ts","components/EntityLink.tsx","components/LinkedText.tsx","components/Label.tsx","components/Definition.tsx","components/ListDefinition.tsx","monster/ChallengeRating.tsx","monster/ConditionImmunities.tsx","monster/DamageImmunities.tsx","monster/DamageResistances.tsx","monster/DamageVulnerabilities.tsx","components/ContentDisplay.tsx","utils/Never.ts","monster/LegendaryActions.tsx","monster/MonsterActions.tsx","monster/MonsterReactions.tsx","monster/MonsterSaves.tsx","monster/MonsterSkills.tsx","monster/SpellGroupDisplay.tsx","monster/MonsterSpells.tsx","monster/MonsterTraits.tsx","models/Stats.ts","monster/StatTable.tsx","monster/MonsterSheet.tsx","monster/MonsterCard.tsx","components/Loader.tsx","components/Input.tsx","components/Scroller.tsx","monster/Classnames.ts","monster/MonsterList.tsx","monster/MonsterPage.tsx","App.tsx","index.tsx"],"names":["BemBuilder","block","element","modifier","condition","this","ITEMS","path","label","exact","BEM","Navigation","className","map","i","key","to","activeClassName","BaseAlignment","Condition","DamageType","DragonCastingColor","names","LAWFUL","NEUTRAL","NEUTRAL_X","NEUTRAL_Y","CHAOTIC","GOOD","EVIL","UNALIGNED","ANY","Alignment","alignment","chance","toFixed","MonsterAlignment","alignments","special","base","a","format","join","length","Environment","MonsterGroup","ActionTag","DamageTag","SenseTag","TraitTag","LanguageTag","SpellcastingTag","MiscTag","createEnum","e","name","keys","Object","forEach","k","t","Size","AbilityScore","MonsterTags","actions","damageTags","languageTags","miscTags","senseTags","spellcastingTags","traitTag","AbilityScores","values","Statistics","str","dex","con","wis","int","cha","optional","type","optionalArray","ComplexACSchema","ac","from","braces","ACSchema","SizeSchema","TypeTag","tag","prefix","TypeSchema","tags","swarmSize","AlignmentsSchema","ComplexAlignment","SpecialAlignment","AlignmentSchema","SimpleHealth","average","formula","SpecialHealth","HealthSchema","SkillsSchema","acrobatics","perception","stealth","history","insight","intimidation","persuasion","performance","arcana","investigation","religion","athletics","nature","survival","deception","medicine","other","oneOf","SpeedSchema","number","SpeedsSchema","walk","climb","fly","swim","burrow","canHover","SavesSchema","DamageTypeSchema","ConditionSchema","DamageImmunitySchema","immune","preNote","note","ConditionImmunitySchema","conditionImmune","ChallengeRatingSchema","cr","lair","coven","EntrySchema","items","style","href","hash","text","entry","entries","token","PageSourceSchema","variantSource","SourceSchema","caption","colLabels","colStyles","rows","SpellcastingSchema","TraitSchema","inset","AbilityScoresSchema","SpellReference","SpellSchema","lower","slots","spells","ability","headerEntries","footerEntries","will","hidden","daily","TagSchema","actionTags","traitTags","ResistSchema","resist","LegendaryActionSchema","ActionLikeSchema","LegendaryGroupSchema","source","VulnerableSchema","vulnerable","MonsterGroupSchema","page","MonsterSchema","shortName","size","hp","skill","speed","save","senses","languages","trait","spellcasting","action","reaction","legendary","legendaryGroup","passive","isNpc","familiar","isNamedCreature","group","level","altArt","otherSources","variant","legendaryHeader","legendaryActions","soundClip","environment","dragonCastingColor","alias","actionNote","isExtendedMonster","monster","isMonster","cache","Map","HttpService","has","get","promise","fetch","then","json","set","Action","content","ArmorClass","defaultFormat","ts","SkillType","Formatter","conditions","value","s","push","ChallengeRating","create","addCondition","TextBuilder","phrases","callable","builder","nonEmpty","build","ConditionImmunity","add","list","TextContent","description","LabeledContent","ListContent","InsetContent","VariantContent","SubVariantContent","InlineContent","LinkContent","TableContent","columnLabels","DamageModifier","damageTypes","conditional","b","c","DefaultHealth","Legendary","header","count","LegendaryAction","LegendaryGroup","Monster","acs","stats","skills","speeds","savingThrows","damageImmunities","damageResistance","conditionImmunities","challengeRating","traits","passivePerception","reactions","vulnerabilities","flags","reference","toLowerCase","MonsterFlags","npc","named","MonsterNames","aliases","MonsterSource","Tag","MonsterType","Reaction","SavingThrow","stat","abilityScore","capitalize","sentenceCase","line","charAt","toLocaleUpperCase","slice","SkillTypes","SpeedType","Skill","SpeedTypes","Speed","speedType","WALK","ordinal","DailyLimit","NoLimit","DailyEachLimit","SpellSlotLimit","lowerLevelRange","singular","plural","limit","Spell","spell","SpellGroup","Spellcasting","spellcastingAbility","footer","spellGroups","Trait","toSubContent","subEntries","se","toContent","DEFAULT_LEGENDARY_ACTIONS","toMonster","data","sa","toMonsterAlignment","toMonsterHealth","toStatistics","filter","toSkills","toSpeeds","toSavingThrows","d","toDamageImmunities","r","toDamageResistances","toConditionImmunities","toChallengeRating","toTraits","groups","addDaily","fromList","includes","addSpellSlot","slotLevel","undefined","toSpellcasting","toActions","toTags","toReactions","toLegendary","toVulnerabilities","url","file","find","monsters","ref","found","m","is","Error","JSON","stringify","printEnum","addValues","Set","console","log","Array","v","replace","printError","monsterData","result","left","error","context","message","MonsterService","allRaw","getJson","res","extended","response","concat","_copy","mon","f","knownKeys","foundKeys","first","decode","isLeft","right","differentKeys","isEqual","delete","all","isArray","every","l","isObjectLike","TextAnnotation","EntityType","ATTACK_TYPES","ms","mw","rw","AnnotatedText","annotation","dc","hit","on_hit","attack","recharge","Link","book","Text","toLink","entityType","EntityLink","entity","getText","LinkedText","match","regex","out","lastIndex","exec","link","split","trim","substring","parseText","Label","children","Definition","ListDefinition","suffix","ConditionImmunities","DamageImmunities","DamageResistances","DamageVulnerabilities","TableContentDisplay","j","ContentDisplay","x","assertNever","legendaryAction","LegendaryActions","MonsterAction","MonsterActions","MonsterReaction","MonsterReactions","MonsterSaves","MonsterSkills","SpellGroupDisplay","MonsterSpells","g","MonsterTrait","MonsterTraits","getSignedMod","mod","Math","floor","getMod","toString","Stat","StatTable","MonsterSheet","parts","makeLine","TINY","SMALL","MEDIUM","LARGE","HUGE","GIGANTIC","formatSize","MonsterCard","loader","render","dependencyList","useState","setData","useEffect","Input","onChange","placeholder","target","Scroller","elements","elementHeight","scrollDistance","height","position","setPosition","scrollTarget","useRef","timeout","updateScroll","scroller","scrollTop","clientHeight","current","before","ceil","after","onScroll","requestAnimationFrame","classNames","classes","flatten","fromKeys","alphabetic","localeCompare","MonsterList","selected","setMonsters","search","setSearch","isSelected","toLocaleLowerCase","sort","formatChallengeRating","MonsterPage","params","URLSearchParams","useLocation","useSelectedMonster","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2eeb9ca2.chunk.js","sourcesContent":["export class BemBuilder {\r\n    constructor(readonly block: string) {}\r\n\r\n    element(element: string, modifier?: string, condition?: boolean) {\r\n        if (modifier != null && (condition == null || condition === true)) {\r\n            return `${this.block}__${element} ${this.block}__${element}--${modifier}`;\r\n        }\r\n        return `${this.block}__${element}`;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { BemBuilder } from \"../utils/BemBuilder\";\r\nimport \"./Navigation.css\";\r\n\r\nconst ITEMS = [\r\n    {\r\n        path: \"\",\r\n        label: \"Home\",\r\n        exact: true\r\n    },\r\n    {\r\n        path: \"monsters\",\r\n        label: \"Monsters\"\r\n    }\r\n];\r\n\r\nconst BEM = new BemBuilder(\"navigation\");\r\n\r\nexport function Navigation() {\r\n    return (\r\n        <nav className={`nav ${BEM.block}`}>\r\n            {ITEMS.map(i => (\r\n                <NavLink\r\n                    key={i.path}\r\n                    to={i.path}\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"border-bottom border-primary\"\r\n                    exact={i.exact}\r\n                >\r\n                    {i.label}\r\n                </NavLink>\r\n            ))}\r\n        </nav>\r\n    );\r\n}\r\n","export enum BaseAlignment {\r\n    LAWFUL = \"L\",\r\n    NEUTRAL = \"N\",\r\n    NEUTRAL_X = \"NX\",\r\n    NEUTRAL_Y = \"NY\",\r\n    CHAOTIC = \"C\",\r\n    GOOD = \"G\",\r\n    EVIL = \"E\",\r\n    UNALIGNED = \"U\",\r\n    ANY = \"A\"\r\n}\r\n\r\nconst names: { [key in BaseAlignment]: string } = {\r\n    [BaseAlignment.LAWFUL]: \"Lawful\",\r\n    [BaseAlignment.NEUTRAL]: \"Neutral\",\r\n    [BaseAlignment.NEUTRAL_X]: \"Neutral X\",\r\n    [BaseAlignment.NEUTRAL_Y]: \"Neutral Y\",\r\n    [BaseAlignment.CHAOTIC]: \"Chaotic\",\r\n    [BaseAlignment.GOOD]: \"Good\",\r\n    [BaseAlignment.EVIL]: \"Evil\",\r\n    [BaseAlignment.UNALIGNED]: \"Unaligned\",\r\n    [BaseAlignment.ANY]: \"Any\"\r\n};\r\n\r\nexport class Alignment {\r\n    constructor(readonly alignment: BaseAlignment, readonly chance: number) {}\r\n\r\n    format() {\r\n        if (this.chance !== 1) {\r\n            return `${names[this.alignment]} (${(this.chance * 100).toFixed(\r\n                0\r\n            )}%)`;\r\n        } else {\r\n            return names[this.alignment];\r\n        }\r\n    }\r\n}\r\n\r\nexport class MonsterAlignment {\r\n    constructor(readonly alignments: Alignment[], readonly special: string[]) {}\r\n\r\n    format() {\r\n        const base = this.alignments.map(a => a.format()).join(\" \");\r\n        if (this.special.length > 0) {\r\n            return `${base} (${this.special.join(\", \")})`;\r\n        }\r\n        return base;\r\n    }\r\n}\r\n","export enum Condition {\r\n    BLINDED = \"blinded\",\r\n    CHARMED = \"charmed\",\r\n    DEAFENED = \"deafened\",\r\n    EXHAUSTION = \"exhaustion\",\r\n    FRIGHTENED = \"frightened\",\r\n    PARALYZED = \"paralyzed\",\r\n    PETRIFIED = \"petrified\",\r\n    POISONED = \"poisoned\",\r\n    PRONE = \"prone\",\r\n    GRAPPLED = \"grappled\",\r\n    RESTRAINED = \"restrained\",\r\n    STUNNED = \"stunned\",\r\n    UNCONSCIOUS = \"unconscious\"\r\n}\r\n","export enum DamageType {\r\n    POISON = \"poison\",\r\n    PSYCHIC = \"psychic\",\r\n    FIRE = \"fire\",\r\n    LIGHTNING = \"lightning\",\r\n    BLUDGEONING = \"bludgeoning\",\r\n    PIERCING = \"piercing\",\r\n    SLASHING = \"slashing\",\r\n    COLD = \"cold\",\r\n    NECROTIC = \"necrotic\",\r\n    THUNDER = \"thunder\",\r\n    ACID = \"acid\",\r\n    FORCE = \"force\",\r\n    RADIANT = \"radiant\"\r\n}\r\n","export enum DragonCastingColor {\r\n    B = \"B\",\r\n    U = \"U\",\r\n    A = \"A\",\r\n    Z = \"Z\",\r\n    C = \"C\",\r\n    O = \"O\",\r\n    G = \"G\",\r\n    R = \"R\",\r\n    S = \"S\",\r\n    W = \"W\"\r\n}\r\n","import * as t from \"io-ts\";\r\n\r\nexport const createEnum = <E>(e: any, name: string): t.Type<E> => {\r\n    const keys: any = {};\r\n    Object.keys(e).forEach(k => {\r\n        keys[e[k]] = null;\r\n    });\r\n    return t.keyof(keys, name) as any;\r\n};\r\n","export enum Environment {\r\n    MOUNTAIN = \"mountain\",\r\n    UNDERDARK = \"underdark\",\r\n    ARCTIC = \"arctic\",\r\n    SWAMP = \"swamp\",\r\n    DESERT = \"desert\",\r\n    COASTAL = \"coastal\",\r\n    HILL = \"hill\",\r\n    GRASSLAND = \"grassland\",\r\n    FOREST = \"forest\",\r\n    URBAN = \"urban\",\r\n    UNDERWATER = \"underwater\"\r\n}\r\n","export enum MonsterGroup {\r\n    LYCANTHROPES = \"Lycanthropes\",\r\n    DINOSAURS = \"Dinosaurs\",\r\n    ANIMATED_OBJECTS = \"Animated Objects\",\r\n    BEHOLDERS = \"Beholders\",\r\n    GENIES = \"Genies\",\r\n    ANGELS = \"Angels\",\r\n    MODRONS = \"Modrons\"\r\n}\r\n","export enum ActionTag {\r\n    MULTIATTACK = \"Multiattack\",\r\n    TENTACLES = \"Tentacles\",\r\n    PARRY = \"Parry\",\r\n    FRIGHTFUL_PRESENCE = \"Frightful Presence\",\r\n    TELEPORT = \"Teleport\",\r\n    SWALLOW = \"Swallow\"\r\n}\r\n\r\nexport enum DamageTag {\r\n    BLUDGEONING = \"B\",\r\n    PIERCING = \"P\",\r\n    FIRE = \"F\",\r\n    ACID = \"A\",\r\n    SLASHING = \"S\",\r\n    RADIANT = \"R\",\r\n    THUNDER = \"T\",\r\n    NECROTIC = \"N\",\r\n    COLD = \"C\",\r\n    LIGHTING = \"L\",\r\n    PSYCHIC = \"Y\",\r\n    POISON = \"I\",\r\n    FORCE = \"O\"\r\n}\r\n\r\nexport enum SenseTag {\r\n    BLINDSIGHT = \"B\",\r\n    DARKVISION = \"D\",\r\n    SUPERIOR_DARKVISION = \"SD\",\r\n    TRUESIGHT = \"U\",\r\n    TREMORSENSE = \"T\"\r\n}\r\n\r\nexport enum TraitTag {\r\n    MAGIC_RESISTANCE = \"Magic Resistance\",\r\n    FALSE_APPEARANCE = \"False Appearance\",\r\n    FEY_ANCESTRY = \"Fey Ancestry\",\r\n    KEEN_SENSES = \"Keen Senses\",\r\n    SNEAK_ATTACK = \"Sneak Attack\",\r\n    AMPHIBIOUS = \"Amphibious\",\r\n    MAGIC_WEAPONS = \"Magic Weapons\",\r\n    IMMUTABLE_FORM = \"Immutable Form\",\r\n    DAMAGE_ABSORPTION = \"Damage Absorption\",\r\n    HOLD_BREATH = \"Hold Breath\",\r\n    LEGENDARY_RESISTANCES = \"Legendary Resistances\",\r\n    REGENERATION = \"Regeneration\",\r\n    DEVILS_SIGHT = \"Devil's Sight\",\r\n    SPIDER_CLIMB = \"Spider Climb\",\r\n    SHAPECHANGER = \"Shapechanger\",\r\n    ANTIMAGIC_SUSCEPTIBILITY = \"Antimagic Susceptibility\",\r\n    SIEGE_MONSTER = \"Siege Monster\",\r\n    BRUTE = \"Brute\",\r\n    INCORPOREAL_MOVEMENT = \"Incorporeal Movement\",\r\n    AMBUSHER = \"Ambusher\",\r\n    REJUVENATION = \"Rejuvenation\",\r\n    TURN_IMMUNITY = \"Turn Immunity\",\r\n    SUNLIGHT_SENSITIVITY = \"Sunlight Sensitivity\",\r\n    FLYBY = \"Flyby\",\r\n    POUNCE = \"Pounce\",\r\n    ILLUMINATION = \"Illumination\",\r\n    DEATH_BURST = \"Death Burst\",\r\n    RECKLESS = \"Reckless\",\r\n    PACK_TACTICS = \"Pack Tactics\",\r\n    AGGRESSIVE = \"Aggressive\",\r\n    TURN_RESISTANCE = \"Turn Resistance\",\r\n    UNDEAD_FORTITUDE = \"Undead Fortitude\",\r\n    WATER_BREATHING = \"Water Breathing\",\r\n    WEB_SENSE = \"Web Sense\",\r\n    WEB_WALKER = \"Web Walker\",\r\n    AMORPHOUS = \"Amorphous\",\r\n    CHARGE = \"Charge\",\r\n    LIGHT_SENSITIVITY = \"Light Sensitivity\",\r\n    RAMPAGE = \"Rampage\"\r\n}\r\n\r\nexport enum LanguageTag {\r\n    C = \"C\",\r\n    DR = \"DR\",\r\n    CS = \"CS\",\r\n    E = \"E\",\r\n    GO = \"GO\",\r\n    O = \"O\",\r\n    CE = \"CE\",\r\n    U = \"U\",\r\n    XX = \"XX\",\r\n    D = \"D\",\r\n    GI = \"GI\",\r\n    DU = \"DU\",\r\n    S = \"S\",\r\n    H = \"H\",\r\n    G = \"G\",\r\n    TC = \"TC\",\r\n    AB = \"AB\",\r\n    I = \"I\",\r\n    AQ = \"AQ\",\r\n    X = \"X\",\r\n    TP = \"TP\",\r\n    P = \"P\",\r\n    OTH = \"OTH\",\r\n    DS = \"DS\",\r\n    AU = \"AU\",\r\n    IG = \"IG\",\r\n    T = \"T\",\r\n    GTH = \"GTH\"\r\n}\r\n\r\nexport enum SpellcastingTag {\r\n    CP = \"CP\",\r\n    CB = \"CB\",\r\n    I = \"I\",\r\n    CL = \"CL\",\r\n    CR = \"CR\",\r\n    CD = \"CD\",\r\n    P = \"P\",\r\n    CC = \"CC\",\r\n    CW = \"CW\",\r\n    CS = \"CS\",\r\n    S = \"S\",\r\n    F = \"F\"\r\n}\r\n\r\nexport enum MiscTag {\r\n    MW = \"MW\",\r\n    RCH = \"RCH\",\r\n    AOE = \"AOE\",\r\n    RW = \"RW\",\r\n    RNG = \"RNG\",\r\n    THW = \"THW\"\r\n}\r\n\r\nexport class MonsterTags {\r\n    constructor(\r\n        readonly actions: ActionTag[],\r\n        readonly damageTags: DamageTag[],\r\n        readonly languageTags: LanguageTag[],\r\n        readonly miscTags: MiscTag[],\r\n        readonly senseTags: SenseTag[],\r\n        readonly spellcastingTags: SpellcastingTag[],\r\n        readonly traitTag: TraitTag[]\r\n    ) {}\r\n}\r\n","export enum Size {\r\n    TINY = \"T\",\r\n    SMALL = \"S\",\r\n    MEDIUM = \"M\",\r\n    LARGE = \"L\",\r\n    HUGE = \"H\",\r\n    GIGANTIC = \"G\"\r\n}\r\n","import { capitalize } from \"lodash\";\r\n\r\nexport enum AbilityScore {\r\n    STR = \"str\",\r\n    DEX = \"dex\",\r\n    CON = \"con\",\r\n    WIS = \"wis\",\r\n    INT = \"int\",\r\n    CHA = \"cha\"\r\n}\r\n\r\nexport const AbilityScores = Object.values(AbilityScore);\r\n\r\nexport function abilityScoreLabel(abilityScore: AbilityScore) {\r\n    return capitalize(abilityScore);\r\n}\r\n\r\nexport class Statistics {\r\n    constructor(\r\n        readonly str: number,\r\n        readonly dex: number,\r\n        readonly con: number,\r\n        readonly wis: number,\r\n        readonly int: number,\r\n        readonly cha: number\r\n    ) {}\r\n}\r\n","import * as t from \"io-ts\";\r\nimport { BaseAlignment } from \"./Alignment\";\r\nimport { Condition } from \"./Condition\";\r\nimport { DamageType } from \"./DamageType\";\r\nimport { DragonCastingColor } from \"./DragonCastingColor\";\r\nimport { createEnum } from \"./Enums\";\r\nimport { Environment } from \"./Environment\";\r\nimport { MonsterGroup } from \"./MonsterGroup\";\r\nimport {\r\n    ActionTag,\r\n    DamageTag,\r\n    LanguageTag,\r\n    MiscTag,\r\n    SenseTag,\r\n    SpellcastingTag,\r\n    TraitTag\r\n} from \"./MonsterTags\";\r\nimport { Size } from \"./Size\";\r\nimport { AbilityScore } from \"./Statistics\";\r\n\r\nfunction optional<T extends t.Mixed>(\r\n    type: T\r\n): t.UnionC<[T, t.UndefinedC, t.NullC]> {\r\n    return t.union([type, t.undefined, t.null]);\r\n}\r\n\r\nfunction optionalArray<T extends t.Mixed>(\r\n    type: T\r\n): t.UnionC<[t.ArrayC<T>, t.UndefinedC, t.NullC]> {\r\n    return optional(t.array(type));\r\n}\r\n\r\nconst ComplexACSchema = t.strict({\r\n    ac: t.number,\r\n    from: optionalArray(t.string),\r\n    condition: optional(t.string),\r\n    braces: optional(t.boolean)\r\n});\r\n\r\nconst ACSchema = t.union([t.number, ComplexACSchema]);\r\n\r\nconst SizeSchema = createEnum<Size>(Size, \"Size\");\r\n\r\nconst TypeTag = t.union([\r\n    t.string,\r\n    t.strict({\r\n        tag: t.string,\r\n        prefix: t.string\r\n    })\r\n]);\r\n\r\nconst TypeSchema = t.union([\r\n    t.string,\r\n    t.strict({\r\n        type: t.string,\r\n        tags: optionalArray(TypeTag),\r\n        swarmSize: optional(t.string)\r\n    })\r\n]);\r\n\r\nconst AlignmentsSchema = createEnum<BaseAlignment>(\r\n    BaseAlignment,\r\n    \"BaseAlignment\"\r\n);\r\n\r\nconst ComplexAlignment = t.strict({\r\n    alignment: t.array(AlignmentsSchema),\r\n    chance: optional(t.number)\r\n});\r\n\r\nconst SpecialAlignment = t.strict({\r\n    special: t.string\r\n});\r\n\r\nconst AlignmentSchema = optional(\r\n    t.array(t.union([AlignmentsSchema, ComplexAlignment, SpecialAlignment]))\r\n);\r\n\r\nconst SimpleHealth = t.strict({\r\n    average: t.number,\r\n    formula: t.string\r\n});\r\n\r\nconst SpecialHealth = t.strict({\r\n    special: t.string\r\n});\r\n\r\nconst HealthSchema = t.union([SimpleHealth, SpecialHealth]);\r\n\r\nconst SkillsSchema = t.union([\r\n    t.void,\r\n    t.strict({\r\n        acrobatics: optional(t.string),\r\n        perception: optional(t.string),\r\n        stealth: optional(t.string),\r\n        history: optional(t.string),\r\n        insight: optional(t.string),\r\n        intimidation: optional(t.string),\r\n        persuasion: optional(t.string),\r\n        performance: optional(t.string),\r\n        arcana: optional(t.string),\r\n        investigation: optional(t.string),\r\n        religion: optional(t.string),\r\n        athletics: optional(t.string),\r\n        nature: optional(t.string),\r\n        survival: optional(t.string),\r\n        deception: optional(t.string),\r\n        medicine: optional(t.string),\r\n        \"animal handling\": optional(t.string),\r\n        \"sleight of hand\": optional(t.string),\r\n        other: optional(\r\n            t.array(\r\n                t.strict({\r\n                    oneOf: t.strict({\r\n                        arcana: t.string,\r\n                        history: t.string,\r\n                        nature: t.string,\r\n                        religion: t.string\r\n                    })\r\n                })\r\n            )\r\n        )\r\n    })\r\n]);\r\n\r\nconst SpeedSchema = t.union([\r\n    t.number,\r\n    t.strict({\r\n        number: t.number,\r\n        condition: t.string\r\n    })\r\n]);\r\n\r\nconst SpeedsSchema = t.strict({\r\n    walk: optional(SpeedSchema),\r\n    climb: optional(SpeedSchema),\r\n    fly: optional(SpeedSchema),\r\n    swim: optional(SpeedSchema),\r\n    burrow: optional(SpeedSchema),\r\n    canHover: optional(t.boolean)\r\n});\r\n\r\nconst SavesSchema = t.strict({\r\n    str: optional(t.string),\r\n    dex: optional(t.string),\r\n    con: optional(t.string),\r\n    wis: optional(t.string),\r\n    int: optional(t.string),\r\n    cha: optional(t.string)\r\n});\r\n\r\nconst DamageTypeSchema = createEnum<DamageType>(DamageType, \"DamageType\");\r\nconst ConditionSchema = createEnum<Condition>(Condition, \"Condition\");\r\n\r\nconst DamageImmunitySchema = t.union([\r\n    DamageTypeSchema,\r\n    t.strict({\r\n        immune: t.array(DamageTypeSchema),\r\n        preNote: optional(t.string),\r\n        note: optional(t.string)\r\n    })\r\n]);\r\n\r\nconst ConditionImmunitySchema = optional(\r\n    t.array(\r\n        t.union([\r\n            ConditionSchema,\r\n            t.strict({\r\n                conditionImmune: t.array(ConditionSchema),\r\n                preNote: optional(t.string)\r\n            })\r\n        ])\r\n    )\r\n);\r\n\r\nexport const ChallengeRatingSchema = t.union([\r\n    t.undefined,\r\n    t.string,\r\n    t.strict({\r\n        cr: t.string,\r\n        lair: optional(t.string),\r\n        coven: optional(t.string)\r\n    })\r\n]);\r\n\r\nexport type Entry =\r\n    | string\r\n    | {\r\n          type: \"item\";\r\n          name: string;\r\n          entry: string;\r\n      }\r\n    | {\r\n          type: \"list\";\r\n          items: Entry[];\r\n          style: \"list-hang-notitle\" | null | undefined;\r\n      }\r\n    | {\r\n          type: \"inset\";\r\n          name: string;\r\n          entries: Entry[];\r\n          token: t.TypeOf<typeof PageSourceSchema> | null | undefined;\r\n      }\r\n    | {\r\n          type: \"variantSub\";\r\n          name: string;\r\n          entries: Entry[];\r\n      }\r\n    | {\r\n          type: \"variant\";\r\n          name: string;\r\n          entries: Entry[];\r\n          variantSource: t.TypeOf<typeof SourceSchema> | null | undefined;\r\n      }\r\n    | {\r\n          type: \"inline\";\r\n          entries: Entry[];\r\n      }\r\n    | {\r\n          type: \"entries\";\r\n          name: string | null | undefined;\r\n          entries: Entry[];\r\n      }\r\n    | {\r\n          type: \"link\";\r\n          href: {\r\n              type: \"internal\";\r\n              path: \"variantrules.html\";\r\n              hash: \"madness_dmg\";\r\n          };\r\n          text: string;\r\n      }\r\n    | {\r\n          type: \"table\";\r\n          caption: string | null | undefined;\r\n          colLabels: string[];\r\n          colStyles: string[];\r\n          rows: string[][];\r\n      }\r\n    | ({\r\n          type: \"spellcasting\";\r\n      } & t.TypeOf<typeof SpellcastingSchema>);\r\n\r\nconst EntrySchema: t.Type<Entry> = t.recursion(\"Entry\", () =>\r\n    t.union([\r\n        t.string,\r\n        t.strict({\r\n            type: t.literal(\"list\"),\r\n            items: t.array(EntrySchema),\r\n            style: optional(t.literal(\"list-hang-notitle\"))\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"link\"),\r\n            href: t.strict({\r\n                type: t.literal(\"internal\"),\r\n                path: t.literal(\"variantrules.html\"),\r\n                hash: t.literal(\"madness_dmg\")\r\n            }),\r\n            text: t.string\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"item\"),\r\n            name: t.string,\r\n            entry: t.string\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"inline\"),\r\n            entries: t.array(EntrySchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"entries\"),\r\n            name: optional(t.string),\r\n            entries: t.array(EntrySchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"variantSub\"),\r\n            name: t.string,\r\n            entries: t.array(EntrySchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"inset\"),\r\n            name: t.string,\r\n            entries: t.array(EntrySchema),\r\n            token: optional(PageSourceSchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"variant\"),\r\n            name: t.string,\r\n            entries: t.array(EntrySchema),\r\n            variantSource: optional(SourceSchema)\r\n        }),\r\n        t.strict({\r\n            type: t.literal(\"table\"),\r\n            caption: optional(t.string),\r\n            colLabels: t.array(t.string),\r\n            colStyles: t.array(t.string),\r\n            rows: t.array(t.array(t.string))\r\n        }),\r\n        t.intersection([\r\n            t.strict({ type: t.literal(\"spellcasting\") }),\r\n            SpellcastingSchema\r\n        ])\r\n    ])\r\n);\r\n\r\nconst TraitSchema = t.strict({\r\n    type: optional(t.keyof({ entries: null, inset: null })),\r\n    name: t.string,\r\n    entries: t.array(EntrySchema)\r\n});\r\n\r\nconst AbilityScoresSchema = createEnum<AbilityScore>(\r\n    AbilityScore,\r\n    \"AbilityScore\"\r\n);\r\n\r\nconst SpellReference = t.string;\r\n\r\nconst SpellSchema = t.strict({\r\n    lower: optional(t.number),\r\n    slots: optional(t.number),\r\n    spells: t.array(SpellReference)\r\n});\r\n\r\nexport type SpellSlotData = t.TypeOf<typeof SpellSchema>;\r\n\r\nconst SpellcastingSchema = t.strict({\r\n    name: t.string,\r\n    ability: optional(AbilityScoresSchema),\r\n    headerEntries: t.array(t.string),\r\n    footerEntries: optionalArray(t.string),\r\n    will: optionalArray(SpellReference),\r\n    hidden: optional(\r\n        t.array(\r\n            t.keyof({\r\n                daily: null,\r\n                will: null\r\n            })\r\n        )\r\n    ),\r\n    daily: optional(\r\n        t.strict({\r\n            \"1e\": optionalArray(SpellReference),\r\n            \"2e\": optionalArray(SpellReference),\r\n            \"3e\": optionalArray(SpellReference),\r\n            \"1\": optionalArray(SpellReference),\r\n            \"2\": optionalArray(SpellReference),\r\n            \"3\": optionalArray(SpellReference)\r\n        })\r\n    ),\r\n    spells: optional(\r\n        t.strict({\r\n            \"0\": optional(SpellSchema),\r\n            \"1\": optional(SpellSchema),\r\n            \"2\": optional(SpellSchema),\r\n            \"3\": optional(SpellSchema),\r\n            \"4\": optional(SpellSchema),\r\n            \"5\": optional(SpellSchema),\r\n            \"6\": optional(SpellSchema),\r\n            \"7\": optional(SpellSchema),\r\n            \"8\": optional(SpellSchema),\r\n            \"9\": optional(SpellSchema)\r\n        })\r\n    )\r\n});\r\n\r\nconst TagSchema = t.strict({\r\n    actionTags: optionalArray(createEnum<ActionTag>(ActionTag, \"ActionTag\")),\r\n    damageTags: optionalArray(createEnum<DamageTag>(DamageTag, \"DamageTag\")),\r\n    senseTags: optionalArray(createEnum<SenseTag>(SenseTag, \"SenseTag\")),\r\n    traitTags: optionalArray(createEnum<TraitTag>(TraitTag, \"TraitTag\")),\r\n    languageTags: optionalArray(\r\n        createEnum<LanguageTag>(LanguageTag, \"LanguageTag\")\r\n    ),\r\n    spellcastingTags: optionalArray(\r\n        createEnum<SpellcastingTag>(SpellcastingTag, \"SpellcastingTag\")\r\n    ),\r\n    miscTags: optionalArray(createEnum<MiscTag>(MiscTag, \"MiscTag\"))\r\n});\r\n\r\nconst ResistSchema = t.union([\r\n    DamageTypeSchema,\r\n    t.strict({\r\n        resist: t.array(\r\n            t.union([\r\n                DamageTypeSchema,\r\n                t.strict({\r\n                    resist: t.array(DamageTypeSchema),\r\n                    note: t.string\r\n                })\r\n            ])\r\n        ),\r\n        preNote: optional(t.string),\r\n        note: optional(t.string)\r\n    }),\r\n    t.strict({ special: t.string })\r\n]);\r\n\r\nconst LegendaryActionSchema = t.strict({\r\n    name: optional(t.string),\r\n    entries: t.array(EntrySchema)\r\n});\r\n\r\nconst ActionLikeSchema = t.strict({\r\n    name: t.string,\r\n    entries: t.array(EntrySchema)\r\n});\r\n\r\nconst LegendaryGroupSchema = t.strict({\r\n    name: t.string,\r\n    source: t.string\r\n});\r\n\r\nconst VulnerableSchema = t.union([\r\n    DamageTypeSchema,\r\n    t.strict({ vulnerable: t.array(DamageTypeSchema), note: t.string })\r\n]);\r\n\r\nconst MonsterGroupSchema = createEnum<MonsterGroup>(\r\n    MonsterGroup,\r\n    \"MonsterGroup\"\r\n);\r\n\r\nconst PageSourceSchema = t.strict({\r\n    name: t.string,\r\n    source: t.string,\r\n    page: optional(t.number)\r\n});\r\n\r\nconst SourceSchema = t.strict({\r\n    source: t.string,\r\n    page: optional(t.number)\r\n});\r\n\r\nexport const MonsterSchema = t.intersection([\r\n    t.strict({\r\n        name: t.string,\r\n        shortName: optional(t.string),\r\n        source: t.string,\r\n        ac: t.array(ACSchema),\r\n        size: SizeSchema,\r\n        type: TypeSchema,\r\n        alignment: AlignmentSchema,\r\n        hp: HealthSchema,\r\n        str: t.number,\r\n        dex: t.number,\r\n        con: t.number,\r\n        wis: t.number,\r\n        int: t.number,\r\n        cha: t.number,\r\n        skill: SkillsSchema,\r\n        speed: SpeedsSchema,\r\n        save: optional(SavesSchema),\r\n        immune: optionalArray(DamageImmunitySchema),\r\n        resist: optionalArray(ResistSchema),\r\n        conditionImmune: ConditionImmunitySchema,\r\n        senses: optionalArray(t.string),\r\n        languages: optionalArray(t.string),\r\n        cr: ChallengeRatingSchema,\r\n        trait: optionalArray(TraitSchema),\r\n        spellcasting: optionalArray(SpellcastingSchema),\r\n        action: optionalArray(ActionLikeSchema),\r\n        reaction: optionalArray(ActionLikeSchema),\r\n        legendary: optionalArray(LegendaryActionSchema),\r\n        legendaryGroup: optional(LegendaryGroupSchema),\r\n        page: optional(t.number),\r\n        passive: optional(t.number),\r\n        isNpc: optional(t.boolean),\r\n        vulnerable: optionalArray(VulnerableSchema),\r\n        familiar: optional(t.boolean),\r\n        isNamedCreature: optional(t.boolean),\r\n        group: optional(MonsterGroupSchema),\r\n        level: optional(t.number),\r\n        altArt: optionalArray(PageSourceSchema),\r\n        otherSources: optionalArray(SourceSchema),\r\n        variant: optionalArray(EntrySchema),\r\n        legendaryHeader: optionalArray(t.string),\r\n        legendaryActions: optional(t.number),\r\n        soundClip: optional(t.string),\r\n        environment: optionalArray(\r\n            createEnum<Environment>(Environment, \"Environment\")\r\n        ),\r\n        dragonCastingColor: optional(\r\n            createEnum<DragonCastingColor>(\r\n                DragonCastingColor,\r\n                \"DragonCastingColor\"\r\n            )\r\n        ),\r\n        alias: optionalArray(t.string),\r\n        actionNote: optional(t.string)\r\n    }),\r\n    TagSchema\r\n]);\r\n\r\nexport type MonsterData = t.TypeOf<typeof MonsterSchema>;\r\n\r\nexport interface MonsterReference {\r\n    name: string;\r\n    source?: string;\r\n}\r\n\r\nexport interface ExtendedMonster extends Partial<MonsterData> {\r\n    _copy: MonsterReference;\r\n}\r\n\r\nexport function isExtendedMonster(\r\n    monster: MonsterData | ExtendedMonster\r\n): monster is ExtendedMonster {\r\n    return \"_copy\" in monster;\r\n}\r\n\r\nexport function isMonster(\r\n    monster: MonsterData | ExtendedMonster\r\n): monster is MonsterData {\r\n    return !isExtendedMonster(monster);\r\n}\r\n","const cache: Map<string, Promise<any>> = new Map();\r\n\r\nexport class HttpService {\r\n    static async getJson<T>(path: string): Promise<T> {\r\n        if (cache.has(path)) {\r\n            return cache.get(path);\r\n        }\r\n        const promise = fetch(path).then(t => t.json());\r\n        cache.set(path, promise);\r\n        return promise;\r\n    }\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class Action {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","export class ArmorClass {\r\n    constructor(\r\n        readonly ac: number,\r\n        readonly from: string[],\r\n        readonly condition: string\r\n    ) {}\r\n\r\n    format() {\r\n        const from = this.from.length > 0 ? `(${this.from.join(\", \")})` : \"\";\r\n        return `${this.ac} ${from} ${this.condition}`;\r\n    }\r\n}\r\n","import { Size } from \"./Size\";\r\n\r\nexport function formatSize(size: Size): string {\r\n    switch (size) {\r\n        case Size.TINY:\r\n            return \"tiny\";\r\n        case Size.SMALL:\r\n            return \"small\";\r\n        case Size.MEDIUM:\r\n            return \"medium\";\r\n        case Size.LARGE:\r\n            return \"large\";\r\n        case Size.HUGE:\r\n            return \"huge\";\r\n        case Size.GIGANTIC:\r\n            return \"gigantic\";\r\n    }\r\n}\r\n\r\nexport function defaultFormat<T extends { format(): string }>(ts: T[]): string {\r\n    return ts.map(t => t.format()).join(\", \");\r\n}\r\n\r\nexport class Formatter {\r\n    static create(base: string) {\r\n        return new Formatter(base);\r\n    }\r\n    constructor(private base: string) {}\r\n\r\n    private conditions: string[] = [];\r\n\r\n    addCondition(value: string | null, format: (s: string) => string = s => s) {\r\n        if (value != null && value !== \"\") {\r\n            this.conditions.push(`${format(value)}`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    format() {\r\n        return [this.base, ...this.conditions].join(\" \");\r\n    }\r\n}\r\n","import { sentenceCase } from \"../utils/Formatting\";\r\n\r\nexport enum SkillType {\r\n    ACROBATICS = \"acrobatics\",\r\n    PERCEPTION = \"perception\",\r\n    STEALTH = \"stealth\",\r\n    HISTORY = \"history\",\r\n    INSIGHT = \"insight\",\r\n    INTIMIDATION = \"intimidation\",\r\n    PERSUASION = \"persuasion\",\r\n    PERFORMANCE = \"performance\",\r\n    ARCANA = \"arcana\",\r\n    INVESTIGATION = \"investigation\",\r\n    RELIGION = \"religion\",\r\n    ATHLETICS = \"athletics\",\r\n    NATURE = \"nature\",\r\n    SURVIVAL = \"survival\",\r\n    DECEPTION = \"deception\",\r\n    MEDICINE = \"medicine\",\r\n    ANIMAL_HANDLING = \"animal handling\",\r\n    SLEIGHT_OF_HAND = \"sleight of hand\"\r\n}\r\n\r\nexport const SkillTypes = Object.values(SkillType);\r\n\r\nexport function skillLabel(skill: SkillType) {\r\n    return sentenceCase(skill);\r\n}\r\n","import { Formatter } from \"./Formatters\";\r\n\r\nexport class ChallengeRating {\r\n    constructor(\r\n        readonly cr: string,\r\n        readonly lair: string,\r\n        readonly coven: string\r\n    ) {}\r\n\r\n    format() {\r\n        return Formatter.create(this.cr)\r\n            .addCondition(this.lair, s => `Lair: ${s}`)\r\n            .addCondition(this.coven, s => `Coven: ${s}`)\r\n            .format();\r\n    }\r\n}\r\n","export class TextBuilder {\r\n    phrases: string[] = [];\r\n\r\n    add(text: string | null | undefined) {\r\n        if (text != null && text !== \"\") {\r\n            this.phrases.push(text);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    list(items: string[]) {\r\n        if (items.length > 0) {\r\n            this.phrases.push(items.join(\", \"));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    note(callable: (t: TextBuilder) => TextBuilder) {\r\n        const builder = callable(new TextBuilder());\r\n        if (builder.nonEmpty()) {\r\n            this.phrases.push(`(${builder.build()})`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    nonEmpty() {\r\n        return this.phrases.length > 0;\r\n    }\r\n\r\n    build() {\r\n        return this.phrases.join(\" \");\r\n    }\r\n}\r\n","import { TextBuilder } from \"../utils/TextBuilder\";\r\nimport { Condition } from \"./Condition\";\r\n\r\nexport class ConditionImmunity {\r\n    constructor(readonly conditions: Condition[], readonly preNote: string) {}\r\n\r\n    format() {\r\n        return new TextBuilder()\r\n            .add(this.preNote)\r\n            .list(this.conditions)\r\n            .build();\r\n    }\r\n}\r\n","import { MonsterReferenceWithPage } from \"./Monster\";\r\nimport { MonsterSource } from \"./MonsterSource\";\r\n\r\nexport class TextContent {\r\n    constructor(readonly description: string) {}\r\n}\r\n\r\nexport class LabeledContent {\r\n    constructor(readonly label: string, readonly text: string) {}\r\n}\r\n\r\nexport class ListContent {\r\n    constructor(readonly entries: Content[]) {}\r\n}\r\n\r\nexport class InsetContent {\r\n    constructor(\r\n        readonly label: string,\r\n        readonly entries: Content[],\r\n        readonly token?: MonsterReferenceWithPage\r\n    ) {}\r\n}\r\n\r\nexport class VariantContent {\r\n    constructor(\r\n        readonly label: string,\r\n        readonly entries: Content[],\r\n        readonly source?: MonsterSource\r\n    ) {}\r\n}\r\n\r\nexport class SubVariantContent {\r\n    constructor(readonly label: string, readonly entries: Content[]) {}\r\n}\r\n\r\nexport class InlineContent {\r\n    constructor(readonly entries: Content[]) {}\r\n}\r\n\r\nexport class Entries {\r\n    constructor(readonly label: string, readonly entries: Content[]) {}\r\n}\r\n\r\nexport class LinkContent {\r\n    constructor(\r\n        readonly text: string,\r\n        readonly href: { type: string; path: string; hash: string }\r\n    ) {}\r\n}\r\n\r\nexport class TableContent {\r\n    constructor(\r\n        readonly caption: string,\r\n        readonly columnLabels: string[],\r\n        readonly rows: string[][]\r\n    ) {}\r\n}\r\n\r\nexport type Content =\r\n    | TextContent\r\n    | LabeledContent\r\n    | ListContent\r\n    | InsetContent\r\n    | VariantContent\r\n    | SubVariantContent\r\n    | InlineContent\r\n    | LinkContent\r\n    | TableContent;\r\n","import { TextBuilder } from \"../utils/TextBuilder\";\r\nimport { DamageType } from \"./DamageType\";\r\n\r\nexport class DamageModifier {\r\n    constructor(\r\n        readonly damageTypes: DamageType[],\r\n        readonly note: string,\r\n        readonly preNote: string,\r\n        readonly conditional: {\r\n            condition: string;\r\n            damageTypes: DamageType[];\r\n        }[] = []\r\n    ) {}\r\n\r\n    format() {\r\n        return new TextBuilder()\r\n            .add(this.preNote)\r\n            .list(this.damageTypes)\r\n            .note(b => b.add(this.note))\r\n            .note(b =>\r\n                b.list(\r\n                    this.conditional.map(c =>\r\n                        new TextBuilder()\r\n                            .list(c.damageTypes)\r\n                            .note(b => b.add(c.condition))\r\n                            .build()\r\n                    )\r\n                )\r\n            )\r\n            .build();\r\n    }\r\n}\r\n","export class DefaultHealth {\r\n    constructor(readonly average: number, readonly formula: string) {}\r\n    format() {\r\n        return `${this.average} (${this.formula})`;\r\n    }\r\n}\r\n\r\nexport class SpecialHealth {\r\n    constructor(readonly special: string) {}\r\n    format() {\r\n        return this.special;\r\n    }\r\n}\r\n\r\nexport type Health = DefaultHealth | SpecialHealth;\r\n","import { LegendaryAction } from \"./LegendaryAction\";\r\n\r\nexport class Legendary {\r\n    constructor(\r\n        readonly header: string[],\r\n        readonly actions: LegendaryAction[],\r\n        readonly count: number\r\n    ) {}\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class LegendaryAction {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","export class LegendaryGroup {\r\n    constructor(readonly name: string, readonly source: string) {}\r\n}\r\n","import { Action } from \"./Action\";\r\nimport { MonsterAlignment } from \"./Alignment\";\r\nimport { ArmorClass } from \"./ArmorClass\";\r\nimport { ChallengeRating } from \"./ChallengeRating\";\r\nimport { ConditionImmunity } from \"./ConditionImmunity\";\r\nimport { DamageModifier } from \"./DamageModifier\";\r\nimport { DragonCastingColor } from \"./DragonCastingColor\";\r\nimport { Environment } from \"./Environment\";\r\nimport { Health } from \"./Health\";\r\nimport { Legendary } from \"./Legendary\";\r\nimport { LegendaryGroup } from \"./LegendaryGroup\";\r\nimport { MonsterReference } from \"./MonsterData\";\r\nimport { MonsterFlags } from \"./MonsterFlags\";\r\nimport { MonsterGroup } from \"./MonsterGroup\";\r\nimport { MonsterNames } from \"./MonsterNames\";\r\nimport { MonsterSource } from \"./MonsterSource\";\r\nimport { MonsterTags } from \"./MonsterTags\";\r\nimport { MonsterType } from \"./MonsterType\";\r\nimport { Reaction } from \"./Reaction\";\r\nimport { SavingThrow } from \"./SavingThrow\";\r\nimport { Size } from \"./Size\";\r\nimport { Skill } from \"./Skill\";\r\nimport { Speed } from \"./Speed\";\r\nimport { Spellcasting } from \"./Spellcasting\";\r\nimport { Statistics } from \"./Statistics\";\r\nimport { Trait } from \"./Trait\";\r\n\r\nexport interface MonsterReferenceWithPage extends MonsterReference {\r\n    page?: number;\r\n}\r\n\r\nexport class Monster {\r\n    constructor(\r\n        readonly name: string,\r\n        readonly names: MonsterNames,\r\n        readonly source: string,\r\n        readonly acs: ArmorClass[],\r\n        readonly size: Size,\r\n        readonly type: MonsterType,\r\n        readonly alignment: MonsterAlignment,\r\n        readonly hp: Health,\r\n        readonly stats: Statistics,\r\n        readonly skills: Skill[],\r\n        readonly speeds: Speed[],\r\n        readonly savingThrows: SavingThrow[],\r\n        readonly damageImmunities: DamageModifier[],\r\n        readonly damageResistance: DamageModifier[],\r\n        readonly conditionImmunities: ConditionImmunity[],\r\n        readonly senses: string[],\r\n        readonly languages: string[],\r\n        readonly challengeRating: ChallengeRating | null,\r\n        readonly traits: Trait[],\r\n        readonly spellcasting: Spellcasting[],\r\n        readonly actions: Action[],\r\n        readonly page: number | null,\r\n        readonly tags: MonsterTags,\r\n        readonly passivePerception: number | null,\r\n        readonly reactions: Reaction[],\r\n        readonly legendary: Legendary | null,\r\n        readonly legendaryGroup: LegendaryGroup | null,\r\n        readonly vulnerabilities: DamageModifier[],\r\n        readonly flags: MonsterFlags,\r\n        readonly group: MonsterGroup | null,\r\n        readonly level: number | null,\r\n        readonly altArt: MonsterReferenceWithPage[],\r\n        readonly otherSources: MonsterSource[],\r\n        readonly soundClip: string,\r\n        readonly environment: Environment[],\r\n        readonly dragonCastingColor: DragonCastingColor | null,\r\n        readonly actionNote: string | null\r\n    ) {}\r\n\r\n    is(reference: MonsterReference) {\r\n        return (\r\n            this.name.toLowerCase() === reference.name.toLowerCase() &&\r\n            (reference.source == null || reference.source === this.source)\r\n        );\r\n    }\r\n\r\n    formatChallengeRating() {\r\n        if (this.challengeRating == null) {\r\n            return \"\";\r\n        }\r\n        return this.challengeRating.cr;\r\n    }\r\n}\r\n","export class MonsterFlags {\r\n    constructor(\r\n        readonly npc: boolean,\r\n        readonly familiar: boolean,\r\n        readonly named: boolean\r\n    ) {}\r\n}\r\n","export class MonsterNames {\r\n    constructor(readonly shortName: string, readonly aliases: string[]) {}\r\n}\r\n","export class MonsterSource {\r\n    constructor(readonly source: string, readonly page?: number) {}\r\n}\r\n","export class Tag {\r\n    constructor(readonly tag: string, readonly prefix: string) {}\r\n}\r\n\r\nexport class MonsterType {\r\n    constructor(readonly type: string, tags: Tag[], swarmSize: string) {}\r\n\r\n    format() {\r\n        return this.type;\r\n    }\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class Reaction {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","import { AbilityScore, abilityScoreLabel } from \"./Statistics\";\r\n\r\nexport class SavingThrow {\r\n    constructor(readonly stat: AbilityScore, readonly value: string) {}\r\n\r\n    format() {\r\n        return `${abilityScoreLabel(this.stat)} ${this.value}`;\r\n    }\r\n}\r\n","export function makeLine(...parts: string[]): string {\r\n    return sentenceCase(parts.join(\" \"));\r\n}\r\n\r\nexport function sentenceCase(line: string): string {\r\n    return line.charAt(0).toLocaleUpperCase() + line.slice(1);\r\n}\r\n","import { skillLabel, SkillType } from \"./SkillType\";\r\n\r\nexport class Skill {\r\n    constructor(readonly type: SkillType, readonly value: string) {}\r\n\r\n    format() {\r\n        return `${skillLabel(this.type)} ${this.value}`;\r\n    }\r\n}\r\n","export enum SpeedType {\r\n    WALK = \"walk\",\r\n    CLIMB = \"climb\",\r\n    SWIM = \"swim\",\r\n    FLY = \"fly\",\r\n    BURROW = \"burrow\"\r\n}\r\n\r\nexport const SpeedTypes = Object.values(SpeedType);\r\n\r\nexport class Speed {\r\n    constructor(\r\n        readonly speedType: SpeedType,\r\n        readonly speed: number,\r\n        readonly condition: string\r\n    ) {}\r\n\r\n    format() {\r\n        if (this.speedType === SpeedType.WALK) {\r\n            return `${this.speed} ft. ${this.condition}`;\r\n        }\r\n        return `${this.speedType} ${this.speed} ft. ${this.condition}`;\r\n    }\r\n}\r\n","export function ordinal(count: number): string {\r\n    switch (count) {\r\n        case 0:\r\n            return \"0th\";\r\n        case 1:\r\n            return \"1st\";\r\n        case 2:\r\n            return \"2nd\";\r\n        case 3:\r\n            return \"3rd\";\r\n        default:\r\n            return `${count}th`;\r\n    }\r\n}\r\n","import { ordinal } from \"../utils/Ordinal\";\r\nimport { pluralize } from \"../utils/Plural\";\r\nimport { AbilityScore } from \"./Statistics\";\r\n\r\nexport class DailyLimit {\r\n    constructor(readonly count: number) {}\r\n\r\n    format() {\r\n        return `${this.count}/day`;\r\n    }\r\n}\r\nexport class NoLimit {\r\n    format() {\r\n        return `At will`;\r\n    }\r\n}\r\n\r\nexport class DailyEachLimit {\r\n    constructor(readonly count: number) {}\r\n\r\n    format() {\r\n        return `${this.count}/day each`;\r\n    }\r\n}\r\n\r\nexport class SpellSlotLimit {\r\n    constructor(\r\n        readonly level: number,\r\n        readonly count: number | undefined,\r\n        readonly lowerLevelRange?: number\r\n    ) {}\r\n\r\n    format() {\r\n        const limit =\r\n            this.count != null\r\n                ? `${this.count} ${pluralize(this.count, \"slot\", \"slots\")}`\r\n                : \"at will\";\r\n        if (this.level === 0) {\r\n            return `Cantrips (${limit})`;\r\n        }\r\n        if (this.lowerLevelRange != null) {\r\n            return `${ordinal(this.lowerLevelRange)}-${ordinal(\r\n                this.level\r\n            )} level (${limit})`;\r\n        }\r\n        return `${ordinal(this.level)} level (${limit})`;\r\n    }\r\n}\r\n\r\nexport type CastingLimit =\r\n    | DailyLimit\r\n    | NoLimit\r\n    | DailyEachLimit\r\n    | SpellSlotLimit;\r\n\r\nexport class Spell {\r\n    static fromList(spells: string[]) {\r\n        return spells.map(s => new Spell(s));\r\n    }\r\n    constructor(readonly spell: string) {}\r\n\r\n    format() {\r\n        return this.spell;\r\n    }\r\n}\r\n\r\nexport class SpellGroup {\r\n    constructor(\r\n        readonly spells: Spell[],\r\n        readonly limit: CastingLimit,\r\n        readonly hidden: boolean\r\n    ) {}\r\n}\r\n\r\nexport class Spellcasting {\r\n    constructor(\r\n        readonly name: string,\r\n        readonly spellcastingAbility: AbilityScore | null,\r\n        readonly header: string[],\r\n        readonly footer: string[],\r\n        readonly spellGroups: SpellGroup[]\r\n    ) {}\r\n}\r\n","export function pluralize(count: number, singular: string, plural: string) {\r\n    if (count === 1) {\r\n        return singular;\r\n    } else {\r\n        return plural;\r\n    }\r\n}\r\n","import { Content } from \"./Content\";\r\n\r\nexport class Trait {\r\n    constructor(readonly name: string, readonly content: Content) {}\r\n}\r\n","import { Action } from \"../models/Action\";\r\nimport { Alignment, MonsterAlignment } from \"../models/Alignment\";\r\nimport { ArmorClass } from \"../models/ArmorClass\";\r\nimport { ChallengeRating } from \"../models/ChallengeRating\";\r\nimport { ConditionImmunity } from \"../models/ConditionImmunity\";\r\nimport {\r\n    InlineContent,\r\n    LabeledContent,\r\n    LinkContent,\r\n    ListContent,\r\n    TextContent\r\n} from \"../models/Content\";\r\nimport { DamageModifier } from \"../models/DamageModifier\";\r\nimport { DamageType } from \"../models/DamageType\";\r\nimport { DefaultHealth, SpecialHealth } from \"../models/Health\";\r\nimport { Legendary } from \"../models/Legendary\";\r\nimport { LegendaryAction } from \"../models/LegendaryAction\";\r\nimport { LegendaryGroup } from \"../models/LegendaryGroup\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { Entry, MonsterData, SpellSlotData } from \"../models/MonsterData\";\r\nimport { MonsterFlags } from \"../models/MonsterFlags\";\r\nimport { MonsterNames } from \"../models/MonsterNames\";\r\nimport { MonsterSource } from \"../models/MonsterSource\";\r\nimport { MonsterTags } from \"../models/MonsterTags\";\r\nimport { MonsterType, Tag } from \"../models/MonsterType\";\r\nimport { Reaction } from \"../models/Reaction\";\r\nimport { SavingThrow } from \"../models/SavingThrow\";\r\nimport { Skill } from \"../models/Skill\";\r\nimport { SkillTypes } from \"../models/SkillType\";\r\nimport { Speed, SpeedTypes } from \"../models/Speed\";\r\nimport {\r\n    CastingLimit,\r\n    DailyEachLimit,\r\n    DailyLimit,\r\n    NoLimit,\r\n    Spell,\r\n    Spellcasting,\r\n    SpellGroup,\r\n    SpellSlotLimit\r\n} from \"../models/Spellcasting\";\r\nimport { AbilityScores, Statistics } from \"../models/Statistics\";\r\nimport { Trait } from \"../models/Trait\";\r\n\r\nfunction toAC(ac: MonsterData[\"ac\"]): ArmorClass[] {\r\n    return ac.map(a => {\r\n        if (typeof a == \"number\") {\r\n            return new ArmorClass(a, [], \"\");\r\n        } else {\r\n            return new ArmorClass(a.ac, a.from || [], a.condition || \"\");\r\n        }\r\n    });\r\n}\r\n\r\nfunction toMonsterType(type: MonsterData[\"type\"]) {\r\n    if (typeof type == \"string\") {\r\n        return new MonsterType(type, [], \"\");\r\n    }\r\n    return new MonsterType(\r\n        type.type,\r\n        (type.tags || []).map(tag => {\r\n            if (typeof tag === \"string\") {\r\n                return new Tag(tag, \"\");\r\n            }\r\n            return new Tag(tag.tag, tag.prefix);\r\n        }),\r\n        type.swarmSize || \"\"\r\n    );\r\n}\r\n\r\nfunction toMonsterAlignment(data: MonsterData[\"alignment\"]) {\r\n    if (data == null) {\r\n        return new MonsterAlignment([], []);\r\n    }\r\n    const special: string[] = [];\r\n    const alignments: Alignment[] = [];\r\n    data.forEach(a => {\r\n        if (typeof a === \"string\") {\r\n            alignments.push(new Alignment(a, 1));\r\n        } else if (\"chance\" in a) {\r\n            a.alignment.forEach(sa => {\r\n                alignments.push(new Alignment(sa, a.chance || 1));\r\n            });\r\n        } else {\r\n            special.push(a.special);\r\n        }\r\n    });\r\n    return new MonsterAlignment(alignments, special);\r\n}\r\n\r\nfunction toMonsterHealth(data: MonsterData[\"hp\"]) {\r\n    if (\"special\" in data) {\r\n        return new SpecialHealth(data.special);\r\n    } else {\r\n        return new DefaultHealth(data.average, data.formula);\r\n    }\r\n}\r\n\r\nfunction toStatistics(data: MonsterData) {\r\n    return new Statistics(\r\n        data.str,\r\n        data.dex,\r\n        data.con,\r\n        data.wis,\r\n        data.int,\r\n        data.cha\r\n    );\r\n}\r\n\r\nfunction toSkills(data: MonsterData[\"skill\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return SkillTypes.map(s => {\r\n        const value = data[s];\r\n        if (value != null) {\r\n            return new Skill(s, value);\r\n        }\r\n        return null;\r\n    }).filter((s): s is Skill => s != null);\r\n}\r\n\r\nfunction toSpeeds(data: MonsterData[\"speed\"]) {\r\n    return SpeedTypes.map(s => {\r\n        const speed = data[s];\r\n        if (speed != null) {\r\n            if (typeof speed === \"number\") {\r\n                return new Speed(s, speed, \"\");\r\n            } else {\r\n                return new Speed(s, speed.number, speed.condition);\r\n            }\r\n        }\r\n        return null;\r\n    }).filter((s): s is Speed => s != null);\r\n}\r\n\r\nfunction toSavingThrows(data: MonsterData[\"save\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return AbilityScores.map(s => {\r\n        const value = data[s];\r\n        if (value != null) {\r\n            return new SavingThrow(s, value);\r\n        } else {\r\n            return null;\r\n        }\r\n    }).filter((s): s is SavingThrow => s != null);\r\n}\r\n\r\nfunction toDamageImmunities(data: MonsterData[\"immune\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(d => {\r\n        if (typeof d === \"string\") {\r\n            return new DamageModifier([d], \"\", \"\");\r\n        } else {\r\n            return new DamageModifier(d.immune, d.note || \"\", d.preNote || \"\");\r\n        }\r\n    });\r\n}\r\n\r\nfunction toConditionImmunities(data: MonsterData[\"conditionImmune\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(c => {\r\n        if (typeof c === \"string\") {\r\n            return new ConditionImmunity([c], \"\");\r\n        } else {\r\n            return new ConditionImmunity(c.conditionImmune, c.preNote || \"\");\r\n        }\r\n    });\r\n}\r\n\r\nfunction toChallengeRating(data: MonsterData[\"cr\"]) {\r\n    if (data == null) {\r\n        return null;\r\n    }\r\n    if (typeof data === \"string\") {\r\n        return new ChallengeRating(data, \"\", \"\");\r\n    }\r\n    return new ChallengeRating(data.cr, data.lair || \"\", data.coven || \"\");\r\n}\r\n\r\nfunction toSubContent(subEntries: any[]) {\r\n    return subEntries.map(se => {\r\n        if (typeof se === \"string\") {\r\n            return new TextContent(se);\r\n        } else if (se.type === \"link\") {\r\n            return new LinkContent(se.text, se.href);\r\n        } else {\r\n            return new LabeledContent(se.name, se.entry);\r\n        }\r\n    });\r\n}\r\n\r\nfunction toTraits(data: MonsterData[\"trait\"]) {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(trait => new Trait(trait.name, toContent(trait.entries)));\r\n}\r\n\r\nfunction toSpellcasting(data: MonsterData[\"spellcasting\"]): Spellcasting[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(d => {\r\n        const groups: SpellGroup[] = [];\r\n        if (d.will != null) {\r\n            groups.push(\r\n                new SpellGroup(\r\n                    Spell.fromList(d.will),\r\n                    new NoLimit(),\r\n                    d.hidden != null && d.hidden.includes(\"will\")\r\n                )\r\n            );\r\n        }\r\n        function addDaily(e: string[] | undefined | null, limit: CastingLimit) {\r\n            if (e == null) {\r\n                return;\r\n            }\r\n            groups.push(\r\n                new SpellGroup(\r\n                    Spell.fromList(e),\r\n                    limit,\r\n                    d.hidden != null && d.hidden.includes(\"daily\")\r\n                )\r\n            );\r\n        }\r\n        if (d.daily != null) {\r\n            addDaily(d.daily[\"1e\"], new DailyEachLimit(1));\r\n            addDaily(d.daily[\"2e\"], new DailyEachLimit(1));\r\n            addDaily(d.daily[\"3e\"], new DailyEachLimit(1));\r\n            addDaily(d.daily[\"1\"], new DailyLimit(1));\r\n            addDaily(d.daily[\"2\"], new DailyLimit(1));\r\n            addDaily(d.daily[\"3\"], new DailyLimit(1));\r\n        }\r\n        function addSpellSlot(\r\n            data: SpellSlotData | undefined | null,\r\n            slotLevel: number\r\n        ) {\r\n            if (data == null) {\r\n                return;\r\n            }\r\n            groups.push(\r\n                new SpellGroup(\r\n                    Spell.fromList(data.spells),\r\n                    new SpellSlotLimit(\r\n                        slotLevel,\r\n                        data.slots || undefined,\r\n                        data.lower || undefined\r\n                    ),\r\n                    false\r\n                )\r\n            );\r\n        }\r\n        if (d.spells != null) {\r\n            addSpellSlot(d.spells[\"0\"], 0);\r\n            addSpellSlot(d.spells[\"1\"], 1);\r\n            addSpellSlot(d.spells[\"2\"], 2);\r\n            addSpellSlot(d.spells[\"3\"], 3);\r\n            addSpellSlot(d.spells[\"4\"], 4);\r\n            addSpellSlot(d.spells[\"5\"], 5);\r\n            addSpellSlot(d.spells[\"6\"], 6);\r\n            addSpellSlot(d.spells[\"7\"], 7);\r\n            addSpellSlot(d.spells[\"8\"], 8);\r\n            addSpellSlot(d.spells[\"9\"], 9);\r\n        }\r\n        return new Spellcasting(\r\n            d.name,\r\n            d.ability || null,\r\n            d.headerEntries,\r\n            d.footerEntries || [],\r\n            groups\r\n        );\r\n    });\r\n}\r\n\r\nfunction toContent(entries: Entry[]) {\r\n    return new InlineContent(\r\n        entries.map(e => {\r\n            if (typeof e === \"string\") {\r\n                return new TextContent(e);\r\n            } else if (e.type === \"list\") {\r\n                return new ListContent(toSubContent(e.items));\r\n            } else {\r\n                return new InlineContent(toSubContent((e as any).entries));\r\n            }\r\n        })\r\n    );\r\n}\r\n\r\nfunction toActions(data: MonsterData[\"action\"]): Action[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(\r\n        action => new Action(action.name, toContent(action.entries))\r\n    );\r\n}\r\n\r\nfunction toReactions(data: MonsterData[\"reaction\"]): Reaction[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(\r\n        reaction => new Reaction(reaction.name, toContent(reaction.entries))\r\n    );\r\n}\r\n\r\nconst DEFAULT_LEGENDARY_ACTIONS = 3;\r\n\r\nfunction toLegendary(data: MonsterData): Legendary | null {\r\n    if (data.legendaryHeader == null && data.legendary == null) {\r\n        return null;\r\n    }\r\n    return new Legendary(\r\n        data.legendaryHeader || [],\r\n        (data.legendary || []).map(\r\n            action =>\r\n                new LegendaryAction(\r\n                    action.name || \"\",\r\n                    toContent(action.entries)\r\n                )\r\n        ),\r\n        data.legendaryActions || DEFAULT_LEGENDARY_ACTIONS\r\n    );\r\n}\r\n\r\nfunction toTags(data: MonsterData): MonsterTags {\r\n    return new MonsterTags(\r\n        data.actionTags || [],\r\n        data.damageTags || [],\r\n        data.languageTags || [],\r\n        data.miscTags || [],\r\n        data.senseTags || [],\r\n        data.spellcastingTags || [],\r\n        data.traitTags || []\r\n    );\r\n}\r\n\r\nfunction toDamageResistances(data: MonsterData[\"resist\"]): DamageModifier[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(r => {\r\n        if (typeof r === \"string\") {\r\n            return new DamageModifier([r], \"\", \"\");\r\n        } else if (\"special\" in r) {\r\n            return new DamageModifier([], r.special, \"\");\r\n        } else {\r\n            const special = r.resist\r\n                .filter(\r\n                    (r): r is { resist: DamageType[]; note: string } =>\r\n                        typeof r !== \"string\"\r\n                )\r\n                .map(r => ({\r\n                    damageTypes: r.resist,\r\n                    condition: r.note\r\n                }));\r\n            return new DamageModifier(\r\n                r.resist.filter((r): r is DamageType => typeof r === \"string\"),\r\n                r.note || \"\",\r\n                r.preNote || \"\",\r\n                special\r\n            );\r\n        }\r\n    });\r\n}\r\n\r\nfunction toVulnerabilities(data: MonsterData[\"vulnerable\"]): DamageModifier[] {\r\n    if (data == null) {\r\n        return [];\r\n    }\r\n    return data.map(r => {\r\n        if (typeof r === \"string\") {\r\n            return new DamageModifier([r], \"\", \"\");\r\n        } else {\r\n            return new DamageModifier(r.vulnerable, r.note, \"\");\r\n        }\r\n    });\r\n}\r\n\r\nexport function toMonster(data: MonsterData): Monster {\r\n    return new Monster(\r\n        data.name,\r\n        new MonsterNames(data.shortName || \"\", data.alias || []),\r\n        data.source,\r\n        toAC(data.ac),\r\n        data.size,\r\n        toMonsterType(data.type),\r\n        toMonsterAlignment(data.alignment),\r\n        toMonsterHealth(data.hp),\r\n        toStatistics(data),\r\n        toSkills(data.skill),\r\n        toSpeeds(data.speed),\r\n        toSavingThrows(data.save),\r\n        toDamageImmunities(data.immune),\r\n        toDamageResistances(data.resist),\r\n        toConditionImmunities(data.conditionImmune),\r\n        data.senses || [],\r\n        data.languages || [],\r\n        toChallengeRating(data.cr),\r\n        toTraits(data.trait),\r\n        toSpellcasting(data.spellcasting),\r\n        toActions(data.action),\r\n        data.page || null,\r\n        toTags(data),\r\n        data.passive || null,\r\n        toReactions(data.reaction),\r\n        toLegendary(data),\r\n        data.legendaryGroup != null\r\n            ? new LegendaryGroup(\r\n                  data.legendaryGroup.name,\r\n                  data.legendaryGroup.source\r\n              )\r\n            : null,\r\n        toVulnerabilities(data.vulnerable),\r\n        new MonsterFlags(\r\n            data.isNpc || false,\r\n            data.familiar || false,\r\n            data.isNamedCreature || false\r\n        ),\r\n        data.group || null,\r\n        data.level == null ? null : data.level,\r\n        (data.altArt || []).map(a => ({\r\n            name: a.name,\r\n            source: a.source,\r\n            page: a.page || undefined\r\n        })),\r\n        (data.otherSources || []).map(\r\n            s => new MonsterSource(s.source, s.page || undefined)\r\n        ),\r\n        data.soundClip || \"\",\r\n        data.environment || [],\r\n        data.dragonCastingColor || null,\r\n        data.actionNote || null\r\n    );\r\n}\r\n","import { isLeft, Left } from \"fp-ts/lib/Either\";\r\nimport { Errors } from \"io-ts\";\r\nimport { isObjectLike } from \"lodash\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport {\r\n    ExtendedMonster,\r\n    isExtendedMonster,\r\n    isMonster,\r\n    MonsterData,\r\n    MonsterReference,\r\n    MonsterSchema\r\n} from \"../models/MonsterData\";\r\nimport { HttpService } from \"./HttpService\";\r\nimport { toMonster } from \"./MonsterConverter\";\r\n\r\nfunction url(file: string) {\r\n    return `/data/bestiary/${file}`;\r\n}\r\n\r\ninterface Index {\r\n    [key: string]: string;\r\n}\r\n\r\ninterface Bestiary {\r\n    monster: (MonsterData | ExtendedMonster)[];\r\n}\r\n\r\nfunction find(monsters: Monster[], ref: MonsterReference): Monster {\r\n    const found = monsters.find(m => m.is(ref));\r\n    if (found == null) {\r\n        throw new Error(`Failed to find monster ${JSON.stringify(ref)}`);\r\n    }\r\n    return found;\r\n}\r\n\r\nfunction printEnum(\r\n    monsters: MonsterData[],\r\n    addValues: (set: Set<String>, monster: MonsterData) => void\r\n) {\r\n    const found = new Set<string>();\r\n    monsters.forEach(m => {\r\n        addValues(found, m);\r\n    });\r\n    console.log(\r\n        `export enum Foo {${Array.from(found.values())\r\n            .map(\r\n                v =>\r\n                    `${v\r\n                        .replace(/ /g, \"_\")\r\n                        .replace(/[^a-z_]/gi, \"\")\r\n                        .toLocaleUpperCase()} = \"${v}\"`\r\n            )\r\n            .join(\",\\n\")}}`\r\n    );\r\n}\r\n\r\nfunction printError(monsterData: MonsterData, result: Left<Errors>) {\r\n    console.log(monsterData);\r\n    result.left.forEach(error => {\r\n        const path = error.context\r\n            .map(c => c.key)\r\n            .filter(k => !!k)\r\n            .join(\".\");\r\n        const value = (JSON.stringify(error.value) || \"undefined\").slice(0, 80);\r\n        console.log(\r\n            `${error.message || \"Invaild value\"} at ${path} got ${value}`\r\n        );\r\n    });\r\n}\r\n\r\nlet cache: Promise<Monster[]> | null = null;\r\nexport class MonsterService {\r\n    static all(): Promise<Monster[]> {\r\n        if (cache == null) {\r\n            cache = MonsterService.allRaw();\r\n        }\r\n        return cache;\r\n    }\r\n\r\n    static async allRaw(): Promise<Monster[]> {\r\n        const res = await HttpService.getJson<Index>(url(\"index.json\"));\r\n        let monsters: MonsterData[] = [];\r\n        let extended: ExtendedMonster[] = [];\r\n        for (const key in res) {\r\n            const response = await HttpService.getJson<Bestiary>(url(res[key]));\r\n            monsters = monsters.concat(response.monster.filter(isMonster));\r\n            extended = extended.concat(\r\n                response.monster.filter(isExtendedMonster)\r\n            );\r\n        }\r\n        extended.forEach(m => {\r\n            const reference = m._copy;\r\n            const found = monsters.find(\r\n                mon =>\r\n                    mon.name === reference.name &&\r\n                    (reference.source == null ||\r\n                        reference.source === mon.source)\r\n            );\r\n            if (found == null) {\r\n                throw new Error(\r\n                    `Monster ${JSON.stringify(reference)} not found`\r\n                );\r\n            }\r\n            monsters.push({ ...found, ...m });\r\n        });\r\n        printEnum(monsters, (f, m) => {\r\n            if (m.dragonCastingColor != null) {\r\n                f.add(m.dragonCastingColor);\r\n            }\r\n        });\r\n        const knownKeys = new Map<string, any>();\r\n        const foundKeys = new Set<string>();\r\n        let first = true;\r\n        const mon = monsters\r\n            .map(m => {\r\n                const result = MonsterSchema.decode(m);\r\n                if (isLeft(result)) {\r\n                    printError(m, result);\r\n                    return m;\r\n                } else {\r\n                    Object.keys(m).forEach(k => knownKeys.set(k, m));\r\n                    Object.keys(result.right).forEach(k => foundKeys.add(k));\r\n                    const differentKeys = Object.keys(result.right).filter(\r\n                        key =>\r\n                            !isEqual(\r\n                                (m as any)[key],\r\n                                (result.right as any)[key]\r\n                            )\r\n                    );\r\n                    if (differentKeys.length > 0 && first) {\r\n                        console.error(\"Found different keys\", differentKeys);\r\n                        console.log(result.right);\r\n                        console.log(m);\r\n                        differentKeys.forEach(k =>\r\n                            console.log((result.right as any)[k], (m as any)[k])\r\n                        );\r\n                        first = false;\r\n                    }\r\n                    return result.right;\r\n                }\r\n            })\r\n            .map(toMonster);\r\n        foundKeys.forEach(k => knownKeys.delete(k));\r\n        console.log(knownKeys);\r\n        return mon;\r\n    }\r\n\r\n    static async get(ref: MonsterReference): Promise<Monster> {\r\n        const all = await MonsterService.all();\r\n        return find(all, ref);\r\n    }\r\n}\r\n\r\nfunction isEqual(left: any, right: any): boolean {\r\n    if (left === right) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(left) && Array.isArray(right)) {\r\n        return (\r\n            left.length === right.length &&\r\n            left.every((l, i) => isEqual(l, right[i]))\r\n        );\r\n    }\r\n    if (isObjectLike(left) && isObjectLike(right)) {\r\n        const keys = new Set([...Object.keys(left), ...Object.keys(right)]);\r\n        return Array.from(keys.values()).every(k => isEqual(left[k], right[k]));\r\n    }\r\n    return false;\r\n}\r\n","export enum TextAnnotation {\r\n    dice = \"dice\",\r\n    dc = \"dc\",\r\n    hit = \"hit\",\r\n    on_hit = \"h\",\r\n    attack = \"atk\",\r\n    damage = \"damage\",\r\n    recharge = \"recharge\"\r\n}\r\n\r\nconst ATTACK_TYPES: { [key: string]: string } = {\r\n    ms: \"Melee Spell Attack:\",\r\n    mw: \"Melee Weapon Attack:\",\r\n    rw: \"Ranged Weapon Attack:\",\r\n    \"mw,rw\": \"Melee or Ranged Weapon Attack:\"\r\n};\r\n\r\nexport class AnnotatedText {\r\n    constructor(readonly annotation: TextAnnotation, readonly text: string) {}\r\n\r\n    format() {\r\n        switch (this.annotation) {\r\n            case TextAnnotation.dc:\r\n                return `DC ${this.text}`;\r\n            case TextAnnotation.hit:\r\n                return `+${this.text}`;\r\n            case TextAnnotation.on_hit:\r\n                return `Hit: `;\r\n            case TextAnnotation.attack:\r\n                return ATTACK_TYPES[this.text] || this.text;\r\n            case TextAnnotation.recharge:\r\n                return this.text !== \"\"\r\n                    ? `(Recharge ${this.text}-6)`\r\n                    : `(Recharge 6)`;\r\n            default:\r\n                return this.text;\r\n        }\r\n    }\r\n}\r\n","export enum EntityType {\r\n    item = \"item\",\r\n    monster = \"monster\",\r\n    creature = \"creature\",\r\n    spell = \"spell\",\r\n    condition = \"condition\",\r\n    skill = \"skill\"\r\n}\r\n","import { AnnotatedText, TextAnnotation } from \"../models/AnnotatedText\";\r\nimport { EntityType } from \"../models/EntityType\";\r\n\r\nexport class Link {\r\n    readonly book?: string;\r\n    constructor(\r\n        readonly type: EntityType,\r\n        readonly name: string,\r\n        book?: string,\r\n        readonly text?: string\r\n    ) {\r\n        if (book != null) {\r\n            this.book = book.toLowerCase();\r\n        }\r\n    }\r\n\r\n    getText() {\r\n        return this.text || this.name;\r\n    }\r\n}\r\n\r\nexport class Text {\r\n    constructor(readonly text: string) {}\r\n}\r\n\r\nexport type Token = Text | Link | AnnotatedText;\r\n\r\nexport function parseText(text: string): Token[] {\r\n    const regex = /(.*?){@(\\w+)(?: (.*?))?}/g;\r\n    let match;\r\n    const out: Token[] = [];\r\n    function push(token: Token) {\r\n        if (token instanceof Text && token.text === \"\") {\r\n            return;\r\n        }\r\n        out.push(token);\r\n    }\r\n    let lastIndex = 0;\r\n    while ((match = regex.exec(text))) {\r\n        push(new Text(match[1]));\r\n        const link = toLink(\r\n            match[2],\r\n            (match[3] || \"\").split(\"|\").map(s => s.trim())\r\n        );\r\n        if (link != null) {\r\n            push(link);\r\n        } else {\r\n            push(new Text(match[0]));\r\n        }\r\n        lastIndex = regex.lastIndex;\r\n    }\r\n    push(new Text(text.substring(lastIndex)));\r\n    return out;\r\n}\r\n\r\nfunction toLink(type: string, values: string[]): Token | null {\r\n    const entityType = Object.values(EntityType).find(t => t === type);\r\n    if (entityType != null) {\r\n        return new Link(entityType, values[0], values[1], values[2]);\r\n    }\r\n    const annotation = Object.values(TextAnnotation).find(t => t === type);\r\n    if (annotation != null) {\r\n        return new AnnotatedText(annotation, values[0]);\r\n    }\r\n    return null;\r\n}\r\n","import React from \"react\";\nimport { Link } from \"../services/LinkedTextParser\";\n\nexport function EntityLink({ entity }: { entity: Link }) {\n    return <a href={`#/${entity.type}`}>{entity.getText()}</a>;\n}\n","import React from \"react\";\r\nimport { AnnotatedText } from \"../models/AnnotatedText\";\r\nimport { Link, parseText } from \"../services/LinkedTextParser\";\r\nimport { EntityLink } from \"./EntityLink\";\r\n\r\nexport function LinkedText({ text }: { text: string }) {\r\n    return (\r\n        <>\r\n            {parseText(text).map((value, i) => {\r\n                if (value instanceof Link) {\r\n                    return <EntityLink entity={value} key={i} />;\r\n                } else if (value instanceof AnnotatedText) {\r\n                    return <em key={i}>{value.format()}</em>;\r\n                } else {\r\n                    return value.text;\r\n                }\r\n            })}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"./Label.css\";\r\nimport { LinkedText } from \"./LinkedText\";\r\n\r\nexport function Label({ children }: { children: string }) {\r\n    return (\r\n        <strong className=\"label\">\r\n            <LinkedText text={children} />\r\n        </strong>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Label } from \"./Label\";\r\nimport { LinkedText } from \"./LinkedText\";\r\n\r\nexport function Definition({ label, text }: { label: string; text: string }) {\r\n    return (\r\n        <div>\r\n            <Label>{label}</Label> <LinkedText text={text}></LinkedText>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { TextBuilder } from \"../utils/TextBuilder\";\r\nimport { Definition } from \"./Definition\";\r\n\r\nexport function ListDefinition({\r\n    values,\r\n    label,\r\n    suffix\r\n}: {\r\n    values: string[];\r\n    label: string;\r\n    suffix?: string | null;\r\n}) {\r\n    if (values.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label={label}\r\n            text={new TextBuilder()\r\n                .list(values)\r\n                .add(suffix)\r\n                .build()}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function ChallengeRating({ monster }: { monster: Monster }) {\r\n    if (monster.challengeRating == null) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition label=\"Challenge\" text={monster.challengeRating.format()} />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function ConditionImmunities({ monster }: { monster: Monster }) {\r\n    if (monster.conditionImmunities.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Condition Immunities\"\r\n            text={defaultFormat(monster.conditionImmunities)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function DamageImmunities({ monster }: { monster: Monster }) {\r\n    if (monster.damageImmunities.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Damage Immunities\"\r\n            text={defaultFormat(monster.damageImmunities)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function DamageResistances({ monster }: { monster: Monster }) {\r\n    if (monster.damageResistance.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Damage Resistances\"\r\n            text={defaultFormat(monster.damageResistance)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function DamageVulnerabilities({ monster }: { monster: Monster }) {\r\n    if (monster.vulnerabilities.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Damage Vulnerabilities\"\r\n            text={defaultFormat(monster.vulnerabilities)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    Content,\r\n    InlineContent,\r\n    InsetContent,\r\n    LabeledContent,\r\n    LinkContent,\r\n    ListContent,\r\n    SubVariantContent,\r\n    TableContent,\r\n    TextContent,\r\n    VariantContent\r\n} from \"../models/Content\";\r\nimport { assertNever } from \"../utils/Never\";\r\nimport { Label } from \"./Label\";\r\nimport { LinkedText } from \"./LinkedText\";\r\n\r\nexport function TableContentDisplay({ content }: { content: TableContent }) {\r\n    return (\r\n        <div>\r\n            {content.caption}\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        {content.columnLabels.map((c, i) => (\r\n                            <th key={i}>{c}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {content.rows.map((r, i) => (\r\n                        <tr key={i}>\r\n                            {r.map((d, j) => (\r\n                                <td key={j}>{i}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function ContentDisplay({ content }: { content: Content }) {\r\n    if (content instanceof TextContent) {\r\n        return <LinkedText text={content.description} />;\r\n    } else if (content instanceof ListContent) {\r\n        return (\r\n            <ul>\r\n                {content.entries.map((e, i) => (\r\n                    <li key={i}>\r\n                        <ContentDisplay content={e} />\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    } else if (content instanceof InlineContent) {\r\n        return (\r\n            <span>\r\n                {content.entries.map((e, i) => (\r\n                    <span key={i}>\r\n                        <ContentDisplay key={i} content={e} />\r\n                    </span>\r\n                ))}\r\n            </span>\r\n        );\r\n    } else if (content instanceof LinkContent) {\r\n        return <a href={content.href.path}>{content.text}</a>;\r\n    } else if (content instanceof LabeledContent) {\r\n        return (\r\n            <span>\r\n                <Label>{content.label}</Label>{\" \"}\r\n                <LinkedText text={content.text} />\r\n            </span>\r\n        );\r\n    } else if (\r\n        content instanceof InsetContent ||\r\n        content instanceof VariantContent ||\r\n        content instanceof SubVariantContent\r\n    ) {\r\n        return (\r\n            <span>\r\n                <Label>{content.label}</Label>{\" \"}\r\n                {content.entries.map((c, i) => (\r\n                    <ContentDisplay key={i} content={c} />\r\n                ))}\r\n            </span>\r\n        );\r\n    } else if (content instanceof TableContent) {\r\n        return <TableContentDisplay content={content} />;\r\n    }\r\n    return assertNever(content);\r\n}\r\n","export function assertNever(x: never): never {\r\n    throw new Error(\"Unexpected value. Should have been never.\");\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { LegendaryAction } from \"../models/LegendaryAction\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nfunction Legendary({\r\n    legendaryAction: action\r\n}: {\r\n    legendaryAction: LegendaryAction;\r\n}) {\r\n    return (\r\n        <div>\r\n            <Label>{action.name}</Label>{\" \"}\r\n            <ContentDisplay content={action.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function LegendaryActions({ monster }: { monster: Monster }) {\r\n    if (monster.legendary == null) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Legendary Actions</h3>\r\n            <p>{monster.legendary.header.join(\" \")}</p>\r\n            {monster.legendary.actions.map((a, i) => (\r\n                <Legendary key={i} legendaryAction={a} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { Action } from \"../models/Action\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nfunction MonsterAction({ action }: { action: Action }) {\r\n    return (\r\n        <div>\r\n            <Label>{action.name}</Label>{\" \"}\r\n            <ContentDisplay content={action.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MonsterActions({ monster }: { monster: Monster }) {\r\n    if (monster.actions.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Actions</h3>\r\n            {monster.actions.map((a, i) => (\r\n                <MonsterAction key={i} action={a} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { Reaction } from \"../models/Reaction\";\r\n\r\nfunction MonsterReaction({ reaction }: { reaction: Reaction }) {\r\n    return (\r\n        <div>\r\n            <Label>{reaction.name}</Label>{\" \"}\r\n            <ContentDisplay content={reaction.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MonsterReactions({ monster }: { monster: Monster }) {\r\n    if (monster.reactions.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Reactions</h3>\r\n            {monster.reactions.map((a, i) => (\r\n                <MonsterReaction key={i} reaction={a} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function MonsterSaves({ monster }: { monster: Monster }) {\r\n    if (monster.savingThrows.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Definition\r\n            label=\"Saving Throws\"\r\n            text={defaultFormat(monster.savingThrows)}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\n\r\nexport function MonsterSkills({ monster }: { monster: Monster }) {\r\n    const { skills } = monster;\r\n    if (skills.length === 0) {\r\n        return null;\r\n    }\r\n    return <Definition label=\"Skills\" text={defaultFormat(skills)} />;\r\n}\r\n","import React from \"react\";\r\nimport { LinkedText } from \"../components/LinkedText\";\r\nimport { defaultFormat } from \"../models/Formatters\";\r\nimport { SpellGroup } from \"../models/Spellcasting\";\r\n\r\nexport function SpellGroupDisplay({ group }: { group: SpellGroup }) {\r\n    if (group.hidden) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div>\r\n            <span>{group.limit.format()}</span>:{\" \"}\r\n            <LinkedText text={defaultFormat(group.spells)} />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Label } from \"../components/Label\";\r\nimport { LinkedText } from \"../components/LinkedText\";\r\nimport { Spellcasting } from \"../models/Spellcasting\";\r\nimport { SpellGroupDisplay } from \"./SpellGroupDisplay\";\r\n\r\nexport function MonsterSpells({\r\n    spellcasting\r\n}: {\r\n    spellcasting: Spellcasting[];\r\n}) {\r\n    if (spellcasting.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div>\r\n            {spellcasting.map(s => (\r\n                <div key={s.name}>\r\n                    <Label>{s.name}</Label>{\" \"}\r\n                    <LinkedText text={s.header.join(\" \")} />\r\n                    {s.spellGroups.map((g, i) => (\r\n                        <SpellGroupDisplay key={i} group={g} />\r\n                    ))}\r\n                    <LinkedText text={s.footer.join(\" \")} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ContentDisplay } from \"../components/ContentDisplay\";\r\nimport { Label } from \"../components/Label\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { Trait } from \"../models/Trait\";\r\n\r\nfunction MonsterTrait({ trait }: { trait: Trait }) {\r\n    return (\r\n        <div>\r\n            <Label>{trait.name}</Label>{\" \"}\r\n            <ContentDisplay content={trait.content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MonsterTraits({ monster }: { monster: Monster }) {\r\n    return (\r\n        <>\r\n            {monster.traits.map((t, i) => (\r\n                <MonsterTrait key={i} trait={t} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","export function getMod(value: number) {\n    return Math.floor((value - 10) / 2);\n}\n\nexport function getSignedMod(value: number) {\n    const mod = getMod(value);\n    if (mod >= 0) {\n        return `+${mod}`;\n    } else {\n        return mod.toString();\n    }\n}\n","import React from \"react\";\nimport { Monster } from \"../models/Monster\";\nimport { getSignedMod } from \"../models/Stats\";\nimport \"./StatTable.css\";\n\nfunction Stat({ name, value }: { name: string; value: number }) {\n    return (\n        <div className=\"stat\">\n            <div>{name}</div>\n            <div>\n                {value} ({getSignedMod(value)})\n            </div>\n        </div>\n    );\n}\n\nexport function StatTable({ monster }: { monster: Monster }) {\n    return (\n        <div className=\"stat-table\">\n            <Stat name=\"Str\" value={monster.stats.str} />\n            <Stat name=\"Dex\" value={monster.stats.dex} />\n            <Stat name=\"Con\" value={monster.stats.con} />\n            <Stat name=\"Wis\" value={monster.stats.wis} />\n            <Stat name=\"Int\" value={monster.stats.int} />\n            <Stat name=\"Cha\" value={monster.stats.cha} />\n        </div>\n    );\n}\n","import React from \"react\";\r\nimport { Definition } from \"../components/Definition\";\r\nimport { ListDefinition } from \"../components/ListDefinition\";\r\nimport { defaultFormat, formatSize } from \"../models/Formatters\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { makeLine } from \"../utils/Formatting\";\r\nimport { ChallengeRating } from \"./ChallengeRating\";\r\nimport { ConditionImmunities } from \"./ConditionImmunities\";\r\nimport { DamageImmunities } from \"./DamageImmunities\";\r\nimport { DamageResistances } from \"./DamageResistances\";\r\nimport { DamageVulnerabilities } from \"./DamageVulnerabilities\";\r\nimport { LegendaryActions } from \"./LegendaryActions\";\r\nimport { MonsterActions } from \"./MonsterActions\";\r\nimport { MonsterReactions } from \"./MonsterReactions\";\r\nimport { MonsterSaves } from \"./MonsterSaves\";\r\nimport \"./MonsterSheet.css\";\r\nimport { MonsterSkills } from \"./MonsterSkills\";\r\nimport { MonsterSpells } from \"./MonsterSpells\";\r\nimport { MonsterTraits } from \"./MonsterTraits\";\r\nimport { StatTable } from \"./StatTable\";\r\n\r\nexport function MonsterSheet({ monster }: { monster: Monster }) {\r\n    return (\r\n        <div>\r\n            <h2>{monster.name}</h2>\r\n            <p>\r\n                {makeLine(\r\n                    formatSize(monster.size),\r\n                    monster.type.format() + \",\",\r\n                    monster.alignment.format()\r\n                )}\r\n            </p>\r\n            <hr />\r\n            <Definition label=\"Armor Class\" text={defaultFormat(monster.acs)} />\r\n            <Definition label=\"Hit Points\" text={monster.hp.format()} />\r\n            <Definition label=\"Speed\" text={defaultFormat(monster.speeds)} />\r\n            <hr />\r\n            <StatTable monster={monster} />\r\n            <hr />\r\n            <MonsterSaves monster={monster} />\r\n            <MonsterSkills monster={monster} />\r\n            <DamageResistances monster={monster} />\r\n            <DamageImmunities monster={monster} />\r\n            <DamageVulnerabilities monster={monster} />\r\n            <ConditionImmunities monster={monster} />\r\n            <ListDefinition\r\n                label=\"Senses\"\r\n                values={monster.senses}\r\n                suffix={\r\n                    monster.passivePerception\r\n                        ? `Passive Perception ${monster.passivePerception}`\r\n                        : null\r\n                }\r\n            />\r\n            <ListDefinition label=\"Languages\" values={monster.languages} />\r\n            <ChallengeRating monster={monster} />\r\n            <hr />\r\n            <MonsterTraits monster={monster} />\r\n            <MonsterSpells spellcasting={monster.spellcasting} />\r\n            <hr />\r\n            <MonsterActions monster={monster} />\r\n            <MonsterReactions monster={monster} />\r\n            <LegendaryActions monster={monster} />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { loader } from \"../components/Loader\";\r\nimport { MonsterReference } from \"../models/MonsterData\";\r\nimport { MonsterService } from \"../services/MonsterService\";\r\nimport \"./MonsterCard.css\";\r\nimport { MonsterSheet } from \"./MonsterSheet\";\r\n\r\nexport function MonsterCard({ monster }: { monster: MonsterReference }) {\r\n    return loader(\r\n        () => MonsterService.get(monster),\r\n        monster => (\r\n            <div className=\"monster-card\">\r\n                <MonsterSheet monster={monster} />\r\n            </div>\r\n        ),\r\n        [monster.name, monster.source]\r\n    );\r\n}\r\n","import React, {\r\n    DependencyList,\r\n    ReactElement,\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\n/* eslint-disable react-hooks/rules-of-hooks,react-hooks/exhaustive-deps */\r\nexport function loader<T>(\r\n    loader: () => Promise<T>,\r\n    render: (t: T) => React.ReactNode,\r\n    dependencyList: DependencyList = []\r\n): ReactElement {\r\n    const [data, setData] = useState<T | null>(null);\r\n    useEffect(() => {\r\n        setData(null);\r\n        loader().then(setData);\r\n    }, dependencyList);\r\n\r\n    if (data != null) {\r\n        return <>{render(data)}</>;\r\n    }\r\n    return <span>Loading</span>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Input({\r\n    value,\r\n    onChange,\r\n    placeholder\r\n}: {\r\n    value: string;\r\n    onChange: (newValue: string) => void;\r\n    placeholder?: string;\r\n}) {\r\n    return (\r\n        <input\r\n            className=\"form-control\"\r\n            value={value}\r\n            onChange={e => {\r\n                onChange(e.target.value);\r\n            }}\r\n            placeholder={placeholder}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Scroller.css\";\r\n\r\ninterface ScrollerPosition {\r\n    scrollDistance: number;\r\n    height: number;\r\n}\r\n\r\nexport function Scroller<T>({\r\n    elements,\r\n    render,\r\n    elementHeight\r\n}: {\r\n    elements: T[];\r\n    render: (t: T) => React.ReactNode;\r\n    elementHeight: number;\r\n}) {\r\n    const [position, setPosition] = useState<ScrollerPosition>({\r\n        scrollDistance: 0,\r\n        height: 1000\r\n    });\r\n\r\n    const scrollTarget = useRef<HTMLDivElement>(null);\r\n    const timeout = useRef<number | null>(null);\r\n    function updateScroll(scroller: HTMLDivElement | null | undefined) {\r\n        if (scroller == null) {\r\n            return;\r\n        }\r\n        setPosition({\r\n            scrollDistance: scroller.scrollTop,\r\n            height: scroller.clientHeight\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateScroll(scrollTarget.current);\r\n    }, []);\r\n\r\n    function onScroll() {\r\n        if (timeout.current == null) {\r\n            timeout.current = requestAnimationFrame(() => {\r\n                timeout.current = null;\r\n                updateScroll(scrollTarget.current);\r\n            });\r\n        }\r\n    }\r\n\r\n    const before = Math.floor(position.scrollDistance / elementHeight);\r\n    const count = Math.ceil(position.height / elementHeight) + 1;\r\n    const after = elements.length - before - count;\r\n\r\n    return (\r\n        <div className=\"scroller\" onScroll={onScroll} ref={scrollTarget}>\r\n            <div className=\"scroller__area\">\r\n                <div\r\n                    className=\"scroller__top-padding\"\r\n                    style={{ height: before * elementHeight }}\r\n                />\r\n                {elements.slice(before, before + count).map(render)}\r\n                <div\r\n                    className=\"scroller__bottom-padding\"\r\n                    style={{\r\n                        height: after * elementHeight\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { flatten } from \"lodash\";\r\n\r\ninterface ClassNamesObject {\r\n    [key: string]: boolean;\r\n}\r\n\r\nfunction fromKeys(classes: ClassNamesObject) {\r\n    return Object.keys(classes).filter(c => classes[c]);\r\n}\r\n\r\nexport function classNames(...classes: (ClassNamesObject | string)[]) {\r\n    return flatten(\r\n        classes.map(c => {\r\n            if (typeof c === \"string\") {\r\n                return [c];\r\n            } else {\r\n                return fromKeys(c);\r\n            }\r\n        })\r\n    ).join(\" \");\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Input } from \"../components/Input\";\r\nimport { Scroller } from \"../components/Scroller\";\r\nimport { Monster } from \"../models/Monster\";\r\nimport { MonsterReference } from \"../models/MonsterData\";\r\nimport { MonsterService } from \"../services/MonsterService\";\r\nimport { BemBuilder } from \"../utils/BemBuilder\";\r\nimport { classNames } from \"./Classnames\";\r\nimport \"./MonsterList.css\";\r\n\r\nfunction href(ref: MonsterReference) {\r\n    return `/#/monsters?name=${ref.name}&source=${ref.source || \"\"}`;\r\n}\r\n\r\nfunction alphabetic(a: Monster, b: Monster) {\r\n    return a.name.localeCompare(b.name);\r\n}\r\n\r\nconst BEM = new BemBuilder(\"monster-list\");\r\n\r\nexport function MonsterList({\r\n    selected\r\n}: {\r\n    selected: MonsterReference | null;\r\n}) {\r\n    const [monsters, setMonsters] = useState<Monster[] | null>(null);\r\n    useEffect(() => {\r\n        MonsterService.all().then(setMonsters);\r\n    }, []);\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    if (monsters == null) {\r\n        return <span>Loading</span>;\r\n    }\r\n\r\n    function filter(monster: Monster) {\r\n        if (search === \"\") {\r\n            return true;\r\n        }\r\n        return monster.name\r\n            .toLocaleLowerCase()\r\n            .includes(search.toLocaleLowerCase());\r\n    }\r\n\r\n    function isSelected(monster: Monster) {\r\n        return selected != null && monster.is(selected);\r\n    }\r\n\r\n    return (\r\n        <div className={BEM.block}>\r\n            <div>\r\n                <Input\r\n                    value={search}\r\n                    onChange={setSearch}\r\n                    placeholder=\"Search\"\r\n                />\r\n            </div>\r\n            <div className={BEM.element(\"list\")}>\r\n                <Scroller\r\n                    elements={monsters.filter(filter).sort(alphabetic)}\r\n                    render={m => (\r\n                        <a\r\n                            className={classNames(BEM.element(\"item\"), {\r\n                                \"bg-primary text-white\": isSelected(m),\r\n                                \"bg-light\": !isSelected(m)\r\n                            })}\r\n                            key={`${m.name} ${m.source}`}\r\n                            href={href(m)}\r\n                        >\r\n                            <div className={BEM.element(\"name\")}>{m.name}</div>\r\n                            <div className={BEM.element(\"type\")}>\r\n                                {m.type.format()}\r\n                            </div>\r\n                            <div className={BEM.element(\"cr\")}>\r\n                                {m.formatChallengeRating()}\r\n                            </div>\r\n                            <div className={BEM.element(\"source\")}>\r\n                                {m.source}\r\n                            </div>\r\n                        </a>\r\n                    )}\r\n                    elementHeight={32}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport { MonsterCard } from \"./MonsterCard\";\r\nimport { MonsterList } from \"./MonsterList\";\r\nimport \"./MonsterPage.css\";\r\n\r\nfunction useSelectedMonster() {\r\n    const params = new URLSearchParams(useLocation().search);\r\n    const name = params.get(\"name\");\r\n    if (name != null && name !== \"\") {\r\n        const source = params.get(\"source\");\r\n        return {\r\n            name: name,\r\n            source: !!source ? source : undefined\r\n        };\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function MonsterPage() {\r\n    const selected = useSelectedMonster();\r\n    return (\r\n        <div className=\"row monster-page\">\r\n            <div className=\"col monster-page__list\">\r\n                <MonsterList selected={selected} />\r\n            </div>\r\n            <div className=\"col monster-page__card\">\r\n                {selected && <MonsterCard monster={selected} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Navigation } from \"./application/Navigation\";\nimport { MonsterPage } from \"./monster/MonsterPage\";\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div className=\"container-fluid app\">\n                <Navigation />\n                <Switch>\n                    <Route path=\"/monsters\">\n                        <MonsterPage />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}